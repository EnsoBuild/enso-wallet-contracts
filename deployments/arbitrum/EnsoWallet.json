{
  "address": "0xD422acd2C55A971DA69F5788B66454f2a157F3c7",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "command_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ExecutionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "caller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller_",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe88458da8b5a91790d517eb814f8edfab6336dc3a6734a29bd73e9237bb42c6f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf754916D90B109AE8E405FD34064cF6Df23947eb",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1914717",
    "logsBloom": "0x
    "blockHash": "0x3e2fed8cba66da1d7b39af6f59b8eab78c98c034d76a7a66a51e9a012da7dc2d",
    "transactionHash": "0xe88458da8b5a91790d517eb814f8edfab6336dc3a6734a29bd73e9237bb42c6f",
    "logs": [],
    "blockNumber": 28462982,
    "cumulativeGasUsed": "1914717",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7ee77f3666f6bda2492068d759696792",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"command_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ExecutionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"caller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnsoWallet.sol\":\"EnsoWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@ensofinance/weiroll/contracts/CommandBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary CommandBuilder {\\n    uint256 constant IDX_VARIABLE_LENGTH = 0x80;\\n    uint256 constant IDX_VALUE_MASK = 0x7f;\\n    uint256 constant IDX_END_OF_ARGS = 0xff;\\n    uint256 constant IDX_USE_STATE = 0xfe;\\n    uint256 constant IDX_DYNAMIC_START = 0xfd;\\n    uint256 constant IDX_DYNAMIC_END = 0xfc;\\n\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices\\n    ) internal view returns (bytes memory ret) {\\n        uint256 idx; // The current command index\\n        uint256 offsetIdx; // The index of the current offset\\n\\n        uint256 count; // Number of bytes in whole ABI encoded message\\n        uint256 free; // Pointer to first free byte in tail part of message\\n        uint256 offset; // Pointer to the first free byte for variable length data inside dynamic types\\n\\n        uint256[] memory offsets = new uint256[](10); // Optionally store the length of all dynamic types (a command cannot fit more than 10 dynamic types)\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n\\n        uint256 indicesLength; // Number of indices\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i; i < 32; ) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) {\\n                indicesLength = i;\\n                break;\\n            }\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    unchecked {\\n                        free += 32;\\n                        count += stateData.length;\\n                    }\\n                } else if (idx == IDX_DYNAMIC_START) {\\n                    offset = 1; // Semantically overloading the offset to work as a boolean\\n                } else if (idx == IDX_DYNAMIC_END) {\\n                    unchecked {\\n                        offsets[offsetIdx] = offset - 1; // Remove 1 that was set at the start of the dynamic type, to get correct offset length\\n                    }\\n                    offset = 0;\\n                    // Increase count and free for dynamic type pointer\\n                    unchecked {\\n                        offsetIdx++;\\n                        free += 32;\\n                        count += 32;\\n                    }\\n                } else {\\n                    // Add the size of the value, rounded up to the next word boundary, plus space for pointer and length\\n                    uint256 argLen = state[idx & IDX_VALUE_MASK].length;\\n                    require(\\n                        argLen % 32 == 0,\\n                        \\\"Dynamic state variables must be a multiple of 32 bytes\\\"\\n                    );\\n                    unchecked {\\n                        count += argLen + 32;\\n                    }\\n                    if (offset != 0) {\\n                        // Increase offset size\\n                        unchecked {\\n                            offset += 32;\\n                        }\\n                    } else {\\n                        // Progress next free slot\\n                        unchecked {\\n                            free += 32;\\n                        }\\n                    }\\n                }\\n            } else {\\n                require(\\n                    state[idx & IDX_VALUE_MASK].length == 32,\\n                    \\\"Static state variables must be 32 bytes\\\"\\n                );\\n                unchecked {\\n                    count += 32;\\n                }\\n                if (offset != 0) {\\n                    unchecked {\\n                        offset += 32;\\n                    }\\n                } else {\\n                    unchecked {\\n                        free += 32;\\n                    }\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Encode it\\n        ret = new bytes(count + 4);\\n        assembly {\\n            mstore(add(ret, 32), selector)\\n        }\\n        count = 0;\\n        offsetIdx = 0;\\n        for (uint256 i; i < indicesLength; ) {\\n            idx = uint8(indices[i]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    unchecked {\\n                        free += stateData.length - 32;\\n                        count += 32;\\n                    }\\n                } else if (idx == IDX_DYNAMIC_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    unchecked {\\n                        offset = free + offsets[offsetIdx];\\n                        count += 32;\\n                    }\\n                } else if (idx == IDX_DYNAMIC_END) {\\n                    offset = 0;\\n                    unchecked {\\n                        offsetIdx++;\\n                    }\\n                } else {\\n                    // Variable length data\\n                    uint256 argLen = state[idx & IDX_VALUE_MASK].length;\\n\\n                    if (offset != 0) {\\n                        // Part of dynamic type; put a pointer in the first free slot and write the data to the offset free slot\\n                        uint256 pointer = offsets[offsetIdx];\\n                        assembly {\\n                            mstore(add(add(ret, 36), free), pointer)\\n                        }\\n                        unchecked {\\n                            free += 32;\\n                        }\\n                        memcpy(\\n                            state[idx & IDX_VALUE_MASK],\\n                            0,\\n                            ret,\\n                            offset + 4,\\n                            argLen\\n                        );\\n                        unchecked {\\n                            offsets[offsetIdx] += argLen;\\n                            offset += argLen;\\n                        }\\n                    } else {\\n                        // Put a pointer in the current slot and write the data to first free slot\\n                        assembly {\\n                            mstore(add(add(ret, 36), count), free)\\n                        }\\n                        memcpy(\\n                            state[idx & IDX_VALUE_MASK],\\n                            0,\\n                            ret,\\n                            free + 4,\\n                            argLen\\n                        );\\n                        unchecked {\\n                            free += argLen;\\n                            count += 32;\\n                        }\\n                    }\\n                }\\n            } else {\\n                // Fixed length data\\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n                if (offset != 0) {\\n                    // Part of dynamic type; write to first free slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), free), mload(add(stateVar, 32)))\\n                    }\\n                    unchecked {\\n                        free += 32;\\n                    }\\n                } else {\\n                    // Write the data to current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), mload(add(stateVar, 32)))\\n                    }\\n                    unchecked {\\n                        count += 32;\\n                    }\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal pure returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argPtr;\\n                assembly {\\n                    argPtr := mload(add(output, 32))\\n                }\\n                require(\\n                    argPtr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            // Single word\\n            require(\\n                output.length == 32,\\n                \\\"Only one return value permitted (static)\\\"\\n            );\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint256 idx = uint256(uint8(index));\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcIdx,\\n        bytes memory dest,\\n        uint256 destIdx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcIdx),\\n                    len,\\n                    add(add(dest, 32), destIdx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9116e8acd07ff992e41fe4ea4e88de1fd6ed866db99d323b936545cfa030b299\",\"license\":\"MIT\"},\"@ensofinance/weiroll/contracts/VM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\nabstract contract VM {\\n    using CommandBuilder for bytes[];\\n\\n    uint256 constant FLAG_CT_DELEGATECALL = 0x00;\\n    uint256 constant FLAG_CT_CALL = 0x01;\\n    uint256 constant FLAG_CT_STATICCALL = 0x02;\\n    uint256 constant FLAG_CT_VALUECALL = 0x03;\\n    uint256 constant FLAG_CT_MASK = 0x03;\\n    uint256 constant FLAG_DATA = 0x20;\\n    uint256 constant FLAG_EXTENDED_COMMAND = 0x40;\\n    uint256 constant FLAG_TUPLE_RETURN = 0x80;\\n\\n    uint256 constant SHORT_COMMAND_FILL =\\n        0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    error ExecutionFailed(\\n        uint256 command_index,\\n        address target,\\n        string message\\n    );\\n\\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\\n        internal\\n        returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outData;\\n\\n        uint256 commandsLength = commands.length;\\n        for (uint256 i; i < commandsLength; i = _uncheckedIncrement(i)) {\\n            command = commands[i];\\n            flags = uint256(uint8(bytes1(command << 32)));\\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                i = _uncheckedIncrement(i);\\n                indices = commands[i];\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\\n                (success, outData) = address(uint160(uint256(command))) // target\\n                    .delegatecall(\\n                        // inputs\\n                        flags & FLAG_DATA == 0\\n                            ? state.buildInputs(\\n                                bytes4(command), // selector\\n                                indices\\n                            )\\n                            : state[\\n                                uint8(bytes1(indices)) &\\n                                CommandBuilder.IDX_VALUE_MASK\\n                            ]\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                (success, outData) = address(uint160(uint256(command))).call( // target\\n                    // inputs\\n                    flags & FLAG_DATA == 0\\n                        ? state.buildInputs(\\n                            bytes4(command), // selector\\n                            indices\\n                        )\\n                        : state[\\n                            uint8(bytes1(indices)) &\\n                            CommandBuilder.IDX_VALUE_MASK\\n                        ]\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outData) = address(uint160(uint256(command))) // target\\n                    .staticcall(\\n                        // inputs\\n                        flags & FLAG_DATA == 0\\n                            ? state.buildInputs(\\n                                bytes4(command), // selector\\n                                indices\\n                            )\\n                            : state[\\n                                uint8(bytes1(indices)) &\\n                                CommandBuilder.IDX_VALUE_MASK\\n                            ]\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                uint256 callEth;\\n                bytes memory v = state[uint8(bytes1(indices))];\\n                assembly {\\n                    callEth := mload(add(v, 0x20))\\n                }\\n                (success, outData) = address(uint160(uint256(command))).call{ // target\\n                    value: callEth\\n                }(\\n                    // inputs\\n                    flags & FLAG_DATA == 0\\n                        ? state.buildInputs(\\n                            bytes4(command), // selector\\n                            indices << 8 // skip value input\\n                        )\\n                        : state[\\n                            uint8(\\n                                bytes1(indices << 8) // first byte after value input\\n                            ) & CommandBuilder.IDX_VALUE_MASK\\n                        ]\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            if (!success) {\\n                if (outData.length > 0) {\\n                    assembly {\\n                        outData := add(outData, 68)\\n                    }\\n                }\\n                revert ExecutionFailed({\\n                    command_index: flags & FLAG_EXTENDED_COMMAND == 0\\n                        ? i\\n                        : i - 1,\\n                    target: address(uint160(uint256(command))),\\n                    message: outData.length > 0 ? string(outData) : \\\"Unknown\\\"\\n                });\\n            }\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outData);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outData);\\n            }\\n        }\\n        return state;\\n    }\\n\\n    function _uncheckedIncrement(uint256 i) private pure returns (uint256) {\\n        unchecked {\\n            ++i;\\n        }\\n        return i;\\n    }\\n}\\n\",\"keccak256\":\"0x5b46e72687038c670dd8ae2a35a5082dbaeb64e9b44b446bde03a8ebd75fd046\",\"license\":\"MIT\"},\"contracts/EnsoWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {VM} from \\\"@ensofinance/weiroll/contracts/VM.sol\\\";\\n\\ncontract EnsoWallet is VM {\\n    address public caller;\\n    bool public initialized;\\n\\n    // Already initialized\\n    error AlreadyInit();\\n    // Not caller\\n    error NotCaller();\\n    // Invalid address\\n    error InvalidAddress();\\n\\n    function initialize(\\n        address caller_,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) external payable {\\n        if (initialized) revert AlreadyInit();\\n        caller = caller_;\\n        if (commands.length != 0) {\\n            _execute(commands, state);\\n        }\\n    }\\n\\n    function execute(bytes32[] calldata commands, bytes[] calldata state)\\n        external\\n        payable\\n        returns (bytes[] memory returnData)\\n    {\\n        if (msg.sender != caller) revert NotCaller();\\n        returnData = _execute(commands, state);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x4fe83f88597abfae41c69374f58c32a76dba062726cd6f7565bfa6d135fda4b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611341806100206000396000f3fe6080604052600436106100435760003560e01c8063158ef93e1461004f57806387258e8e14610096578063de792d5f146100ab578063fc9c8d39146100cb57600080fd5b3661004a57005b600080fd5b34801561005b57600080fd5b506000546100819074010000000000000000000000000000000000000000900460ff1681565b60405190151581526020015b60405180910390f35b6100a96100a4366004610e4d565b610103565b005b6100be6100b9366004610edc565b6101ae565b60405161008d9190610f98565b3480156100d757600080fd5b506000546100eb906001600160a01b031681565b6040516001600160a01b03909116815260200161008d565b60005474010000000000000000000000000000000000000000900460ff1615610158576040517fef34ca5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03871617905582156101a7576101a584846101a084866110ab565b61020d565b505b5050505050565b6000546060906001600160a01b031633146101f5576040517f16c618d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61020485856101a085876110ab565b95945050505050565b606060008080808487825b81811015610683578a8a8281811061023257610232611160565b905060200201359650602087901b60f81c60ff16955060408616600014610276576001018a8a8281811061026857610268611160565b90506020020135945061029a565b602887901b79ffffffffffffffffffffffffffffffffffffffffffffffffffff1794505b60038616610340576001600160a01b03871660208716156102dd5789607f8760f81c60ff1616815181106102d0576102d0611160565b60200260200101516102e8565b6102e88a8988610695565b6040516102f59190611176565b600060405180830381855af49150503d8060008114610330576040519150601f19603f3d011682016040523d82523d6000602084013e610335565b606091505b5090945092506105a4565b600160038716036103db576001600160a01b03871660208716156103865789607f8760f81c60ff16168151811061037957610379611160565b6020026020010151610391565b6103918a8988610695565b60405161039e9190611176565b6000604051808303816000865af19150503d8060008114610330576040519150601f19603f3d011682016040523d82523d6000602084013e610335565b60026003871603610474576001600160a01b03871660208716156104215789607f8760f81c60ff16168151811061041457610414611160565b602002602001015161042c565b61042c8a8988610695565b6040516104399190611176565b600060405180830381855afa9150503d8060008114610330576040519150601f19603f3d011682016040523d82523d6000602084013e610335565b600380871603610557576000808a8760f81c60ff168151811061049957610499611160565b60200260200101519050602081015191508860001c6001600160a01b03168260208a166000146104eb578c518d9060f08b901c607f169081106104de576104de611160565b60200260200101516104fa565b6104fa8d8c60088c901b610695565b6040516105079190611176565b60006040518083038185875af1925050503d8060008114610544576040519150601f19603f3d011682016040523d82523d6000602084013e610549565b606091505b5090965094506105a4915050565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c69642063616c6c747970650000000000000000000000000000000060448201526064015b60405180910390fd5b8361064c578251156105b7576044830192505b60408616156105d0576105cb6001826111a8565b6105d2565b805b83518890610615576040518060400160405280600781526020017f556e6b6e6f776e00000000000000000000000000000000000000000000000000815250610617565b845b6040517fef3dcb2f00000000000000000000000000000000000000000000000000000000815260040161059b939291906111c1565b60808616156106695761066489605889901b85610bc2565b61067b565b61067889605889901b85610c67565b98505b600101610218565b508796505050505050505b9392505050565b606060008080808080600a6040519080825280602002602001820160405280156106c9578160200160208202803683370190505b50905060606000805b6020811015610929578a81602081106106ed576106ed611160565b1a985060fe19890161070157809150610929565b608089161561086e5760fe890361074f57825160000361073e578c60405160200161072c9190610f98565b60405160208183030381529060405292505b602086019550825187019650610921565b60fd89036107605760019450610921565b60fc89036107a7576001850384898151811061077e5761077e611160565b602002602001018181525050600094508780600101985050602086019550602087019650610921565b60008d607f8b16815181106107be576107be611160565b60200260200101515190506020816107d691906111e9565b156108495760405162461bcd60e51b815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f6620333220627974657300000000000000000000606482015260840161059b565b96870160200196851561086157602086019550610868565b6020870196505b50610921565b8c607f8a168151811061088357610883611160565b6020026020010151516020146109015760405162461bcd60e51b815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f3220627974657300000000000000000000000000000000000000000000000000606482015260840161059b565b6020870196508460001461091a57602085019450610921565b6020860195505b6001016106d2565b5061093586600461120b565b67ffffffffffffffff81111561094d5761094d611018565b6040519080825280601f01601f191660200182016040528015610977576020820181803683370190505b5098508a60208a0152600095506000965060005b81811015610bb2578a81602081106109a5576109a5611160565b1a98506080891615610b555760fe89036109fb578987016024018690526109e78360208c6109d48a600461120b565b602088516109e291906111a8565b610de7565b602083510386019550602087019650610baa565b60fd8903610a3457858760248c010152838881518110610a1d57610a1d611160565b602002602001015186019450602087019650610baa565b60fc8903610a4b5760019097019660009450610baa565b60008d607f8b1681518110610a6257610a62611160565b602002602001015151905085600014610b05576000858a81518110610a8957610a89611160565b60200260200101519050808860248e010152602088019750610ad78f607f8d1681518110610ab957610ab9611160565b602002602001015160008e8a6004610ad1919061120b565b86610de7565b81868b81518110610aea57610aea611160565b60209081029190910101805190910190525094850194610b4f565b868860248d010152610b438e607f8c1681518110610b2557610b25611160565b602002602001015160008d8a6004610b3d919061120b565b85610de7565b80870196506020880197505b50610baa565b60008d607f8b1681518110610b6c57610b6c611160565b6020026020010151905085600014610b955760208101518760248d010152602087019650610ba8565b60208101518860248d0101526020880197505b505b60010161098b565b5050505050505050509392505050565b60f882901c60fe198101610bd65750505050565b600082516020610be6919061120b565b67ffffffffffffffff811115610bfe57610bfe611018565b6040519080825280601f01601f191660200182016040528015610c28576020820181803683370190505b50858381518110610c3b57610c3b611160565b602002602001018190529050610c578360008360208751610de7565b8251806020830152505050505050565b606060f883901c60fe198101610c80578491505061068e565b6080811615610d455760fe8103610cac5782806020019051810190610ca5919061121e565b9450610dde565b602083810151908114610d275760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c652900000000000000000000000000000000000000000000606482015260840161059b565b508251601f19016020848101918252607f8316810287010152610dde565b8251602014610dbc5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f2873746174696329000000000000000000000000000000000000000000000000606482015260840161059b565b8285607f831681518110610dd257610dd2611160565b60200260200101819052505b50929392505050565b808260208501018286602089010160045afa505050505050565b60008083601f840112610e1357600080fd5b50813567ffffffffffffffff811115610e2b57600080fd5b6020830191508360208260051b8501011115610e4657600080fd5b9250929050565b600080600080600060608688031215610e6557600080fd5b85356001600160a01b0381168114610e7c57600080fd5b9450602086013567ffffffffffffffff80821115610e9957600080fd5b610ea589838a01610e01565b90965094506040880135915080821115610ebe57600080fd5b50610ecb88828901610e01565b969995985093965092949392505050565b60008060008060408587031215610ef257600080fd5b843567ffffffffffffffff80821115610f0a57600080fd5b610f1688838901610e01565b90965094506020870135915080821115610f2f57600080fd5b50610f3c87828801610e01565b95989497509550505050565b60005b83811015610f63578181015183820152602001610f4b565b50506000910152565b60008151808452610f84816020860160208601610f48565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561100b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610ff9858351610f6c565b94509285019290850190600101610fbf565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561105757611057611018565b604052919050565b600067ffffffffffffffff82111561107957611079611018565b5060051b60200190565b600067ffffffffffffffff82111561109d5761109d611018565b50601f01601f191660200190565b60006110be6110b98461105f565b61102e565b80848252602080830192508560051b8501368111156110dc57600080fd5b855b8181101561115457803567ffffffffffffffff8111156110fe5760008081fd5b870136601f8201126111105760008081fd5b803561111e6110b982611083565b81815236868385010111156111335760008081fd5b818684018783013760009181018601919091528652509382019382016110de565b50919695505050505050565b634e487b7160e01b600052603260045260246000fd5b60008251611188818460208701610f48565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b818103818111156111bb576111bb611192565b92915050565b8381526001600160a01b03831660208201526060604082015260006102046060830184610f6c565b60008261120657634e487b7160e01b600052601260045260246000fd5b500690565b808201808211156111bb576111bb611192565b6000602080838503121561123157600080fd5b825167ffffffffffffffff8082111561124957600080fd5b818501915085601f83011261125d57600080fd5b815161126b6110b98261105f565b81815260059190911b8301840190848101908883111561128a57600080fd5b8585015b838110156112fe578051858111156112a65760008081fd5b8601603f81018b136112b85760008081fd5b8781015160406112ca6110b983611083565b8281528d828486010111156112df5760008081fd5b6112ee838c8301848701610f48565b865250505091860191860161128e565b509897505050505050505056fea264697066735822122005cb60a714fa820747e2e412b8550d7de004f0d776a4cc475d3aa203663cc2ba64736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106100435760003560e01c8063158ef93e1461004f57806387258e8e14610096578063de792d5f146100ab578063fc9c8d39146100cb57600080fd5b3661004a57005b600080fd5b34801561005b57600080fd5b506000546100819074010000000000000000000000000000000000000000900460ff1681565b60405190151581526020015b60405180910390f35b6100a96100a4366004610e4d565b610103565b005b6100be6100b9366004610edc565b6101ae565b60405161008d9190610f98565b3480156100d757600080fd5b506000546100eb906001600160a01b031681565b6040516001600160a01b03909116815260200161008d565b60005474010000000000000000000000000000000000000000900460ff1615610158576040517fef34ca5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03871617905582156101a7576101a584846101a084866110ab565b61020d565b505b5050505050565b6000546060906001600160a01b031633146101f5576040517f16c618d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61020485856101a085876110ab565b95945050505050565b606060008080808487825b81811015610683578a8a8281811061023257610232611160565b905060200201359650602087901b60f81c60ff16955060408616600014610276576001018a8a8281811061026857610268611160565b90506020020135945061029a565b602887901b79ffffffffffffffffffffffffffffffffffffffffffffffffffff1794505b60038616610340576001600160a01b03871660208716156102dd5789607f8760f81c60ff1616815181106102d0576102d0611160565b60200260200101516102e8565b6102e88a8988610695565b6040516102f59190611176565b600060405180830381855af49150503d8060008114610330576040519150601f19603f3d011682016040523d82523d6000602084013e610335565b606091505b5090945092506105a4565b600160038716036103db576001600160a01b03871660208716156103865789607f8760f81c60ff16168151811061037957610379611160565b6020026020010151610391565b6103918a8988610695565b60405161039e9190611176565b6000604051808303816000865af19150503d8060008114610330576040519150601f19603f3d011682016040523d82523d6000602084013e610335565b60026003871603610474576001600160a01b03871660208716156104215789607f8760f81c60ff16168151811061041457610414611160565b602002602001015161042c565b61042c8a8988610695565b6040516104399190611176565b600060405180830381855afa9150503d8060008114610330576040519150601f19603f3d011682016040523d82523d6000602084013e610335565b600380871603610557576000808a8760f81c60ff168151811061049957610499611160565b60200260200101519050602081015191508860001c6001600160a01b03168260208a166000146104eb578c518d9060f08b901c607f169081106104de576104de611160565b60200260200101516104fa565b6104fa8d8c60088c901b610695565b6040516105079190611176565b60006040518083038185875af1925050503d8060008114610544576040519150601f19603f3d011682016040523d82523d6000602084013e610549565b606091505b5090965094506105a4915050565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c69642063616c6c747970650000000000000000000000000000000060448201526064015b60405180910390fd5b8361064c578251156105b7576044830192505b60408616156105d0576105cb6001826111a8565b6105d2565b805b83518890610615576040518060400160405280600781526020017f556e6b6e6f776e00000000000000000000000000000000000000000000000000815250610617565b845b6040517fef3dcb2f00000000000000000000000000000000000000000000000000000000815260040161059b939291906111c1565b60808616156106695761066489605889901b85610bc2565b61067b565b61067889605889901b85610c67565b98505b600101610218565b508796505050505050505b9392505050565b606060008080808080600a6040519080825280602002602001820160405280156106c9578160200160208202803683370190505b50905060606000805b6020811015610929578a81602081106106ed576106ed611160565b1a985060fe19890161070157809150610929565b608089161561086e5760fe890361074f57825160000361073e578c60405160200161072c9190610f98565b60405160208183030381529060405292505b602086019550825187019650610921565b60fd89036107605760019450610921565b60fc89036107a7576001850384898151811061077e5761077e611160565b602002602001018181525050600094508780600101985050602086019550602087019650610921565b60008d607f8b16815181106107be576107be611160565b60200260200101515190506020816107d691906111e9565b156108495760405162461bcd60e51b815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f6620333220627974657300000000000000000000606482015260840161059b565b96870160200196851561086157602086019550610868565b6020870196505b50610921565b8c607f8a168151811061088357610883611160565b6020026020010151516020146109015760405162461bcd60e51b815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f3220627974657300000000000000000000000000000000000000000000000000606482015260840161059b565b6020870196508460001461091a57602085019450610921565b6020860195505b6001016106d2565b5061093586600461120b565b67ffffffffffffffff81111561094d5761094d611018565b6040519080825280601f01601f191660200182016040528015610977576020820181803683370190505b5098508a60208a0152600095506000965060005b81811015610bb2578a81602081106109a5576109a5611160565b1a98506080891615610b555760fe89036109fb578987016024018690526109e78360208c6109d48a600461120b565b602088516109e291906111a8565b610de7565b602083510386019550602087019650610baa565b60fd8903610a3457858760248c010152838881518110610a1d57610a1d611160565b602002602001015186019450602087019650610baa565b60fc8903610a4b5760019097019660009450610baa565b60008d607f8b1681518110610a6257610a62611160565b602002602001015151905085600014610b05576000858a81518110610a8957610a89611160565b60200260200101519050808860248e010152602088019750610ad78f607f8d1681518110610ab957610ab9611160565b602002602001015160008e8a6004610ad1919061120b565b86610de7565b81868b81518110610aea57610aea611160565b60209081029190910101805190910190525094850194610b4f565b868860248d010152610b438e607f8c1681518110610b2557610b25611160565b602002602001015160008d8a6004610b3d919061120b565b85610de7565b80870196506020880197505b50610baa565b60008d607f8b1681518110610b6c57610b6c611160565b6020026020010151905085600014610b955760208101518760248d010152602087019650610ba8565b60208101518860248d0101526020880197505b505b60010161098b565b5050505050505050509392505050565b60f882901c60fe198101610bd65750505050565b600082516020610be6919061120b565b67ffffffffffffffff811115610bfe57610bfe611018565b6040519080825280601f01601f191660200182016040528015610c28576020820181803683370190505b50858381518110610c3b57610c3b611160565b602002602001018190529050610c578360008360208751610de7565b8251806020830152505050505050565b606060f883901c60fe198101610c80578491505061068e565b6080811615610d455760fe8103610cac5782806020019051810190610ca5919061121e565b9450610dde565b602083810151908114610d275760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c652900000000000000000000000000000000000000000000606482015260840161059b565b508251601f19016020848101918252607f8316810287010152610dde565b8251602014610dbc5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f2873746174696329000000000000000000000000000000000000000000000000606482015260840161059b565b8285607f831681518110610dd257610dd2611160565b60200260200101819052505b50929392505050565b808260208501018286602089010160045afa505050505050565b60008083601f840112610e1357600080fd5b50813567ffffffffffffffff811115610e2b57600080fd5b6020830191508360208260051b8501011115610e4657600080fd5b9250929050565b600080600080600060608688031215610e6557600080fd5b85356001600160a01b0381168114610e7c57600080fd5b9450602086013567ffffffffffffffff80821115610e9957600080fd5b610ea589838a01610e01565b90965094506040880135915080821115610ebe57600080fd5b50610ecb88828901610e01565b969995985093965092949392505050565b60008060008060408587031215610ef257600080fd5b843567ffffffffffffffff80821115610f0a57600080fd5b610f1688838901610e01565b90965094506020870135915080821115610f2f57600080fd5b50610f3c87828801610e01565b95989497509550505050565b60005b83811015610f63578181015183820152602001610f4b565b50506000910152565b60008151808452610f84816020860160208601610f48565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561100b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610ff9858351610f6c565b94509285019290850190600101610fbf565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561105757611057611018565b604052919050565b600067ffffffffffffffff82111561107957611079611018565b5060051b60200190565b600067ffffffffffffffff82111561109d5761109d611018565b50601f01601f191660200190565b60006110be6110b98461105f565b61102e565b80848252602080830192508560051b8501368111156110dc57600080fd5b855b8181101561115457803567ffffffffffffffff8111156110fe5760008081fd5b870136601f8201126111105760008081fd5b803561111e6110b982611083565b81815236868385010111156111335760008081fd5b818684018783013760009181018601919091528652509382019382016110de565b50919695505050505050565b634e487b7160e01b600052603260045260246000fd5b60008251611188818460208701610f48565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b818103818111156111bb576111bb611192565b92915050565b8381526001600160a01b03831660208201526060604082015260006102046060830184610f6c565b60008261120657634e487b7160e01b600052601260045260246000fd5b500690565b808201808211156111bb576111bb611192565b6000602080838503121561123157600080fd5b825167ffffffffffffffff8082111561124957600080fd5b818501915085601f83011261125d57600080fd5b815161126b6110b98261105f565b81815260059190911b8301840190848101908883111561128a57600080fd5b8585015b838110156112fe578051858111156112a65760008081fd5b8601603f81018b136112b85760008081fd5b8781015160406112ca6110b983611083565b8281528d828486010111156112df5760008081fd5b6112ee838c8301848701610f48565b865250505091860191860161128e565b509897505050505050505056fea264697066735822122005cb60a714fa820747e2e412b8550d7de004f0d776a4cc475d3aa203663cc2ba64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1079,
        "contract": "contracts/EnsoWallet.sol:EnsoWallet",
        "label": "caller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1081,
        "contract": "contracts/EnsoWallet.sol:EnsoWallet",
        "label": "initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}