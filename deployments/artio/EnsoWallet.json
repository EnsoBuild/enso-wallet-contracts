{
  "address": "0xb6Bc9B50b4AC1397AB03d8a24d8fa529a5070ff0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "command_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ExecutionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoDelegateCalls",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsafeSetting",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ExecutionFromModuleFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "module",
          "type": "address"
        }
      ],
      "name": "ExecutionFromModuleSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "permission",
          "type": "bool"
        }
      ],
      "name": "PermissionSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXECUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MODULE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "enum IModuleManager.Operation",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "execTransactionFromModule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "enum IModuleManager.Operation",
          "name": "operation",
          "type": "uint8"
        }
      ],
      "name": "execTransactionFromModuleReturnData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "shortcutId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        }
      ],
      "name": "executeShortcut",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "shortcutId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum MinimalWallet.Protocol",
              "name": "protocol",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "operators",
              "type": "address[]"
            }
          ],
          "internalType": "struct MinimalWallet.ApprovalNote[]",
          "name": "notes",
          "type": "tuple[]"
        }
      ],
      "name": "revokeApprovals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "revokeERC1155Approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "erc20",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "revokeERC20Approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "erc721",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "revokeERC721Approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "permission",
          "type": "bool"
        }
      ],
      "name": "setPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum MinimalWallet.Protocol",
              "name": "protocol",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct MinimalWallet.TransferNote[]",
          "name": "notes",
          "type": "tuple[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC1155s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "erc20s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC20s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "erc721",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC721s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1669a96da1a1208f73fa23bdc3e96232491b513245991761dfd96c78d16dddfe",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x826e0BB2276271eFdF2a500597f37b94f6c153bA",
    "contractAddress": null,
    "transactionIndex": 76,
    "gasUsed": "3295601",
    "logsBloom": "0x
    "blockHash": "0x834c2fc68c60fcdfd82da2f6dbbd5199d6b5f2882d4c870976a4c414f71a7413",
    "transactionHash": "0x1669a96da1a1208f73fa23bdc3e96232491b513245991761dfd96c78d16dddfe",
    "logs": [],
    "blockNumber": 1048818,
    "cumulativeGasUsed": "14212559",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6e9a09176756a7e15ef5f84545755d11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"command_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ExecutionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDelegateCalls\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeSetting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ExecutionFromModuleSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"PermissionSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODULE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum IModuleManager.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum IModuleManager.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"execTransactionFromModuleReturnData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"shortcutId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"executeShortcut\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"shortcutId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MinimalWallet.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"internalType\":\"struct MinimalWallet.ApprovalNote[]\",\"name\":\"notes\",\"type\":\"tuple[]\"}],\"name\":\"revokeApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"revokeERC1155Approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"revokeERC20Approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"revokeERC721Approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"setPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MinimalWallet.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MinimalWallet.TransferNote[]\",\"name\":\"notes\",\"type\":\"tuple[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC1155s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"erc20s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"execTransactionFromModule(address,uint256,bytes,uint8)\":{\"details\":\"Allows a Module to execute a Safe transaction without any further confirmations.\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"}},\"execTransactionFromModuleReturnData(address,uint256,bytes,uint8)\":{\"details\":\"Allows a Module to execute a Safe transaction without any further confirmations and return data\",\"params\":{\"data\":\"Data payload of module transaction.\",\"operation\":\"Operation type of module transaction.\",\"to\":\"Destination address of module transaction.\",\"value\":\"Ether value of module transaction.\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnsoWallet.sol\":\"EnsoWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@ensofinance/weiroll/contracts/CommandBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.16;\\n\\nlibrary CommandBuilder {\\n    uint256 constant IDX_VARIABLE_LENGTH = 0x80;\\n    uint256 constant IDX_VALUE_MASK = 0x7f;\\n    uint256 constant IDX_END_OF_ARGS = 0xff;\\n    uint256 constant IDX_USE_STATE = 0xfe;\\n    uint256 constant IDX_ARRAY_START = 0xfd;\\n    uint256 constant IDX_TUPLE_START = 0xfc;\\n    uint256 constant IDX_DYNAMIC_END = 0xfb;\\n\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices,\\n        uint256 indicesLength\\n    ) internal view returns (bytes memory ret) {\\n        uint256 idx; // The current command index\\n        uint256 offsetIdx; // The index of the current free offset\\n\\n        uint256 count; // Number of bytes in whole ABI encoded message\\n        uint256 free; // Pointer to first free byte in tail part of message\\n        uint256[] memory dynamicLengths = new uint256[](10); // Optionally store the length of all dynamic types (a command cannot fit more than 10 dynamic types)\\n\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i; i < indicesLength; ) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) {\\n                indicesLength = i;\\n                break;\\n            }\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    unchecked {\\n                        count += stateData.length;\\n                    }\\n                } else {\\n                    (dynamicLengths, offsetIdx, count, i) = setupDynamicType(\\n                        state,\\n                        indices,\\n                        dynamicLengths,\\n                        idx,\\n                        offsetIdx,\\n                        count,\\n                        i\\n                    );\\n                }\\n            } else {\\n                count = setupStaticVariable(state, count, idx);\\n            }\\n            unchecked {\\n                free += 32;\\n                ++i;\\n            }\\n        }\\n\\n        // Encode it\\n        ret = new bytes(count + 4);\\n        assembly {\\n            mstore(add(ret, 32), selector)\\n        }\\n        offsetIdx = 0;\\n        // Use count to track current memory slot\\n        assembly {\\n            count := add(ret, 36)\\n        }\\n        for (uint256 i; i < indicesLength; ) {\\n            idx = uint8(indices[i]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        mstore(count, free)\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    unchecked {\\n                        free += stateData.length - 32;\\n                    }\\n                } else if (idx == IDX_ARRAY_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(count, free)\\n                    }\\n                    (offsetIdx, free, i, ) = encodeDynamicArray(\\n                        ret,\\n                        state,\\n                        indices,\\n                        dynamicLengths,\\n                        offsetIdx,\\n                        free,\\n                        i\\n                    );\\n                } else if (idx == IDX_TUPLE_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(count, free)\\n                    }\\n                    (offsetIdx, free, i, ) = encodeDynamicTuple(\\n                        ret,\\n                        state,\\n                        indices,\\n                        dynamicLengths,\\n                        offsetIdx,\\n                        free,\\n                        i\\n                    );\\n                } else {\\n                    // Variable length data\\n                    uint256 argLen = state[idx & IDX_VALUE_MASK].length;\\n                    // Put a pointer in the current slot and write the data to first free slot\\n                    assembly {\\n                        mstore(count, free)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        free + 4,\\n                        argLen\\n                    );\\n                    unchecked {\\n                        free += argLen;\\n                    }\\n                }\\n            } else {\\n                // Fixed length data (length previously checked to be 32 bytes)\\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n                // Write the data to current slot\\n                assembly {\\n                    mstore(count, mload(add(stateVar, 32)))\\n                }\\n            }\\n            unchecked {\\n                count += 32;\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function setupStaticVariable(\\n        bytes[] memory state,\\n        uint256 count,\\n        uint256 idx\\n    ) internal pure returns (uint256 newCount) {\\n        require(\\n            state[idx & IDX_VALUE_MASK].length == 32,\\n            \\\"Static state variables must be 32 bytes\\\"\\n        );\\n        unchecked {\\n            newCount = count + 32;\\n        }\\n    }\\n\\n    function setupDynamicVariable(\\n        bytes[] memory state,\\n        uint256 count,\\n        uint256 idx\\n    ) internal pure returns (uint256 newCount) {\\n        bytes memory arg = state[idx & IDX_VALUE_MASK];\\n        // Validate the length of the data in state is a multiple of 32\\n        uint256 argLen = arg.length;\\n        require(\\n            argLen != 0 && argLen % 32 == 0,\\n            \\\"Dynamic state variables must be a multiple of 32 bytes\\\"\\n        );\\n        // Add the length of the value, rounded up to the next word boundary, plus space for pointer\\n        unchecked {\\n            newCount = count + argLen + 32;\\n        }\\n    }\\n\\n    function setupDynamicType(\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory dynamicLengths,\\n        uint256 idx,\\n        uint256 offsetIdx,\\n        uint256 count,\\n        uint256 index\\n    ) internal view returns (\\n        uint256[] memory newDynamicLengths,\\n        uint256 newOffsetIdx,\\n        uint256 newCount,\\n        uint256 newIndex\\n    ) {\\n        if (idx == IDX_ARRAY_START) {\\n            (newDynamicLengths, newOffsetIdx, newCount, newIndex) = setupDynamicArray(\\n                state,\\n                indices,\\n                dynamicLengths,\\n                offsetIdx,\\n                count,\\n                index\\n            );\\n        } else if (idx == IDX_TUPLE_START) {\\n            (newDynamicLengths, newOffsetIdx, newCount, newIndex) = setupDynamicTuple(\\n                state,\\n                indices,\\n                dynamicLengths,\\n                offsetIdx,\\n                count,\\n                index\\n            );\\n        } else {\\n            newDynamicLengths = dynamicLengths;\\n            newOffsetIdx = offsetIdx;\\n            newIndex = index;\\n            newCount = setupDynamicVariable(state, count, idx);\\n        }\\n    }\\n\\n    function setupDynamicArray(\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory dynamicLengths,\\n        uint256 offsetIdx,\\n        uint256 count,\\n        uint256 index\\n    ) internal view returns (\\n        uint256[] memory newDynamicLengths,\\n        uint256 newOffsetIdx,\\n        uint256 newCount,\\n        uint256 newIndex\\n    ) {\\n        // Current idx is IDX_ARRAY_START, next idx will contain the array length\\n        unchecked {\\n            newIndex = index + 1;\\n            newCount = count + 32;\\n        }\\n        uint256 idx = uint8(indices[newIndex]);\\n        require(\\n            state[idx & IDX_VALUE_MASK].length == 32,\\n            \\\"Array length must be 32 bytes\\\"\\n        );\\n        (newDynamicLengths, newOffsetIdx, newCount, newIndex) = setupDynamicTuple(\\n            state,\\n            indices,\\n            dynamicLengths,\\n            offsetIdx,\\n            newCount,\\n            newIndex\\n        );\\n    }\\n\\n    function setupDynamicTuple(\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory dynamicLengths,\\n        uint256 offsetIdx,\\n        uint256 count,\\n        uint256 index\\n    ) internal view returns (\\n        uint256[] memory newDynamicLengths,\\n        uint256 newOffsetIdx,\\n        uint256 newCount,\\n        uint256 newIndex\\n    ) {\\n        uint256 idx;\\n        uint256 offset;\\n        newDynamicLengths = dynamicLengths;\\n        // Progress to first index of the data and progress the next offset idx\\n        unchecked {\\n            newIndex = index + 1;\\n            newOffsetIdx = offsetIdx + 1;\\n            newCount = count + 32;\\n        }\\n        while (newIndex < 32) {\\n            idx = uint8(indices[newIndex]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_DYNAMIC_END) {\\n                    newDynamicLengths[offsetIdx] = offset;\\n                    // explicit return saves gas \\u00af\\\\_(\\u30c4)_/\\u00af\\n                    return (newDynamicLengths, newOffsetIdx, newCount, newIndex);\\n                } else {\\n                    require(idx != IDX_USE_STATE, \\\"Cannot use state from inside dynamic type\\\");\\n                    (newDynamicLengths, newOffsetIdx, newCount, newIndex) = setupDynamicType(\\n                        state,\\n                        indices,\\n                        newDynamicLengths,\\n                        idx,\\n                        newOffsetIdx,\\n                        newCount,\\n                        newIndex\\n                    );\\n                }\\n            } else {\\n                newCount = setupStaticVariable(state, newCount, idx);\\n            }\\n            unchecked {\\n                offset += 32;\\n                ++newIndex;\\n            }\\n        }\\n        revert(\\\"Dynamic type was not properly closed\\\");\\n    }\\n\\n    function encodeDynamicArray(\\n        bytes memory ret,\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory dynamicLengths,\\n        uint256 offsetIdx,\\n        uint256 currentSlot,\\n        uint256 index\\n    ) internal view returns (\\n        uint256 newOffsetIdx,\\n        uint256 newSlot,\\n        uint256 newIndex,\\n        uint256 length\\n    ) {\\n        // Progress to array length metadata\\n        unchecked {\\n            newIndex = index + 1;\\n            newSlot = currentSlot + 32;\\n        }\\n        // Encode array length\\n        uint256 idx = uint8(indices[newIndex]);\\n        // Array length value previously checked to be 32 bytes\\n        bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n        assembly {\\n            mstore(add(add(ret, 36), currentSlot), mload(add(stateVar, 32)))\\n        }\\n        (newOffsetIdx, newSlot, newIndex, length) = encodeDynamicTuple(\\n            ret,\\n            state,\\n            indices,\\n            dynamicLengths,\\n            offsetIdx,\\n            newSlot,\\n            newIndex\\n        );\\n        unchecked {\\n            length += 32; // Increase length to account for array length metadata\\n        }\\n    }\\n\\n    function encodeDynamicTuple(\\n        bytes memory ret,\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory dynamicLengths,\\n        uint256 offsetIdx,\\n        uint256 currentSlot,\\n        uint256 index\\n    ) internal view returns (\\n        uint256 newOffsetIdx,\\n        uint256 newSlot,\\n        uint256 newIndex,\\n        uint256 length\\n    ) {\\n        uint256 idx;\\n        uint256 argLen;\\n        uint256 freePointer = dynamicLengths[offsetIdx]; // The pointer to the next free slot\\n        unchecked {\\n            newSlot = currentSlot + freePointer; // Update the next slot\\n            newOffsetIdx = offsetIdx + 1; // Progress to next offsetIdx\\n            newIndex = index + 1; // Progress to first index of the data\\n        }\\n        // Shift currentSlot to correct location in memory\\n        assembly {\\n            currentSlot := add(add(ret, 36), currentSlot)\\n        }\\n        while (newIndex < 32) {\\n            idx = uint8(indices[newIndex]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_DYNAMIC_END) {\\n                    break;\\n                } else if (idx == IDX_ARRAY_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(currentSlot, freePointer)\\n                    }\\n                    (newOffsetIdx, newSlot, newIndex, argLen) = encodeDynamicArray(\\n                        ret,\\n                        state,\\n                        indices,\\n                        dynamicLengths,\\n                        newOffsetIdx,\\n                        newSlot,\\n                        newIndex\\n                    );\\n                    unchecked {\\n                        freePointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                    }\\n                } else if (idx == IDX_TUPLE_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(currentSlot, freePointer)\\n                    }\\n                    (newOffsetIdx, newSlot, newIndex, argLen) = encodeDynamicTuple(\\n                        ret,\\n                        state,\\n                        indices,\\n                        dynamicLengths,\\n                        newOffsetIdx,\\n                        newSlot,\\n                        newIndex\\n                    );\\n                    unchecked {\\n                        freePointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                    }\\n                } else  {\\n                    // Variable length data\\n                    argLen = state[idx & IDX_VALUE_MASK].length;\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(currentSlot, freePointer)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        newSlot + 4,\\n                        argLen\\n                    );\\n                    unchecked {\\n                        newSlot += argLen;\\n                        freePointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                    }\\n                }\\n            } else {\\n                // Fixed length data (length previously checked to be 32 bytes)\\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n                // Write to first free slot\\n                assembly {\\n                    mstore(currentSlot, mload(add(stateVar, 32)))\\n                }\\n                unchecked {\\n                    length += 32;\\n                }\\n            }\\n            unchecked {\\n                currentSlot += 32;\\n                ++newIndex;\\n            }\\n        }\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal pure returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                require(idx & IDX_VALUE_MASK < state.length, \\\"Index out-of-bounds\\\");\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argPtr;\\n                assembly {\\n                    argPtr := mload(add(output, 32))\\n                }\\n                require(\\n                    argPtr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            require(idx & IDX_VALUE_MASK < state.length, \\\"Index out-of-bounds\\\");\\n            // Single word\\n            require(\\n                output.length == 32,\\n                \\\"Only one return value permitted (static)\\\"\\n            );\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx & IDX_VALUE_MASK] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcIdx,\\n        bytes memory dest,\\n        uint256 destIdx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcIdx),\\n                    len,\\n                    add(add(dest, 32), destIdx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6f5e1f44b67c4bfd0f3578c998a6cbd0a936b5912d4dfd668291e01979c6aa3\",\"license\":\"GPL-3.0-only\"},\"@ensofinance/weiroll/contracts/VM.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\nabstract contract VM {\\n    using CommandBuilder for bytes[];\\n\\n    uint256 constant FLAG_CT_DELEGATECALL = 0x00; // Delegate call not currently supported\\n    uint256 constant FLAG_CT_CALL = 0x01;\\n    uint256 constant FLAG_CT_STATICCALL = 0x02;\\n    uint256 constant FLAG_CT_VALUECALL = 0x03;\\n    uint256 constant FLAG_CT_MASK = 0x03;\\n    uint256 constant FLAG_DATA = 0x20;\\n    uint256 constant FLAG_EXTENDED_COMMAND = 0x40;\\n    uint256 constant FLAG_TUPLE_RETURN = 0x80;\\n\\n    uint256 constant SHORT_COMMAND_FILL =\\n        0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    error ExecutionFailed(\\n        uint256 command_index,\\n        address target,\\n        string message\\n    );\\n\\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\\n        internal\\n        returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outData;\\n\\n        uint256 commandsLength = commands.length;\\n        uint256 indicesLength;\\n        for (uint256 i; i < commandsLength; i = _uncheckedIncrement(i)) {\\n            command = commands[i];\\n            flags = uint256(uint8(bytes1(command << 32)));\\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                i = _uncheckedIncrement(i);\\n                indices = commands[i];\\n                indicesLength = 32;\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n                indicesLength = 6;\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                (success, outData) = address(uint160(uint256(command))).call( // target\\n                    // inputs\\n                    flags & FLAG_DATA == 0\\n                        ? state.buildInputs(\\n                            bytes4(command), // selector\\n                            indices,\\n                            indicesLength\\n                        )\\n                        : state[\\n                            uint8(bytes1(indices)) &\\n                            CommandBuilder.IDX_VALUE_MASK\\n                        ]\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outData) = address(uint160(uint256(command))) // target\\n                    .staticcall(\\n                        // inputs\\n                        flags & FLAG_DATA == 0\\n                            ? state.buildInputs(\\n                                bytes4(command), // selector\\n                                indices,\\n                                indicesLength\\n                            )\\n                            : state[\\n                                uint8(bytes1(indices)) &\\n                                CommandBuilder.IDX_VALUE_MASK\\n                            ]\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                bytes memory v = state[\\n                    uint8(bytes1(indices)) &\\n                    CommandBuilder.IDX_VALUE_MASK\\n                ];\\n                require(v.length == 32, \\\"Value must be 32 bytes\\\");\\n                uint256 callEth = uint256(bytes32(v));\\n                (success, outData) = address(uint160(uint256(command))).call{ // target\\n                    value: callEth\\n                }(\\n                    // inputs\\n                    flags & FLAG_DATA == 0\\n                        ? state.buildInputs(\\n                            bytes4(command), // selector\\n                            indices << 8, // skip value input\\n                            indicesLength - 1 // max indices length reduced by value input\\n                        )\\n                        : state[\\n                            uint8(bytes1(indices << 8)) & // first byte after value input\\n                            CommandBuilder.IDX_VALUE_MASK\\n                        ]\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            if (!success) {\\n                string memory message = \\\"Unknown\\\";\\n                if (outData.length > 68) {\\n                    // This might be an error message, parse the outData\\n                    // Estimate the bytes length of the possible error message\\n                    uint256 estimatedLength = _estimateBytesLength(outData, 68);\\n                    // Remove selector. First 32 bytes should be a pointer that indicates the start of data in memory\\n                    assembly {\\n                        outData := add(outData, 4)\\n                    }\\n                    uint256 pointer = uint256(bytes32(outData));\\n                    if (pointer == 32) {\\n                        // Remove pointer. If it is a string, the next 32 bytes will hold the size\\n                        assembly {\\n                            outData := add(outData, 32)\\n                        }\\n                        uint256 size = uint256(bytes32(outData));\\n                        // If the size variable is the same as the estimated bytes length, we can be fairly certain\\n                        // this is a dynamic string, so convert the bytes to a string and emit the message. While an\\n                        // error function with 3 static parameters is capable of producing a similar output, there is\\n                        // low risk of a contract unintentionally emitting a message.\\n                        if (size == estimatedLength) {\\n                            // Remove size. The remaining data should be the string content\\n                            assembly {\\n                                outData := add(outData, 32)\\n                            }\\n                            message = string(outData);\\n                        }\\n                    }\\n                }\\n                revert ExecutionFailed({\\n                    command_index: flags & FLAG_EXTENDED_COMMAND == 0\\n                        ? i\\n                        : i - 1,\\n                    target: address(uint160(uint256(command))),\\n                    message: message\\n                });\\n            }\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outData);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outData);\\n            }\\n        }\\n        return state;\\n    }\\n\\n    function _estimateBytesLength(bytes memory data, uint256 pos) internal pure returns (uint256 estimate) {\\n        uint256 length = data.length;\\n        estimate = length - pos; // Assume length equals alloted space\\n        for (uint256 i = pos; i < length; ) {\\n            if (data[i] == 0) {\\n                // Zero bytes found, adjust estimated length\\n                estimate = i - pos;\\n                break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _uncheckedIncrement(uint256 i) private pure returns (uint256) {\\n        unchecked {\\n            ++i;\\n        }\\n        return i;\\n    }\\n}\\n\",\"keccak256\":\"0x82074b35c073aac1d4ecabf0d76cdeb597248dc9f9030ca197f4a119941670fe\",\"license\":\"GPL-3.0-only\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/EnsoWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nimport \\\"@ensofinance/weiroll/contracts/VM.sol\\\";\\nimport \\\"./access/AccessController.sol\\\";\\nimport \\\"./wallet/ERC1271.sol\\\";\\nimport \\\"./wallet/MinimalWallet.sol\\\";\\nimport \\\"./wallet/ModuleManager.sol\\\";\\nimport \\\"./interfaces/IEnsoWallet.sol\\\";\\n\\ncontract EnsoWallet is IEnsoWallet, VM, AccessController, ModuleManager, ERC1271, MinimalWallet {\\n    using StorageAPI for bytes32;\\n\\n    // Using same slot generation technique as eip-1967 -- https://eips.ethereum.org/EIPS/eip-1967\\n    bytes32 internal constant SALT = bytes32(uint256(keccak256(\\\"enso.wallet.salt\\\")) - 1);\\n\\n    error AlreadyInit();\\n\\n    constructor() {\\n        // Set salt to 0xff so that the implementation cannot be initialized\\n        SALT.setBytes32(bytes32(type(uint256).max)); \\n    }\\n\\n    // @notice Initialize wallet by setting state and permissions\\n    // @dev A wallet is considered initialized if the SALT is set in state. Subsequent calls to this function will fail.\\n    // @param owner The address of the wallet owner\\n    // @param salt The salt used to deploy the proxy that uses this contract as it's implementation\\n    // @param shortcutId The bytes32 value representing a shortcut\\n    // @param commands The optional commands for executing a shortcut\\n    // @param state The optional state for executing a shortcut\\n    function initialize(\\n        address owner,\\n        bytes32 salt,\\n        bytes32 shortcutId,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) external payable override {\\n        if (SALT.getBytes32() != bytes32(0)) revert AlreadyInit();\\n        SALT.setBytes32(salt);\\n        _setPermission(OWNER_ROLE, owner, true);\\n        _setPermission(EXECUTOR_ROLE, owner, true);\\n        if (commands.length != 0) {\\n            _executeShortcut(shortcutId, commands, state);\\n        }\\n    }\\n\\n    // @notice A function to execute an arbitrary call on another contract\\n    // @param target The address of the target contract\\n    // @param value The ether value that is to be sent with the call\\n    // @param data The call data to be sent to the target\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) external payable isPermitted(EXECUTOR_ROLE) returns (bool success) {\\n        return _executeCall(target, value, data);\\n    }\\n\\n    // @notice Execute a shortcut from this contract\\n    // @param shortcutId The bytes32 value representing a shortcut\\n    // @param commands An array of bytes32 values that encode calls\\n    // @param state An array of bytes that are used to generate call data for each command\\n    function executeShortcut(\\n        bytes32 shortcutId,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) external payable isPermitted(EXECUTOR_ROLE) returns (bytes[] memory returnData) {\\n        returnData = _executeShortcut(shortcutId, commands, state);\\n    }\\n\\n    // @notice Internal function to execute a shortcut from this contract\\n    // @param shortcutId The bytes32 value representing a shortcut\\n    // @param commands An array of bytes32 values that encode calls\\n    // @param state An array of bytes that are used to generate call data for each command\\n    function _executeShortcut(\\n        bytes32 shortcutId,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) internal returns (bytes[] memory returnData) {\\n        (shortcutId); // ShortcutId just needs to be retrieved from call data, can support events in future upgrade\\n        returnData = _execute(commands, state);\\n    }\\n\\n    // @notice Internal function to execute an arbitrary call on another contract\\n    // @param target The address of the target contract\\n    // @param value The ether value that is to be sent with the call\\n    // @param data The call data to be sent to the target\\n    function _executeCall(\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) internal override returns (bool success) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := call(gas(), target, value, add(data, 0x20), mload(data), 0, 0)\\n        }\\n    }\\n\\n    // @notice Internal function for checking the ERC-1271 signer\\n    // @param signer The address that signed a message\\n    function _checkSigner(address signer) internal view override returns (bool) {\\n        return _getPermission(OWNER_ROLE, signer);\\n    }\\n}\\n\",\"keccak256\":\"0x9d4d4a4d6c993141e673b53afe01bb52c4fd9c2490776f910eb810fbe569ef51\",\"license\":\"GPL-3.0-only\"},\"contracts/access/ACL.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/StorageAPI.sol\\\";\\n\\nabstract contract ACL {\\n    using StorageAPI for bytes32;\\n\\n    error NotPermitted();\\n\\n    modifier isPermitted(bytes32 role) {\\n        bool permitted = _getPermission(role, msg.sender); // TODO: support GSN/Account abstraction\\n        if (!permitted) revert NotPermitted();\\n        _;\\n    }\\n\\n    // @notice Gets user permission for a role\\n    // @param role The bytes32 value of the role\\n    // @param account The address of the account\\n    // @return The permission status\\n    function getPermission(bytes32 role, address account) external view returns (bool) {\\n        return _getPermission(role, account);\\n    }\\n\\n    // @notice Internal function to get user permission for a role\\n    // @param role The bytes32 value of the role\\n    // @param account The address of the account\\n    // @return The permission status\\n    function _getPermission(bytes32 role, address account) internal view returns (bool) {\\n        bytes32 key = _getKey(role, account);\\n        return key.getBool();\\n    }\\n\\n    // @notice Internal function to get the key for the storage slot\\n    // @param role The bytes32 value of the role\\n    // @param account The address of the account\\n    // @return The bytes32 storage slot\\n    function _getKey(bytes32 role, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(role, account));\\n    }\\n}\\n\",\"keccak256\":\"0x50bc9b50157b89338a27043a7f24d9f6bc93bf624d93c9a4151d74c99340e6c1\",\"license\":\"GPL-3.0-only\"},\"contracts/access/AccessController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nimport \\\"./ACL.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\n// @notice The OWNER_ROLE must be set in the importing contract's constructor or initialize function\\nabstract contract AccessController is ACL, Roles {\\n    using StorageAPI for bytes32;\\n\\n    event PermissionSet(bytes32 role, address account, bool permission);\\n\\n    error UnsafeSetting();\\n    error InvalidAccount();\\n\\n    // @notice Sets user permission over a role\\n    // @param role The bytes32 value of the role\\n    // @param account The address of the account\\n    // @param permission The permission status\\n    function setPermission(\\n        bytes32 role,\\n        address account,\\n        bool permission\\n    ) external isPermitted(OWNER_ROLE) {\\n        if (account == address(0)) revert InvalidAccount();\\n        if (role == OWNER_ROLE && account == msg.sender && permission == false)\\n            revert UnsafeSetting();\\n        _setPermission(role, account, permission);\\n    }\\n\\n    // @notice Internal function to set user permission over a role\\n    // @param role The bytes32 value of the role\\n    // @param account The address of the account\\n    // @param permission The permission status\\n    function _setPermission(bytes32 role, address account, bool permission) internal {\\n        bytes32 key = _getKey(role, account);\\n        key.setBool(permission);\\n        emit PermissionSet(role, account, permission);\\n    }\\n}\\n\",\"keccak256\":\"0xc896dc98964c5f657ef5c973fac5eec56890c096feae68b934888636d414739b\",\"license\":\"GPL-3.0-only\"},\"contracts/access/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nabstract contract Roles {\\n    // Using same slot generation technique as eip-1967 -- https://eips.ethereum.org/EIPS/eip-1967\\n    bytes32 public constant OWNER_ROLE = bytes32(uint256(keccak256(\\\"enso.access.roles.owner\\\")) - 1);\\n    bytes32 public constant EXECUTOR_ROLE = bytes32(uint256(keccak256(\\\"enso.access.roles.executor\\\")) - 1);\\n    bytes32 public constant MODULE_ROLE = bytes32(uint256(keccak256(\\\"enso.access.roles.module\\\")) - 1);\\n}\",\"keccak256\":\"0x610f0e86412393a50368863c8c6276e42340535c14c80f9ec126e3c69efd4ad3\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IERC1271 {\\n    function isValidSignature(bytes32 _hash, bytes calldata _signature) external view returns (bytes4 magicValue);\\n\\n    function isValidSignature(\\n        bytes calldata _message,\\n        bytes calldata _signature\\n    ) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xa4540ed4dbcd2d919f687fb9412c6cdf5b6d8909e41471efc13b13f962e682bd\",\"license\":\"MIT\"},\"contracts/interfaces/IEnsoWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\ninterface IEnsoWallet {\\n    function initialize(\\n        address owner,\\n        bytes32 salt,\\n        bytes32 shortcutId,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x89b70b390e1f8e2a2dae065ea79a517bd86bb4ea291cb71528705d04c3cc63db\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IModuleManager {\\n    enum Operation {Call, DelegateCall}\\n\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Operation operation\\n    ) external returns (bool success);\\n\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n}\",\"keccak256\":\"0xe96ade39085920b5c3809665b30e62b6124aab685a8e9c0f155d6f70bf6d7526\",\"license\":\"MIT\"},\"contracts/libraries/StorageAPI.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.16;\\n\\nlibrary StorageAPI {\\n    function setBytes(bytes32 key, bytes memory data) internal {\\n        bytes32 slot = keccak256(abi.encodePacked(key));\\n        assembly {\\n            let length := mload(data)\\n            switch gt(length, 0x1F)\\n            case 0x00 {\\n                sstore(key, or(mload(add(data, 0x20)), mul(length, 2)))\\n            }\\n            case 0x01 {\\n                sstore(key, add(mul(length, 2), 1))\\n                for {\\n                    let i := 0\\n                } lt(mul(i, 0x20), length) {\\n                    i := add(i, 0x01)\\n                } {\\n                    sstore(add(slot, i), mload(add(data, mul(add(i, 1), 0x20))))\\n                }\\n            }\\n        }\\n    }\\n\\n    function setBytes32(bytes32 key, bytes32 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setAddress(bytes32 key, address a) internal {\\n        assembly {\\n            sstore(key, a)\\n        }\\n    }\\n\\n    function setUint256(bytes32 key, uint256 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setInt256(bytes32 key, int256 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setBool(bytes32 key, bool val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function getBytes(bytes32 key) internal view returns (bytes memory data) {\\n        bytes32 slot = keccak256(abi.encodePacked(key));\\n        assembly {\\n            let length := sload(key)\\n            switch and(length, 0x01)\\n            case 0x00 {\\n                let decodedLength := div(and(length, 0xFF), 2)\\n                mstore(data, decodedLength)\\n                mstore(add(data, 0x20), and(length, not(0xFF)))\\n                mstore(0x40, add(data, 0x40))\\n            }\\n            case 0x01 {\\n                let decodedLength := div(length, 2)\\n                let i := 0\\n                mstore(data, decodedLength)\\n                for {\\n\\n                } lt(mul(i, 0x20), decodedLength) {\\n                    i := add(i, 0x01)\\n                } {\\n                    mstore(add(add(data, 0x20), mul(i, 0x20)), sload(add(slot, i)))\\n                }\\n                mstore(0x40, add(data, add(0x20, mul(i, 0x20))))\\n            }\\n        }\\n    }\\n\\n    function getBytes32(bytes32 key) internal view returns (bytes32 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getAddress(bytes32 key) internal view returns (address a) {\\n        assembly {\\n            a := sload(key)\\n        }\\n    }\\n\\n    function getUint256(bytes32 key) internal view returns (uint256 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getInt256(bytes32 key) internal view returns (int256 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getBool(bytes32 key) internal view returns (bool val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x78e99bac7eb0e62568a67c1dfd3f4d14b9c8be7e866d4205de91f01305e557a8\",\"license\":\"GPL-3.0-only\"},\"contracts/wallet/ERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../interfaces/IERC1271.sol\\\";\\n\\nabstract contract ERC1271 is IERC1271 {\\n    using ECDSA for bytes32;\\n\\n    bytes4 internal constant MAGICVALUE_BYTES = 0x20c13b0b;\\n    bytes4 internal constant MAGICVALUE_BYTES32 = 0x1626ba7e;\\n    bytes4 internal constant INVALID_SIGNATURE = 0xffffffff;\\n\\n    // @notice Checks for a valid signature\\n    // @param hash A bytes32 hash of a message\\n    // @param signature The signed hash of the message\\n    function isValidSignature(bytes32 hash, bytes memory signature) public view override returns (bytes4 magicValue) {\\n        address signer = hash.recover(signature);\\n        magicValue = _checkSigner(signer) ? MAGICVALUE_BYTES32 : INVALID_SIGNATURE;\\n    }\\n\\n    // @notice Checks for a valid signature\\n    // @param message The message that has been signed\\n    // @param signature The signed hash of the message\\n    function isValidSignature(\\n        bytes memory message,\\n        bytes memory signature\\n    ) public view override returns (bytes4 magicValue) {\\n        address signer = ECDSA.toEthSignedMessageHash(message).recover(signature);\\n        magicValue = _checkSigner(signer) ? MAGICVALUE_BYTES : INVALID_SIGNATURE;\\n    }\\n\\n    // @notice Confirm signer is permitted to sign on behalf of contract\\n    // @dev Abstract function to implemented by importing contract\\n    // @param signer The address of the message signer\\n    // @return Bool confirming whether signer is permitted\\n    function _checkSigner(address signer) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xd0722988b75fec9a43b0852e9079d96f38ec90624c105f436a9eac7638093e63\",\"license\":\"GPL-3.0-only\"},\"contracts/wallet/MinimalWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"../access/ACL.sol\\\";\\nimport \\\"../access/Roles.sol\\\";\\n\\ncontract MinimalWallet is ACL, Roles, ERC721Holder, ERC1155Holder {\\n    using SafeERC20 for IERC20;\\n\\n    enum Protocol {\\n        ETH,\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    struct TransferNote {\\n        Protocol protocol;\\n        address token;\\n        uint256[] ids;\\n        uint256[] amounts;\\n    }\\n\\n    struct ApprovalNote {\\n        Protocol protocol;\\n        address token;\\n        address[] operators;\\n    }\\n\\n    error WithdrawFailed();\\n    error InvalidArrayLength();\\n\\n    ////////////////////////////////////////////////////\\n    // External functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    // @notice Withdraw an array of assets\\n    // @dev Works for ETH, ERC20s, ERC721s, and ERC1155s\\n    // @param notes A tuple that contains the protocol id, token address, array of ids and amounts\\n    function withdraw(TransferNote[] calldata notes) external isPermitted(OWNER_ROLE) {\\n        TransferNote memory note;\\n        Protocol protocol;\\n        uint256[] memory ids;\\n        uint256[] memory amounts;\\n\\n        uint256 length = notes.length;\\n        for (uint256 i; i < length; ) {\\n            note = notes[i];\\n            protocol = note.protocol;\\n            if (protocol == Protocol.ETH) {\\n                amounts = note.amounts;\\n                if (amounts.length != 1) revert InvalidArrayLength();\\n                _withdrawETH(amounts[0]);\\n            } else if (protocol == Protocol.ERC20) {\\n                amounts = note.amounts;\\n                if (amounts.length != 1) revert InvalidArrayLength();\\n                _withdrawERC20(IERC20(note.token), amounts[0]);\\n            } else if (protocol == Protocol.ERC721) {\\n                ids = note.ids;\\n                _withdrawERC721s(IERC721(note.token), ids);\\n            } else if (protocol == Protocol.ERC1155) {\\n                ids = note.ids;\\n                amounts = note.amounts;\\n                _withdrawERC1155s(IERC1155(note.token), ids, amounts);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // @notice Withdraw ETH from this contract to the msg.sender\\n    // @param amount The amount of ETH to be withdrawn\\n    function withdrawETH(uint256 amount) external isPermitted(OWNER_ROLE) {\\n        _withdrawETH(amount);\\n    }\\n\\n    // @notice Withdraw ERC20s\\n    // @param erc20s An array of erc20 addresses\\n    // @param amounts An array of amounts for each erc20\\n    function withdrawERC20s(\\n        IERC20[] calldata erc20s,\\n        uint256[] calldata amounts\\n    ) external isPermitted(OWNER_ROLE) {\\n        uint256 length = erc20s.length;\\n        if (amounts.length != length) revert InvalidArrayLength();\\n        for (uint256 i; i < length; ) {\\n            _withdrawERC20(erc20s[i], amounts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // @notice Withdraw multiple ERC721 ids for a single ERC721 contract\\n    // @param erc721 The address of the ERC721 contract\\n    // @param ids An array of ids that are to be withdrawn\\n    function withdrawERC721s(\\n        IERC721 erc721,\\n        uint256[] calldata ids\\n    ) external isPermitted(OWNER_ROLE) {\\n        _withdrawERC721s(erc721, ids);\\n    }\\n\\n    // @notice Withdraw multiple ERC1155 ids for a single ERC1155 contract\\n    // @param erc1155 The address of the ERC155 contract\\n    // @param ids An array of ids that are to be withdrawn\\n    // @param amounts An array of amounts per id\\n    function withdrawERC1155s(\\n        IERC1155 erc1155,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external isPermitted(OWNER_ROLE) {\\n        _withdrawERC1155s(erc1155, ids, amounts);\\n    }\\n\\n    // @notice Revoke approval on an array of assets and operators\\n    // @dev Works for ERC20s, ERC721s, and ERC1155s\\n    // @param notes A tuple that contains the protocol id, token address, and array of operators\\n    function revokeApprovals(ApprovalNote[] calldata notes) external isPermitted(OWNER_ROLE) {\\n        ApprovalNote memory note;\\n        Protocol protocol;\\n\\n        uint256 length = notes.length;\\n        for (uint256 i; i < length; ) {\\n            note = notes[i];\\n            protocol = note.protocol;\\n            if (protocol == Protocol.ERC20) {\\n                _revokeERC20Approvals(IERC20(note.token), note.operators);\\n            } else if (protocol == Protocol.ERC721) {\\n                _revokeERC721Approvals(IERC721(note.token), note.operators);\\n            } else if (protocol == Protocol.ERC1155) {\\n                _revokeERC1155Approvals(IERC1155(note.token), note.operators);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // @notice Revoke approval of an ERC20 for an array of operators\\n    // @param erc20 The address of the ERC20 token\\n    // @param operators The array of operators to have approval revoked\\n    function revokeERC20Approvals(\\n        IERC20 erc20,\\n        address[] calldata operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC20Approvals(erc20, operators);\\n    }\\n\\n    // @notice Revoke approval of an ERC721 for an array of operators\\n    // @param erc721 The address of the ERC721 token\\n    // @param operators The array of operators to have approval revoked\\n    function revokeERC721Approvals(\\n        IERC721 erc721,\\n        address[] calldata operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC721Approvals(erc721, operators);\\n    }\\n\\n    // @notice Revoke approval of an ERC1155 for an array of operators\\n    // @param erc1155 The address of the ERC1155 token\\n    // @param operators The array of operators to have approval revoked\\n    function revokeERC1155Approvals(\\n        IERC1155 erc1155,\\n        address[] calldata operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC1155Approvals(erc1155, operators);\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    // Internal functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    function _withdrawETH(uint256 amount) internal {\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        if (!success) revert WithdrawFailed();\\n    }\\n\\n    function _withdrawERC20(IERC20 erc20, uint256 amount) internal {\\n        erc20.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function _withdrawERC721s(IERC721 erc721, uint256[] memory ids) internal {\\n        uint256 length = ids.length;\\n        for (uint256 i; i < length; ) {\\n            erc721.safeTransferFrom(address(this), msg.sender, ids[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _withdrawERC1155s(IERC1155 erc1155, uint256[] memory ids, uint256[] memory amounts) internal {\\n        // safeBatchTransferFrom will validate the array lengths\\n        erc1155.safeBatchTransferFrom(address(this), msg.sender, ids, amounts, \\\"\\\");\\n    }\\n\\n    function _revokeERC20Approvals(IERC20 erc20, address[] memory operators) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc20.safeApprove(operators[i], 0);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _revokeERC721Approvals(IERC721 erc721, address[] memory operators) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc721.setApprovalForAll(operators[i], false);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _revokeERC1155Approvals(IERC1155 erc1155, address[] memory operators) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc1155.setApprovalForAll(operators[i], false);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    // Fallback functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x6536a201c06bae58bce6044fb28cef29c88780578dd0bf5b40eba97da8fea228\",\"license\":\"GPL-3.0-only\"},\"contracts/wallet/ModuleManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nimport \\\"../interfaces/IModuleManager.sol\\\";\\nimport \\\"../access/ACL.sol\\\";\\nimport \\\"../access/Roles.sol\\\";\\n\\nabstract contract ModuleManager is IModuleManager, ACL, Roles {\\n\\n    error NoDelegateCalls();\\n\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Operation operation\\n    ) public virtual isPermitted(MODULE_ROLE) returns (bool success) {\\n        if (operation != Operation.Call) revert NoDelegateCalls();\\n        success = _executeCall(to, value, data);\\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\\n        else emit ExecutionFromModuleFailure(msg.sender);\\n    }\\n\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations and return data\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Operation operation\\n    ) public returns (bool success, bytes memory returnData) {\\n        success = execTransactionFromModule(to, value, data, operation);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Load free memory location\\n            let ptr := mload(0x40)\\n            // We allocate memory for the return data by setting the free memory location to\\n            // current free memory location + data size + 32 bytes for data size value\\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\\n            // Store the size\\n            mstore(ptr, returndatasize())\\n            // Store the data\\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\\n            // Point the return data to the correct memory location\\n            returnData := ptr\\n        }\\n    }\\n\\n    function _executeCall(\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) internal virtual returns (bool success);\\n}\",\"keccak256\":\"0x1f34636aab6d49fabe7a5a78cce95a5c3a8527a48bef992ee213721d4daa3512\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080806040523461003b576000197f8ace5aef1887be9219d1b04dbcfb5676ed5a12ec4a1129de5781d4d7ea71c9ed55613a6f90816100418239f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a71461020f57806307bd0265146102065780630fe786e1146101fd578063150b7a02146101f45780631626ba7e146101eb57806320c13b0b146101e257806331b455a5146101d9578063468721a7146101d05780635229073f146101c757806356255c53146101be578063599e4c70146101b557806360d6c7cf146101ac5780638a2685a9146101a35780638fd8d1bb1461019a578063a4508b1f14610191578063a6b520c014610188578063b61d27f61461017f578063bc197c8114610176578063dedd65241461016d578063e1084a1314610164578063e58378bb1461015b578063e5cb370314610152578063f14210a614610149578063f23a6e61146101405763f4adeb750361000e5761013b6117bc565b61000e565b5061013b61172b565b5061013b6116e1565b5061013b6116d2565b5061013b611678565b5061013b611545565b5061013b611384565b5061013b611276565b5061013b611160565b5061013b611106565b5061013b61105e565b5061013b610fc2565b5061013b610e57565b5061013b610e03565b5061013b610ce7565b5061013b610ca7565b5061013b610c04565b5061013b610b77565b5061013b610a8a565b5061013b61079e565b5061013b6106b4565b5061013b610623565b5061013b61041c565b5061013b610373565b50346102cf5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf576004357fffffffff0000000000000000000000000000000000000000000000000000000081168091036102cf57807f4e2312e000000000000000000000000000000000000000000000000000000000602092149081156102a5575b506040519015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150143861029a565b600080fd5b60009103126102cf57565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820191821161033c57565b6103446102df565b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0820191821161033c57565b50346102cf5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5760206040517fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b556120802f8152f35b73ffffffffffffffffffffffffffffffffffffffff8116036102cf57565b9181601f840112156102cf5782359167ffffffffffffffff83116102cf576020808501948460051b0101116102cf57565b50346102cf5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf57600435610458816103cd565b60243567ffffffffffffffff81116102cf576104789036906004016103eb565b61048492919233612b92565b541561049f5761001992610499913691613268565b90613853565b60046040517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161050d57604052565b6105156104c9565b604052565b6040810190811067ffffffffffffffff82111761050d57604052565b6060810190811067ffffffffffffffff82111761050d57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761050d57604052565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff81116105cf575b01160190565b6105d76104c9565b6105c9565b81601f820112156102cf578035906105f382610593565b926106016040519485610552565b828452602083830101116102cf57816000926020809301838601378301015290565b50346102cf5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5761065e6004356103cd565b6106696024356103cd565b60643567ffffffffffffffff81116102cf576106899036906004016105dc565b5060206040517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b50346102cf5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5760243567ffffffffffffffff81116102cf5761071d61071561070d6107229336906004016105dc565b600435612f9e565b919091612e15565b612b92565b54156107765760207f1626ba7e000000000000000000000000000000000000000000000000000000005b7fffffffff0000000000000000000000000000000000000000000000000000000060405191168152f35b60207fffffffff0000000000000000000000000000000000000000000000000000000061074c565b50346102cf5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5767ffffffffffffffff6004358181116102cf576107ef9036906004016105dc565b906024359081116102cf576108089036906004016105dc565b815191826000937a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015610a7c575b506d04ee2d6d415b85acef810000000080831015610a6d575b50662386f26fc1000080831015610a5e575b506305f5e10080831015610a4f575b5061271080831015610a40575b506064821015610a30575b600a80921015610a26575b6001908160216108a2828901611f17565b97880101905b6109c5575b505050509061093b9261090261092e610936946040519283916108fc60208401966108fc88601a907f19457468657265756d205369676e6564204d6573736167653a0a00000000000081520190565b90613089565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610552565b519020612dc6565b61307c565b1561099c576109987f20c13b0b000000000000000000000000000000000000000000000000000000005b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681529081906020820190565b0390f35b6109987fffffffff00000000000000000000000000000000000000000000000000000000610965565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff849101917f30313233343536373839616263646566000000000000000000000000000000008282061a835304918215610a21579190826108a8565b6108ad565b9360010193610891565b9390606460029104910193610886565b6004919592049101933861087b565b6008919592049101933861086e565b6010919592049101933861085f565b6020919592049101933861084d565b604095508104915038610834565b50346102cf5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf57600435610ac6816103cd565b60243567ffffffffffffffff81116102cf57610ae69036906004016103eb565b610af292919233612b92565b541561049f5761001992610b07913691613268565b906137ae565b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126102cf57600435610b43816103cd565b91602435916044359067ffffffffffffffff82116102cf57610b67916004016105dc565b9060643560028110156102cf5790565b50346102cf576020610b94610b8b36610b0d565b9291909161391d565b6040519015158152f35b60005b838110610bb15750506000910152565b8181015183820152602001610ba1565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610bfd81518092818752878088019101610b9e565b0116010190565b50346102cf57610c16610b8b36610b0d565b6040519060203d8301016040523d82523d6000602084013e61099860405192839215158352604060208401526040830190610bc1565b9060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126102cf57600435610c83816103cd565b916024359067ffffffffffffffff82116102cf57610ca3916004016103eb565b9091565b50346102cf57610cb636610c4c565b610cc292919233612b92565b541561049f5761001992610cd791369161120a565b906135de565b801515036102cf57565b50346102cf5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf57600435602435610d26816103cd565b60443590610d3382610cdd565b610d3c33612b92565b541561049f5773ffffffffffffffffffffffffffffffffffffffff81168015610dd9577f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b84149081610dcf575b5080610dc7575b610d9d5761001992612d6a565b60046040517f337b9b30000000000000000000000000000000000000000000000000000000008152fd5b508115610d90565b9050331438610d89565b60046040517f6d187b28000000000000000000000000000000000000000000000000000000008152fd5b50346102cf5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf576020610e4c602435610e44816103cd565b600435612c3e565b546040519015158152f35b50346102cf5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5767ffffffffffffffff6004358181116102cf57610ea89036906004016103eb565b90916024359081116102cf57610ec29036906004016103eb565b90610ecc33612b92565b541561049f57828203610f185760005b838110610ee557005b80610f12610ef6600193878961194f565b35610f00816103cd565b610f0b83878761194f565b359061338d565b01610edc565b60046040517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610f765750505050505090565b9091929394958480610fb2837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a51610bc1565b9801930193019194939290610f66565b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5767ffffffffffffffff6024358181116102cf5761100e9036906004016103eb565b90916044359081116102cf576110289036906004016103eb565b92909161103433612beb565b541561049f5761104c611052936109989536916118af565b91611ae4565b60405191829182610f42565b50346102cf5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5760043561109a816103cd565b67ffffffffffffffff906024358281116102cf576110bc9036906004016103eb565b926044359081116102cf576110d59036906004016103eb565b91906110e033612b92565b541561049f576110f86111009261001996369161120a565b92369161120a565b916136d0565b50346102cf5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5760206040517fc3757b2598fc76eee6f032de6e0c1a33b52273c8afc630e889b8d170f8a26b1a8152f35b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf57600435611197816103cd565b60443567ffffffffffffffff81116102cf576111b79036906004016105dc565b6111c033612beb565b541561049f5760008160209384839451920190602435905af16040519015158152f35b60209067ffffffffffffffff81116111fd575b60051b0190565b6112056104c9565b6111f6565b9291611215826111e3565b916112236040519384610552565b829481845260208094019160051b81019283116102cf57905b8282106112495750505050565b8135815290830190830161123c565b9080601f830112156102cf578160206112739335910161120a565b90565b50346102cf5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf576112b16004356103cd565b6112bc6024356103cd565b67ffffffffffffffff6044358181116102cf576112dd903690600401611258565b506064358181116102cf576112f6903690600401611258565b506084359081116102cf5761130f9036906004016105dc565b506040517fbc197c81000000000000000000000000000000000000000000000000000000008152602090f35b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126102cf576004359067ffffffffffffffff82116102cf57610ca3916004016103eb565b50346102cf576113933661133b565b9061139d33612b92565b541561049f576113ab61309c565b5060005b8281106113b857005b6113cb6113c68285856130e1565b61313c565b908151916113d8836131d0565b6113e1836131d0565b8261142f576060015180519092507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610f1857611429611423600193611967565b51613347565b016113af565b611438836131d0565b6001928084036114a85750606081015192835103610f185760019261149c61149661147d60206114a395015173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b91611967565b519061338d565b611429565b600193506114b5816131d0565b600281036114f05750806114eb61147d602060406114a395015193015173ffffffffffffffffffffffffffffffffffffffff1690565b6135de565b806114fc6003926131d0565b14611508575b50611429565b80604061153f92015161153a61147d6020606085015194015173ffffffffffffffffffffffffffffffffffffffff1690565b6136d0565b38611502565b50346102cf576115543661133b565b9061155e33612b92565b541561049f5761156c6131da565b5060005b82811061157957005b61158c61158782858561321a565b6132c0565b90815191611599836131d0565b6115a2836131d0565b6001928084036115e657508060406115d761147d60206115e095015173ffffffffffffffffffffffffffffffffffffffff1690565b910151906137ae565b01611570565b6115ef816131d0565b60028103611630575080604061162261147d602061162b95015173ffffffffffffffffffffffffffffffffffffffff1690565b91015190613853565b6115e0565b8061163c6003926131d0565b14611648575b506115e0565b80604061162261147d602061167295015173ffffffffffffffffffffffffffffffffffffffff1690565b38611642565b50346102cf5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5760206040517f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b8152f35b50346102cf5761047836610c4c565b50346102cf5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5761171a33612b92565b541561049f57610019600435613347565b50346102cf5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf576117666004356103cd565b6117716024356103cd565b60843567ffffffffffffffff81116102cf576117919036906004016105dc565b5060206040517ff23a6e61000000000000000000000000000000000000000000000000000000008152f35b5060a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf576004356117f3816103cd565b67ffffffffffffffff6064358181116102cf576118149036906004016103eb565b90916084359081116102cf5761182e9036906004016103eb565b90937f8ace5aef1887be9219d1b04dbcfb5676ed5a12ec4a1129de5781d4d7ea71c9ed9081546118855761186f91602435905561186a81612c72565b612cee565b8161187657005b6100199361104c9136916118af565b60046040517fef34ca5c000000000000000000000000000000000000000000000000000000008152fd5b929190926118bc846111e3565b916118ca6040519384610552565b829480845260208094019060051b8301928284116102cf5780915b8483106118f457505050505050565b823567ffffffffffffffff81116102cf57869161191486849386016105dc565b8152019201916118e5565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b919081101561195f5760051b0190565b61120561191f565b602090805115611975570190565b61197d61191f565b0190565b6020918151811015611996575b60051b010190565b61199e61191f565b61198e565b156119aa57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f56616c7565206d757374206265203332206279746573000000000000000000006044820152fd5b602081519101519060208110611a1c575090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060200360031b1b1690565b3d15611a74573d90611a5a82610593565b91611a686040519384610552565b82523d6000602084013e565b606090565b60405190611a868261051a565b600782527f556e6b6e6f776e000000000000000000000000000000000000000000000000006020830152565b73ffffffffffffffffffffffffffffffffffffffff611273949360609383521660208201528160408201520190610bc1565b9060005b818110611af55750505090565b611b0081838561194f565b6040903560d881901c828116159384611ea55760010193611b2285878961194f565b3560205b600384811660018103611cfb5750600092839260209250868316611ce357611b71917fffffffff0000000000000000000000000000000000000000000000000000000089168e611f66565b905b815191018273ffffffffffffffffffffffffffffffffffffffff88165af193611b9a611a49565b94915b859215611c225750505060801615611be857600192917fff00000000000000000000000000000000000000000000000000000000000000611be29260581b1687612a4b565b01611ae8565b90600192957fff00000000000000000000000000000000000000000000000000000000000000611c1c9360581b1690612982565b93611be2565b611c929350869073ffffffffffffffffffffffffffffffffffffffff96611c47611a79565b9460449182815111611ca5575b505050600014611c9657905b519485947fef3dcb2f000000000000000000000000000000000000000000000000000000008652169060048501611ab2565b0390fd5b611c9f9061030f565b90611c60565b6020611cbc6004611cb584612ad0565b9301611a08565b03611c5457611ccd60248301611a08565b14611cd9575b80611c54565b0193508780611cd3565b50607f611cf49160f81c168c611981565b5190611b73565b60028103611d885750600092839260209250868316611d7057611d41917fffffffff0000000000000000000000000000000000000000000000000000000089168e611f66565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165afa93611d69611a49565b9491611b9d565b50607f611d819160f81c168c611981565b5190611d43565b03611e47576000918291607f90611da58d838560f81c1690611981565b51928d611dbf602095611dba878251146119a3565b611a08565b93858a16158714611e2e5750611dd7611e059361030f565b9160081b907fffffffff000000000000000000000000000000000000000000000000000000008b1690611f66565b915b825192019073ffffffffffffffffffffffffffffffffffffffff88165af193611d69611a49565b919050611e40925060f01c168d611981565b5191611e07565b85517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c69642063616c6c74797065000000000000000000000000000000006044820152606490fd5b9379ffffffffffffffffffffffffffffffffffffffffffffffffffff8360281b176006611b26565b60405190610160820182811067ffffffffffffffff821117611efc575b604052600a8252610140366020840137565b611f046104c9565b611eea565b906004820180921161033c57565b90611f2182610593565b611f2e6040519182610552565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611f5c8294610593565b0190602036910137565b600094939285918290611f77611ecd565b9760609281905b8882106120f0575b5050611f94611f9991611f09565b611f17565b97602095868a015260009060248a019482965b898810611fbf5750505050505050505050565b8890818910156120e3575b8c838a1a60808116156120c45760fe81036120365750816120267fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092600195948c5261201583611f09565b61201f8c51610346565b918c612abe565b88510101975b0197019695611fac565b929895919260fd81036120645750916001999185858961205896858b52612591565b5098919790979461202c565b60fc81036120815750916001999185858961205896858b526125e4565b926120bd8782936120ac8b6120a09b9e979b607f60019a168092611981565b5151968794528c611981565b51906120b785611f09565b91612aac565b019761202c565b8392999150926120d9607f6001951689611981565b510151815261202c565b6120eb61191f565b611fca565b90949591602090818710156121a1575b87871a60ff811461218b5760808116156121775760fe81036121595750855115612138575b90600191865101935b0196950190611f7e565b94506001906040516121508161090288858301610f42565b95909150612125565b9261216b9360019893959d8a88612250565b9691939093929b61212e565b6121859060019392876121ae565b9361212e565b509598509195949150611f949050611f99611f86565b6121a961191f565b612100565b6121bf90607f602093941690611981565b5151036121cc5760200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f32206279746573000000000000000000000000000000000000000000000000006064820152fd5b90969594939260fd810361227057509561226a959661233f565b90919293565b60fc810361228457509561226a959661246d565b919650919493929161229991607f1690611981565b515180151580612334575b156122b0570160200191565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f66203332206279746573000000000000000000006064820152fd5b50601f8116156122a4565b92919093946001019360208510156123d5575b6020612363607f83881a1686611981565b51510361237757602061226a96019361246d565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4172726179206c656e677468206d7573742062652033322062797465730000006044820152fd5b6123dd61191f565b612352565b156123e957565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f43616e6e6f74207573652073746174652066726f6d20696e736964652064796e60448201527f616d6963207479706500000000000000000000000000000000000000000000006064820152fd5b6001808501976020968701978201969095600094909392915b808910612511576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f44796e616d6963207479706520776173206e6f742070726f7065726c7920636c60448201527f6f736564000000000000000000000000000000000000000000000000000000006064820152608490fd5b81891a60808116156125775760fb810361253b5750505050506125349083611981565b5293929190565b99849b8b83989985879e9861255a61255f989f97999a60fe14156123e2565b612250565b9b929b9a919a96909a9b975b01950197909291612486565b9061258b8495939a979b92829593856121ae565b9a61256b565b93929190602060016125c9980196818810156125d7575b816125b8607f868b1a1685611981565b5101516024828901015201946125e4565b929391929091602090910190565b6125df61191f565b6125a8565b9395969290916000946125f78884611981565b51936024600180878b019b019b0198830101915b602094858a101561272d57848a1a60808116156127075760fb8103612634575050505050505050565b9b8c60fd889d939598979c94969b999e1460001461267f57509061265f92918d8b52848c8988612591565b929c919b978301909501989101956001915b01930197929193909361260b565b9091929394955060fc81146000146126bd5750916126a7918b9594938d8b52848c89886125e4565b929c919b97830190950198910195600191612671565b9a89878e83949f9e956126fb607f6001989b9a999b16946126f06126e18787611981565b51519687968796879452611981565b518b6120b785611f09565b019d0198010198612671565b95600192949981612721607f8295979a9e999e168a611981565b5101518b520198612671565b50505050505050565b1561273d57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f496e646578206f75742d6f662d626f756e6473000000000000000000000000006044820152fd5b156127a257565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f28737461746963290000000000000000000000000000000000000000000000006064820152fd5b1561282d57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c6529000000000000000000000000000000000000000000006064820152fd5b60209081818403126102cf57805167ffffffffffffffff918282116102cf57019083601f830112156102cf5781516128e8816111e3565b946040926128f884519788610552565b828752858088019360051b860101948286116102cf57868101935b86851061292557505050505050505090565b84518381116102cf5782019084603f830112156102cf57888201519061294a82610593565b61295689519182610552565b828152868984860101116102cf576129778b949385948b8685019101610b9e565b815201940193612913565b91908060f81c60ff8114612a45576080811615612a0d5760fe81036129b75750506112739150602080825183010191016128b1565b6020916129cd610fe092607f8751911610612736565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838501946129fe85875114612826565b5101845260f31c168301015290565b612a41929150607f1690612a2384518310612736565b612a30602082511461279b565b612a3a8285611981565b5282611981565b5090565b50505090565b9060f81c9060ff8214612aa757602091612a8891607f612a758651868101809111612a9f57611f17565b921691612a828383611981565b52611981565b51918051604084018184840160045afa5051910152565b611f946102df565b505050565b916020809185930101920160045afa50565b910160200190829060400160045afa50565b9081517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc808201828111612b85575b9360445b838110612b11575b50505050565b8151811015612b78575b7fff00000000000000000000000000000000000000000000000000000000000000602082840101511615612b5157600101612b03565b9394505090508101908111612b6b575b9038808080612b0b565b612b736102df565b612b61565b612b8061191f565b612b1b565b612b8d6102df565b612aff565b60405173ffffffffffffffffffffffffffffffffffffffff60208201927f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b845216604082015260408152612be581610536565b51902090565b60405173ffffffffffffffffffffffffffffffffffffffff60208201927fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b556120802f845216604082015260408152612be581610536565b9073ffffffffffffffffffffffffffffffffffffffff604051916020830193845216604082015260408152612be581610536565b60607ff7682c7604ab581823c6ee4b22f8283179771e57c8115328f4a698be07430a41916001612ca182612b92565b5573ffffffffffffffffffffffffffffffffffffffff604051917f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b835216602082015260016040820152a1565b60607ff7682c7604ab581823c6ee4b22f8283179771e57c8115328f4a698be07430a41916001612d1d82612beb565b5573ffffffffffffffffffffffffffffffffffffffff604051917fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b556120802f835216602082015260016040820152a1565b7ff7682c7604ab581823c6ee4b22f8283179771e57c8115328f4a698be07430a419273ffffffffffffffffffffffffffffffffffffffff60609382612daf8286612c3e565b5560405193845216602083015215156040820152a1565b6112739161071591612f9e565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60051115612e0d57565b610344612dd3565b612e1e81612e03565b80612e265750565b612e2f81612e03565b60018103612e96576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b612e9f81612e03565b60028103612f06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b80612f12600392612e03565b14612f1957565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b906041815114600014612fc857610ca3916020820151906060604084015193015160001a90612fdf565b5050600090600290565b506040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116130705791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa15613063575b815173ffffffffffffffffffffffffffffffffffffffff81161561305d579190565b50600190565b61306b612fd2565b61303b565b50505050600090600390565b61308590612b92565b5490565b9061197d60209282815194859201610b9e565b604051906080820182811067ffffffffffffffff8211176130d4575b6040526060808360008152600060208201528160408201520152565b6130dc6104c9565b6130b8565b9190811015613122575b60051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81813603018212156102cf570190565b61312a61191f565b6130eb565b359060048210156102cf57565b6080813603126102cf576040519067ffffffffffffffff9060808301828111848210176131c3575b6040526131708161312f565b83526020810135613180816103cd565b602084015260408101358281116102cf5761319e9036908301611258565b604084015260608101359182116102cf576131bb91369101611258565b606082015290565b6131cb6104c9565b613164565b60041115612e0d57565b604051906060820182811067ffffffffffffffff82111761320d575b604052606060408360008152600060208201520152565b6132156104c9565b6131f6565b919081101561325b575b60051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1813603018212156102cf570190565b61326361191f565b613224565b9291613273826111e3565b916132816040519384610552565b829481845260208094019160051b81019283116102cf57905b8282106132a75750505050565b83809183356132b5816103cd565b81520191019061329a565b6060813603126102cf576040519067ffffffffffffffff90606083018281118482101761333a575b6040526132f48161312f565b83526020810135613304816103cd565b602084015260408101359182116102cf570136601f820112156102cf57613332903690602081359101613268565b604082015290565b6133426104c9565b6132e8565b600080809260405190335af161335b611a49565b501561336357565b60046040517f750b219c000000000000000000000000000000000000000000000000000000008152fd5b9061034491604051917fa9059cbb0000000000000000000000000000000000000000000000000000000060208401523360248401526044830152604482526080820182811067ffffffffffffffff8211176133eb575b6040526133f8565b6133f36104c9565b6133e3565b6040516134639173ffffffffffffffffffffffffffffffffffffffff1661341e8261051a565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af161345d611a49565b91613512565b80518061346f57505050565b818391810103126102cf5781015161348681610cdd565b1561348e5750565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b9192901561358d5750815115613526575090565b3b1561352f5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156135a05750805190602001fd5b611c92906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610bc1565b81519060005b8281106135f15750505050565b73ffffffffffffffffffffffffffffffffffffffff8216906136138186611981565b5191803b156102cf5760008091606460019560405194859384927f42842e0e00000000000000000000000000000000000000000000000000000000845230600485015233602485015260448401525af1801561368f575b613676575b50016135e4565b80613683613689926104f9565b806102d4565b3861366f565b613697612fd2565b61366a565b90815180825260208080930193019160005b8281106136bc575050505090565b8351855293810193928101926001016136ae565b73ffffffffffffffffffffffffffffffffffffffff1691823b156102cf5761377692600092836020613745948260405198899788967f2eb2c2d600000000000000000000000000000000000000000000000000000000885230600489015233602489015260a0604489015260a488019061369c565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc938488830301606489015261369c565b85810392830160848701525201925af180156137a1575b6137945750565b80613683610344926104f9565b6137a9612fd2565b61378d565b81519160005b8381106137c15750505050565b8061384d61090261384773ffffffffffffffffffffffffffffffffffffffff6137ec60019688611981565b51166040519283917f095ea7b300000000000000000000000000000000000000000000000000000000602084015260248301602060009193929373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b856133f8565b016137b4565b81519060005b8281106138665750505050565b73ffffffffffffffffffffffffffffffffffffffff908183169161388a8287611981565b5116823b156102cf576040517fa22cb46500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9190911660048201526000602482018190526001938290604490829084905af18015613910575b613901575b5001613859565b61390a906104f9565b386138fa565b613918612fd2565b6138f5565b90604093845160208101907fc3757b2598fc76eee6f032de6e0c1a33b52273c8afc630e889b8d170f8a26b1a8252338782015286815261395c81610536565b5190205415613a065761396e81613a2f565b6139dd5791600092918392602083519301915af19081156139b3577f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb86000339251a290565b7facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd3756000339251a290565b600484517f7ddbd43b000000000000000000000000000000000000000000000000000000008152fd5b600485517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b60021115612e0d5756fea264697066735822122055c1e9d99b334c359a375b3e8deb296d79806faf677b905b37ffc3b209d182d364736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a71461020f57806307bd0265146102065780630fe786e1146101fd578063150b7a02146101f45780631626ba7e146101eb57806320c13b0b146101e257806331b455a5146101d9578063468721a7146101d05780635229073f146101c757806356255c53146101be578063599e4c70146101b557806360d6c7cf146101ac5780638a2685a9146101a35780638fd8d1bb1461019a578063a4508b1f14610191578063a6b520c014610188578063b61d27f61461017f578063bc197c8114610176578063dedd65241461016d578063e1084a1314610164578063e58378bb1461015b578063e5cb370314610152578063f14210a614610149578063f23a6e61146101405763f4adeb750361000e5761013b6117bc565b61000e565b5061013b61172b565b5061013b6116e1565b5061013b6116d2565b5061013b611678565b5061013b611545565b5061013b611384565b5061013b611276565b5061013b611160565b5061013b611106565b5061013b61105e565b5061013b610fc2565b5061013b610e57565b5061013b610e03565b5061013b610ce7565b5061013b610ca7565b5061013b610c04565b5061013b610b77565b5061013b610a8a565b5061013b61079e565b5061013b6106b4565b5061013b610623565b5061013b61041c565b5061013b610373565b50346102cf5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf576004357fffffffff0000000000000000000000000000000000000000000000000000000081168091036102cf57807f4e2312e000000000000000000000000000000000000000000000000000000000602092149081156102a5575b506040519015158152f35b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150143861029a565b600080fd5b60009103126102cf57565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820191821161033c57565b6103446102df565b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0820191821161033c57565b50346102cf5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5760206040517fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b556120802f8152f35b73ffffffffffffffffffffffffffffffffffffffff8116036102cf57565b9181601f840112156102cf5782359167ffffffffffffffff83116102cf576020808501948460051b0101116102cf57565b50346102cf5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf57600435610458816103cd565b60243567ffffffffffffffff81116102cf576104789036906004016103eb565b61048492919233612b92565b541561049f5761001992610499913691613268565b90613853565b60046040517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161050d57604052565b6105156104c9565b604052565b6040810190811067ffffffffffffffff82111761050d57604052565b6060810190811067ffffffffffffffff82111761050d57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761050d57604052565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff81116105cf575b01160190565b6105d76104c9565b6105c9565b81601f820112156102cf578035906105f382610593565b926106016040519485610552565b828452602083830101116102cf57816000926020809301838601378301015290565b50346102cf5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5761065e6004356103cd565b6106696024356103cd565b60643567ffffffffffffffff81116102cf576106899036906004016105dc565b5060206040517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b50346102cf5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5760243567ffffffffffffffff81116102cf5761071d61071561070d6107229336906004016105dc565b600435612f9e565b919091612e15565b612b92565b54156107765760207f1626ba7e000000000000000000000000000000000000000000000000000000005b7fffffffff0000000000000000000000000000000000000000000000000000000060405191168152f35b60207fffffffff0000000000000000000000000000000000000000000000000000000061074c565b50346102cf5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5767ffffffffffffffff6004358181116102cf576107ef9036906004016105dc565b906024359081116102cf576108089036906004016105dc565b815191826000937a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015610a7c575b506d04ee2d6d415b85acef810000000080831015610a6d575b50662386f26fc1000080831015610a5e575b506305f5e10080831015610a4f575b5061271080831015610a40575b506064821015610a30575b600a80921015610a26575b6001908160216108a2828901611f17565b97880101905b6109c5575b505050509061093b9261090261092e610936946040519283916108fc60208401966108fc88601a907f19457468657265756d205369676e6564204d6573736167653a0a00000000000081520190565b90613089565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610552565b519020612dc6565b61307c565b1561099c576109987f20c13b0b000000000000000000000000000000000000000000000000000000005b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681529081906020820190565b0390f35b6109987fffffffff00000000000000000000000000000000000000000000000000000000610965565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff849101917f30313233343536373839616263646566000000000000000000000000000000008282061a835304918215610a21579190826108a8565b6108ad565b9360010193610891565b9390606460029104910193610886565b6004919592049101933861087b565b6008919592049101933861086e565b6010919592049101933861085f565b6020919592049101933861084d565b604095508104915038610834565b50346102cf5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf57600435610ac6816103cd565b60243567ffffffffffffffff81116102cf57610ae69036906004016103eb565b610af292919233612b92565b541561049f5761001992610b07913691613268565b906137ae565b60807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126102cf57600435610b43816103cd565b91602435916044359067ffffffffffffffff82116102cf57610b67916004016105dc565b9060643560028110156102cf5790565b50346102cf576020610b94610b8b36610b0d565b9291909161391d565b6040519015158152f35b60005b838110610bb15750506000910152565b8181015183820152602001610ba1565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610bfd81518092818752878088019101610b9e565b0116010190565b50346102cf57610c16610b8b36610b0d565b6040519060203d8301016040523d82523d6000602084013e61099860405192839215158352604060208401526040830190610bc1565b9060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126102cf57600435610c83816103cd565b916024359067ffffffffffffffff82116102cf57610ca3916004016103eb565b9091565b50346102cf57610cb636610c4c565b610cc292919233612b92565b541561049f5761001992610cd791369161120a565b906135de565b801515036102cf57565b50346102cf5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf57600435602435610d26816103cd565b60443590610d3382610cdd565b610d3c33612b92565b541561049f5773ffffffffffffffffffffffffffffffffffffffff81168015610dd9577f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b84149081610dcf575b5080610dc7575b610d9d5761001992612d6a565b60046040517f337b9b30000000000000000000000000000000000000000000000000000000008152fd5b508115610d90565b9050331438610d89565b60046040517f6d187b28000000000000000000000000000000000000000000000000000000008152fd5b50346102cf5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf576020610e4c602435610e44816103cd565b600435612c3e565b546040519015158152f35b50346102cf5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5767ffffffffffffffff6004358181116102cf57610ea89036906004016103eb565b90916024359081116102cf57610ec29036906004016103eb565b90610ecc33612b92565b541561049f57828203610f185760005b838110610ee557005b80610f12610ef6600193878961194f565b35610f00816103cd565b610f0b83878761194f565b359061338d565b01610edc565b60046040517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610f765750505050505090565b9091929394958480610fb2837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a51610bc1565b9801930193019194939290610f66565b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5767ffffffffffffffff6024358181116102cf5761100e9036906004016103eb565b90916044359081116102cf576110289036906004016103eb565b92909161103433612beb565b541561049f5761104c611052936109989536916118af565b91611ae4565b60405191829182610f42565b50346102cf5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5760043561109a816103cd565b67ffffffffffffffff906024358281116102cf576110bc9036906004016103eb565b926044359081116102cf576110d59036906004016103eb565b91906110e033612b92565b541561049f576110f86111009261001996369161120a565b92369161120a565b916136d0565b50346102cf5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5760206040517fc3757b2598fc76eee6f032de6e0c1a33b52273c8afc630e889b8d170f8a26b1a8152f35b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf57600435611197816103cd565b60443567ffffffffffffffff81116102cf576111b79036906004016105dc565b6111c033612beb565b541561049f5760008160209384839451920190602435905af16040519015158152f35b60209067ffffffffffffffff81116111fd575b60051b0190565b6112056104c9565b6111f6565b9291611215826111e3565b916112236040519384610552565b829481845260208094019160051b81019283116102cf57905b8282106112495750505050565b8135815290830190830161123c565b9080601f830112156102cf578160206112739335910161120a565b90565b50346102cf5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf576112b16004356103cd565b6112bc6024356103cd565b67ffffffffffffffff6044358181116102cf576112dd903690600401611258565b506064358181116102cf576112f6903690600401611258565b506084359081116102cf5761130f9036906004016105dc565b506040517fbc197c81000000000000000000000000000000000000000000000000000000008152602090f35b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126102cf576004359067ffffffffffffffff82116102cf57610ca3916004016103eb565b50346102cf576113933661133b565b9061139d33612b92565b541561049f576113ab61309c565b5060005b8281106113b857005b6113cb6113c68285856130e1565b61313c565b908151916113d8836131d0565b6113e1836131d0565b8261142f576060015180519092507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610f1857611429611423600193611967565b51613347565b016113af565b611438836131d0565b6001928084036114a85750606081015192835103610f185760019261149c61149661147d60206114a395015173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b91611967565b519061338d565b611429565b600193506114b5816131d0565b600281036114f05750806114eb61147d602060406114a395015193015173ffffffffffffffffffffffffffffffffffffffff1690565b6135de565b806114fc6003926131d0565b14611508575b50611429565b80604061153f92015161153a61147d6020606085015194015173ffffffffffffffffffffffffffffffffffffffff1690565b6136d0565b38611502565b50346102cf576115543661133b565b9061155e33612b92565b541561049f5761156c6131da565b5060005b82811061157957005b61158c61158782858561321a565b6132c0565b90815191611599836131d0565b6115a2836131d0565b6001928084036115e657508060406115d761147d60206115e095015173ffffffffffffffffffffffffffffffffffffffff1690565b910151906137ae565b01611570565b6115ef816131d0565b60028103611630575080604061162261147d602061162b95015173ffffffffffffffffffffffffffffffffffffffff1690565b91015190613853565b6115e0565b8061163c6003926131d0565b14611648575b506115e0565b80604061162261147d602061167295015173ffffffffffffffffffffffffffffffffffffffff1690565b38611642565b50346102cf5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5760206040517f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b8152f35b50346102cf5761047836610c4c565b50346102cf5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf5761171a33612b92565b541561049f57610019600435613347565b50346102cf5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf576117666004356103cd565b6117716024356103cd565b60843567ffffffffffffffff81116102cf576117919036906004016105dc565b5060206040517ff23a6e61000000000000000000000000000000000000000000000000000000008152f35b5060a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102cf576004356117f3816103cd565b67ffffffffffffffff6064358181116102cf576118149036906004016103eb565b90916084359081116102cf5761182e9036906004016103eb565b90937f8ace5aef1887be9219d1b04dbcfb5676ed5a12ec4a1129de5781d4d7ea71c9ed9081546118855761186f91602435905561186a81612c72565b612cee565b8161187657005b6100199361104c9136916118af565b60046040517fef34ca5c000000000000000000000000000000000000000000000000000000008152fd5b929190926118bc846111e3565b916118ca6040519384610552565b829480845260208094019060051b8301928284116102cf5780915b8483106118f457505050505050565b823567ffffffffffffffff81116102cf57869161191486849386016105dc565b8152019201916118e5565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b919081101561195f5760051b0190565b61120561191f565b602090805115611975570190565b61197d61191f565b0190565b6020918151811015611996575b60051b010190565b61199e61191f565b61198e565b156119aa57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f56616c7565206d757374206265203332206279746573000000000000000000006044820152fd5b602081519101519060208110611a1c575090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060200360031b1b1690565b3d15611a74573d90611a5a82610593565b91611a686040519384610552565b82523d6000602084013e565b606090565b60405190611a868261051a565b600782527f556e6b6e6f776e000000000000000000000000000000000000000000000000006020830152565b73ffffffffffffffffffffffffffffffffffffffff611273949360609383521660208201528160408201520190610bc1565b9060005b818110611af55750505090565b611b0081838561194f565b6040903560d881901c828116159384611ea55760010193611b2285878961194f565b3560205b600384811660018103611cfb5750600092839260209250868316611ce357611b71917fffffffff0000000000000000000000000000000000000000000000000000000089168e611f66565b905b815191018273ffffffffffffffffffffffffffffffffffffffff88165af193611b9a611a49565b94915b859215611c225750505060801615611be857600192917fff00000000000000000000000000000000000000000000000000000000000000611be29260581b1687612a4b565b01611ae8565b90600192957fff00000000000000000000000000000000000000000000000000000000000000611c1c9360581b1690612982565b93611be2565b611c929350869073ffffffffffffffffffffffffffffffffffffffff96611c47611a79565b9460449182815111611ca5575b505050600014611c9657905b519485947fef3dcb2f000000000000000000000000000000000000000000000000000000008652169060048501611ab2565b0390fd5b611c9f9061030f565b90611c60565b6020611cbc6004611cb584612ad0565b9301611a08565b03611c5457611ccd60248301611a08565b14611cd9575b80611c54565b0193508780611cd3565b50607f611cf49160f81c168c611981565b5190611b73565b60028103611d885750600092839260209250868316611d7057611d41917fffffffff0000000000000000000000000000000000000000000000000000000089168e611f66565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165afa93611d69611a49565b9491611b9d565b50607f611d819160f81c168c611981565b5190611d43565b03611e47576000918291607f90611da58d838560f81c1690611981565b51928d611dbf602095611dba878251146119a3565b611a08565b93858a16158714611e2e5750611dd7611e059361030f565b9160081b907fffffffff000000000000000000000000000000000000000000000000000000008b1690611f66565b915b825192019073ffffffffffffffffffffffffffffffffffffffff88165af193611d69611a49565b919050611e40925060f01c168d611981565b5191611e07565b85517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c69642063616c6c74797065000000000000000000000000000000006044820152606490fd5b9379ffffffffffffffffffffffffffffffffffffffffffffffffffff8360281b176006611b26565b60405190610160820182811067ffffffffffffffff821117611efc575b604052600a8252610140366020840137565b611f046104c9565b611eea565b906004820180921161033c57565b90611f2182610593565b611f2e6040519182610552565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611f5c8294610593565b0190602036910137565b600094939285918290611f77611ecd565b9760609281905b8882106120f0575b5050611f94611f9991611f09565b611f17565b97602095868a015260009060248a019482965b898810611fbf5750505050505050505050565b8890818910156120e3575b8c838a1a60808116156120c45760fe81036120365750816120267fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092600195948c5261201583611f09565b61201f8c51610346565b918c612abe565b88510101975b0197019695611fac565b929895919260fd81036120645750916001999185858961205896858b52612591565b5098919790979461202c565b60fc81036120815750916001999185858961205896858b526125e4565b926120bd8782936120ac8b6120a09b9e979b607f60019a168092611981565b5151968794528c611981565b51906120b785611f09565b91612aac565b019761202c565b8392999150926120d9607f6001951689611981565b510151815261202c565b6120eb61191f565b611fca565b90949591602090818710156121a1575b87871a60ff811461218b5760808116156121775760fe81036121595750855115612138575b90600191865101935b0196950190611f7e565b94506001906040516121508161090288858301610f42565b95909150612125565b9261216b9360019893959d8a88612250565b9691939093929b61212e565b6121859060019392876121ae565b9361212e565b509598509195949150611f949050611f99611f86565b6121a961191f565b612100565b6121bf90607f602093941690611981565b5151036121cc5760200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f32206279746573000000000000000000000000000000000000000000000000006064820152fd5b90969594939260fd810361227057509561226a959661233f565b90919293565b60fc810361228457509561226a959661246d565b919650919493929161229991607f1690611981565b515180151580612334575b156122b0570160200191565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f66203332206279746573000000000000000000006064820152fd5b50601f8116156122a4565b92919093946001019360208510156123d5575b6020612363607f83881a1686611981565b51510361237757602061226a96019361246d565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4172726179206c656e677468206d7573742062652033322062797465730000006044820152fd5b6123dd61191f565b612352565b156123e957565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f43616e6e6f74207573652073746174652066726f6d20696e736964652064796e60448201527f616d6963207479706500000000000000000000000000000000000000000000006064820152fd5b6001808501976020968701978201969095600094909392915b808910612511576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f44796e616d6963207479706520776173206e6f742070726f7065726c7920636c60448201527f6f736564000000000000000000000000000000000000000000000000000000006064820152608490fd5b81891a60808116156125775760fb810361253b5750505050506125349083611981565b5293929190565b99849b8b83989985879e9861255a61255f989f97999a60fe14156123e2565b612250565b9b929b9a919a96909a9b975b01950197909291612486565b9061258b8495939a979b92829593856121ae565b9a61256b565b93929190602060016125c9980196818810156125d7575b816125b8607f868b1a1685611981565b5101516024828901015201946125e4565b929391929091602090910190565b6125df61191f565b6125a8565b9395969290916000946125f78884611981565b51936024600180878b019b019b0198830101915b602094858a101561272d57848a1a60808116156127075760fb8103612634575050505050505050565b9b8c60fd889d939598979c94969b999e1460001461267f57509061265f92918d8b52848c8988612591565b929c919b978301909501989101956001915b01930197929193909361260b565b9091929394955060fc81146000146126bd5750916126a7918b9594938d8b52848c89886125e4565b929c919b97830190950198910195600191612671565b9a89878e83949f9e956126fb607f6001989b9a999b16946126f06126e18787611981565b51519687968796879452611981565b518b6120b785611f09565b019d0198010198612671565b95600192949981612721607f8295979a9e999e168a611981565b5101518b520198612671565b50505050505050565b1561273d57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f496e646578206f75742d6f662d626f756e6473000000000000000000000000006044820152fd5b156127a257565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f28737461746963290000000000000000000000000000000000000000000000006064820152fd5b1561282d57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c6529000000000000000000000000000000000000000000006064820152fd5b60209081818403126102cf57805167ffffffffffffffff918282116102cf57019083601f830112156102cf5781516128e8816111e3565b946040926128f884519788610552565b828752858088019360051b860101948286116102cf57868101935b86851061292557505050505050505090565b84518381116102cf5782019084603f830112156102cf57888201519061294a82610593565b61295689519182610552565b828152868984860101116102cf576129778b949385948b8685019101610b9e565b815201940193612913565b91908060f81c60ff8114612a45576080811615612a0d5760fe81036129b75750506112739150602080825183010191016128b1565b6020916129cd610fe092607f8751911610612736565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838501946129fe85875114612826565b5101845260f31c168301015290565b612a41929150607f1690612a2384518310612736565b612a30602082511461279b565b612a3a8285611981565b5282611981565b5090565b50505090565b9060f81c9060ff8214612aa757602091612a8891607f612a758651868101809111612a9f57611f17565b921691612a828383611981565b52611981565b51918051604084018184840160045afa5051910152565b611f946102df565b505050565b916020809185930101920160045afa50565b910160200190829060400160045afa50565b9081517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc808201828111612b85575b9360445b838110612b11575b50505050565b8151811015612b78575b7fff00000000000000000000000000000000000000000000000000000000000000602082840101511615612b5157600101612b03565b9394505090508101908111612b6b575b9038808080612b0b565b612b736102df565b612b61565b612b8061191f565b612b1b565b612b8d6102df565b612aff565b60405173ffffffffffffffffffffffffffffffffffffffff60208201927f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b845216604082015260408152612be581610536565b51902090565b60405173ffffffffffffffffffffffffffffffffffffffff60208201927fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b556120802f845216604082015260408152612be581610536565b9073ffffffffffffffffffffffffffffffffffffffff604051916020830193845216604082015260408152612be581610536565b60607ff7682c7604ab581823c6ee4b22f8283179771e57c8115328f4a698be07430a41916001612ca182612b92565b5573ffffffffffffffffffffffffffffffffffffffff604051917f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b835216602082015260016040820152a1565b60607ff7682c7604ab581823c6ee4b22f8283179771e57c8115328f4a698be07430a41916001612d1d82612beb565b5573ffffffffffffffffffffffffffffffffffffffff604051917fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b556120802f835216602082015260016040820152a1565b7ff7682c7604ab581823c6ee4b22f8283179771e57c8115328f4a698be07430a419273ffffffffffffffffffffffffffffffffffffffff60609382612daf8286612c3e565b5560405193845216602083015215156040820152a1565b6112739161071591612f9e565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60051115612e0d57565b610344612dd3565b612e1e81612e03565b80612e265750565b612e2f81612e03565b60018103612e96576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b612e9f81612e03565b60028103612f06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b80612f12600392612e03565b14612f1957565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b906041815114600014612fc857610ca3916020820151906060604084015193015160001a90612fdf565b5050600090600290565b506040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116130705791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa15613063575b815173ffffffffffffffffffffffffffffffffffffffff81161561305d579190565b50600190565b61306b612fd2565b61303b565b50505050600090600390565b61308590612b92565b5490565b9061197d60209282815194859201610b9e565b604051906080820182811067ffffffffffffffff8211176130d4575b6040526060808360008152600060208201528160408201520152565b6130dc6104c9565b6130b8565b9190811015613122575b60051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81813603018212156102cf570190565b61312a61191f565b6130eb565b359060048210156102cf57565b6080813603126102cf576040519067ffffffffffffffff9060808301828111848210176131c3575b6040526131708161312f565b83526020810135613180816103cd565b602084015260408101358281116102cf5761319e9036908301611258565b604084015260608101359182116102cf576131bb91369101611258565b606082015290565b6131cb6104c9565b613164565b60041115612e0d57565b604051906060820182811067ffffffffffffffff82111761320d575b604052606060408360008152600060208201520152565b6132156104c9565b6131f6565b919081101561325b575b60051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1813603018212156102cf570190565b61326361191f565b613224565b9291613273826111e3565b916132816040519384610552565b829481845260208094019160051b81019283116102cf57905b8282106132a75750505050565b83809183356132b5816103cd565b81520191019061329a565b6060813603126102cf576040519067ffffffffffffffff90606083018281118482101761333a575b6040526132f48161312f565b83526020810135613304816103cd565b602084015260408101359182116102cf570136601f820112156102cf57613332903690602081359101613268565b604082015290565b6133426104c9565b6132e8565b600080809260405190335af161335b611a49565b501561336357565b60046040517f750b219c000000000000000000000000000000000000000000000000000000008152fd5b9061034491604051917fa9059cbb0000000000000000000000000000000000000000000000000000000060208401523360248401526044830152604482526080820182811067ffffffffffffffff8211176133eb575b6040526133f8565b6133f36104c9565b6133e3565b6040516134639173ffffffffffffffffffffffffffffffffffffffff1661341e8261051a565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af161345d611a49565b91613512565b80518061346f57505050565b818391810103126102cf5781015161348681610cdd565b1561348e5750565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b9192901561358d5750815115613526575090565b3b1561352f5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156135a05750805190602001fd5b611c92906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610bc1565b81519060005b8281106135f15750505050565b73ffffffffffffffffffffffffffffffffffffffff8216906136138186611981565b5191803b156102cf5760008091606460019560405194859384927f42842e0e00000000000000000000000000000000000000000000000000000000845230600485015233602485015260448401525af1801561368f575b613676575b50016135e4565b80613683613689926104f9565b806102d4565b3861366f565b613697612fd2565b61366a565b90815180825260208080930193019160005b8281106136bc575050505090565b8351855293810193928101926001016136ae565b73ffffffffffffffffffffffffffffffffffffffff1691823b156102cf5761377692600092836020613745948260405198899788967f2eb2c2d600000000000000000000000000000000000000000000000000000000885230600489015233602489015260a0604489015260a488019061369c565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc938488830301606489015261369c565b85810392830160848701525201925af180156137a1575b6137945750565b80613683610344926104f9565b6137a9612fd2565b61378d565b81519160005b8381106137c15750505050565b8061384d61090261384773ffffffffffffffffffffffffffffffffffffffff6137ec60019688611981565b51166040519283917f095ea7b300000000000000000000000000000000000000000000000000000000602084015260248301602060009193929373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b856133f8565b016137b4565b81519060005b8281106138665750505050565b73ffffffffffffffffffffffffffffffffffffffff908183169161388a8287611981565b5116823b156102cf576040517fa22cb46500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9190911660048201526000602482018190526001938290604490829084905af18015613910575b613901575b5001613859565b61390a906104f9565b386138fa565b613918612fd2565b6138f5565b90604093845160208101907fc3757b2598fc76eee6f032de6e0c1a33b52273c8afc630e889b8d170f8a26b1a8252338782015286815261395c81610536565b5190205415613a065761396e81613a2f565b6139dd5791600092918392602083519301915af19081156139b3577f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb86000339251a290565b7facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd3756000339251a290565b600484517f7ddbd43b000000000000000000000000000000000000000000000000000000008152fd5b600485517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b60021115612e0d5756fea264697066735822122055c1e9d99b334c359a375b3e8deb296d79806faf677b905b37ffc3b209d182d364736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "execTransactionFromModule(address,uint256,bytes,uint8)": {
        "details": "Allows a Module to execute a Safe transaction without any further confirmations.",
        "params": {
          "data": "Data payload of module transaction.",
          "operation": "Operation type of module transaction.",
          "to": "Destination address of module transaction.",
          "value": "Ether value of module transaction."
        }
      },
      "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": {
        "details": "Allows a Module to execute a Safe transaction without any further confirmations and return data",
        "params": {
          "data": "Data payload of module transaction.",
          "operation": "Operation type of module transaction.",
          "to": "Destination address of module transaction.",
          "value": "Ether value of module transaction."
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}