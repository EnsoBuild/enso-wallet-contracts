{
  "address": "0xF61034da19318cC8928cdAB49d3c03cacc5EDc3a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "command_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ExecutionFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b5783d6a8ad14a7c676483a6837f8bff1c01cd5eb957f8dff97a79c29b2a398",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "822049",
    "logsBloom": "0x
    "blockHash": "0xfc5a7c10bf6860e0abee6626de30ab25de270ccb84d2639e061160a4f2291f17",
    "transactionHash": "0x5b5783d6a8ad14a7c676483a6837f8bff1c01cd5eb957f8dff97a79c29b2a398",
    "logs": [],
    "blockNumber": 14966080,
    "cumulativeGasUsed": "822049",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ed43a16a2a0bd9ab0fc3630501405d83",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"command_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ExecutionFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnsoVM.sol\":\"EnsoVM\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@ensofinance/weiroll/contracts/CommandBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nlibrary CommandBuilder {\\n\\n    uint256 constant IDX_VARIABLE_LENGTH = 0x80;\\n    uint256 constant IDX_VALUE_MASK = 0x7f;\\n    uint256 constant IDX_END_OF_ARGS = 0xff;\\n    uint256 constant IDX_USE_STATE = 0xfe;\\n\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices\\n    ) internal view returns (bytes memory ret) {\\n        uint256 free; // Pointer to first free byte in tail part of message\\n        uint256 idx;\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i; i < 32;) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n            unchecked{free += 32;}\\n            unchecked{++i;}\\n        }\\n\\n        // Encode it\\n        uint256 bytesWritten;\\n        assembly {\\n            ret := mload(0x40)\\n            bytesWritten := add(bytesWritten, 4)\\n            mstore(0x40, add(ret, and(add(add(bytesWritten, 0x20), 0x1f), not(0x1f))))\\n            mstore(add(ret, 32), selector)\\n        }\\n        uint256 count = 0;\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n        for (uint256 i; i < 32;) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        bytesWritten := add(bytesWritten, 32)\\n                        mstore(0x40, add(ret, and(add(add(bytesWritten, 0x20), 0x1f), not(0x1f))))\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    assembly {\\n                        bytesWritten := add(bytesWritten, mload(stateData))\\n                        mstore(0x40, add(ret, and(add(add(bytesWritten, 0x20), 0x1f), not(0x1f))))\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    free += stateData.length - 32;\\n                } else {\\n                    bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n                    uint256 arglen = stateVar.length;\\n\\n                    // Variable length data; put a pointer in the slot and write the data at the end\\n                    assembly {\\n                        bytesWritten := add(bytesWritten, 32)\\n                        mstore(0x40, add(ret, and(add(add(bytesWritten, 0x20), 0x1f), not(0x1f))))\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    assembly {\\n                        bytesWritten := add(bytesWritten, arglen)\\n                        mstore(0x40, add(ret, and(add(add(bytesWritten, 0x20), 0x1f), not(0x1f))))\\n                    }\\n                    memcpy(\\n                        stateVar,\\n                        0,\\n                        ret,\\n                        free + 4,\\n                        arglen\\n                    );\\n                    free += arglen;\\n                }\\n            } else {\\n                // Fixed length data; write it directly\\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n                assembly {\\n                    bytesWritten := add(bytesWritten, mload(stateVar))\\n                    mstore(0x40, add(ret, and(add(add(bytesWritten, 0x20), 0x1f), not(0x1f))))\\n                    mstore(add(add(ret, 36), count), mload(add(stateVar, 32)))\\n                }\\n            }\\n            unchecked{count += 32;}\\n            unchecked{++i;}\\n        }\\n        assembly {\\n            mstore(ret, bytesWritten)\\n        }\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal pure returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argptr;\\n                assembly {\\n                    argptr := mload(add(output, 32))\\n                }\\n                require(\\n                    argptr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            // Single word\\n            require(\\n                output.length == 32,\\n                \\\"Only one return value permitted (static)\\\"\\n            );\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint256 idx = uint256(uint8(index));\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcidx,\\n        bytes memory dest,\\n        uint256 destidx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcidx),\\n                    len,\\n                    add(add(dest, 32), destidx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b68bb05684562c869f10623e9cd7fee155aa0f24f0069f0e55df710d5784631\",\"license\":\"MIT\"},\"@ensofinance/weiroll/contracts/VM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\nabstract contract VM {\\n    using CommandBuilder for bytes[];\\n\\n    uint256 constant FLAG_CT_DELEGATECALL = 0x00;\\n    uint256 constant FLAG_CT_CALL = 0x01;\\n    uint256 constant FLAG_CT_STATICCALL = 0x02;\\n    uint256 constant FLAG_CT_VALUECALL = 0x03;\\n    uint256 constant FLAG_CT_MASK = 0x03;\\n    uint256 constant FLAG_EXTENDED_COMMAND = 0x40;\\n    uint256 constant FLAG_TUPLE_RETURN = 0x80;\\n\\n    uint256 constant SHORT_COMMAND_FILL = 0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    address immutable self;\\n\\n    error ExecutionFailed(\\n        uint256 command_index,\\n        address target,\\n        string message\\n    );\\n\\n    constructor() {\\n        self = address(this);\\n    }\\n\\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\\n      internal returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outdata;\\n\\n        uint256 commandsLength = commands.length;\\n        for (uint256 i; i < commandsLength;) {\\n            command = commands[i];\\n            flags = uint256(command >> 216) & 0xFF; // more efficient\\n            // flags = uint256(uint8(bytes1(command << 32))); // more readable \\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                indices = commands[++i];\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\\n                (success, outdata) = address(uint160(uint256(command))).delegatecall( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                (success, outdata) = address(uint160(uint256(command))).call( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outdata) = address(uint160(uint256(command))).staticcall( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                uint256 callEth;\\n                bytes memory v = state[uint8(bytes1(indices))];\\n                require(v.length == 32, \\\"_execute: value call has no value indicated.\\\");\\n                assembly {\\n                    callEth := mload(add(v, 0x20))\\n                }\\n                (success, outdata) = address(uint160(uint256(command))).call{ // target\\n                    value: callEth\\n                }(\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        bytes32(uint256(indices << 8) | CommandBuilder.IDX_END_OF_ARGS)\\n                    )\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            if (!success) {\\n                if (outdata.length > 0) {\\n                    assembly {\\n                        outdata := add(outdata, 68)\\n                    }\\n                }\\n                revert ExecutionFailed({\\n                    command_index: 0,\\n                    target: address(uint160(uint256(command))),\\n                    message: outdata.length > 0 ? string(outdata) : \\\"Unknown\\\"\\n                });\\n            }\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outdata);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outdata);\\n            }\\n            unchecked{++i;}\\n        }\\n        return state;\\n    }\\n}\\n\",\"keccak256\":\"0x55430b4e804e771b5ba2e92b61ae36979a050d26675d204066258acb379c7827\",\"license\":\"MIT\"},\"contracts/EnsoVM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport {VM} from \\\"@ensofinance/weiroll/contracts/VM.sol\\\";\\n\\ncontract EnsoVM is VM {\\n    function execute(bytes32[] calldata commands, bytes[] memory state) public returns (bytes[] memory) {\\n        return _execute(commands, state);\\n    }\\n}\\n\",\"keccak256\":\"0x5361ad4293cc58c7ae32cb6d72b8a7282feb2e9e662c2166e72f499e0f869585\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5030608052608051610de761002d60003960005050610de76000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de792d5f14610030575b600080fd5b61004361003e3660046109aa565b610059565b6040516100509190610b56565b60405180910390f35b6060610066848484610070565b90505b9392505050565b606060008080808487825b818110156104c2578a8a8281811061009557610095610bd6565b90506020020135965060d887901c60001c60ff169550604086166000146100e1578a8a6100c183610c02565b9250828181106100d3576100d3610bd6565b905060200201359450610105565b602887901b79ffffffffffffffffffffffffffffffffffffffffffffffffffff1794505b600386166101875773ffffffffffffffffffffffffffffffffffffffff871661012f8a89886104d1565b60405161013c9190610c3b565b600060405180830381855af49150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b606091505b5090945092506103f7565b60016003871614156101ff5773ffffffffffffffffffffffffffffffffffffffff87166101b58a89886104d1565b6040516101c29190610c3b565b6000604051808303816000865af19150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b60026003871614156102755773ffffffffffffffffffffffffffffffffffffffff871661022d8a89886104d1565b60405161023a9190610c3b565b600060405180830381855afa9150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b600380871614156103af576000808a8760f81c60ff168151811061029b5761029b610bd6565b6020026020010151905080516020146103215760405162461bcd60e51b815260206004820152602c60248201527f5f657865637574653a2076616c75652063616c6c20686173206e6f2076616c7560448201527f6520696e646963617465642e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6020810151915073ffffffffffffffffffffffffffffffffffffffff8916826103528d8c60088c901b60ff176104d1565b60405161035f9190610c3b565b60006040518083038185875af1925050503d806000811461039c576040519150601f19603f3d011682016040523d82523d6000602084013e6103a1565b606091505b5090965094506103f7915050565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c69642063616c6c74797065000000000000000000000000000000006044820152606401610318565b8361048b5782511561040a576044830192505b60008760001c6000855111610454576040518060400160405280600781526020017f556e6b6e6f776e00000000000000000000000000000000000000000000000000815250610456565b845b6040517fef3dcb2f00000000000000000000000000000000000000000000000000000000815260040161031893929190610c57565b60808616156104a8576104a389605889901b856106d7565b6104ba565b6104b789605889901b8561077c565b98505b60010161007b565b50969998505050505050505050565b606060008060005b6020811015610514578481602081106104f4576104f4610bd6565b1a915060ff82141561050557610514565b602092909201916001016104d9565b5060408051808201909152602081018690529250600460006060815b60208110156106c85787816020811061054b5761054b610bd6565b1a945060ff85141561055c576106c8565b60808516156106795760fe85141561060957601f19605f850116870160405260248388010186905281516020909401936105b357896040516020016105a19190610b56565b60405160208183030381529060405291505b8151603f9401938401601f191687016040526105ea826020896105d78a6004610c95565b602087516105e59190610cad565b6108fd565b602082516105f89190610cad565b6106029087610c95565b95506106b9565b60008a607f87168151811061062057610620610bd6565b6020908102919091018101518051868b016024018a9052968701605f8101601f19168b01604052909101959091506106668260008b6106608c6004610c95565b856108fd565b6106708189610c95565b975050506106b9565b60008a607f87168151811061069057610690610bd6565b6020908102919091018101518051603f9701968701601f19168a01604052015184890160240152505b60209290920191600101610530565b50505083525090949350505050565b60f882901c60ff8114156106eb5750505050565b6000825160206106fb9190610c95565b67ffffffffffffffff81111561071357610713610917565b6040519080825280601f01601f19166020018201604052801561073d576020820181803683370190505b5085838151811061075057610750610bd6565b60200260200101819052905061076c83600083602087516108fd565b8251806020830152505050505050565b606060f883901c60ff8114156107955784915050610069565b608081161561085b5760fe8114156107c257828060200190518101906107bb9190610cc4565b94506108f4565b60208381015190811461083d5760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c6529000000000000000000000000000000000000000000006064820152608401610318565b508251601f19016020848101918252607f83168102870101526108f4565b82516020146108d25760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f28737461746963290000000000000000000000000000000000000000000000006064820152608401610318565b8285607f8316815181106108e8576108e8610bd6565b60200260200101819052505b50929392505050565b808260208501018286602089010160045afa505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561095657610956610917565b604052919050565b600067ffffffffffffffff82111561097857610978610917565b5060051b60200190565b600067ffffffffffffffff82111561099c5761099c610917565b50601f01601f191660200190565b600080600060408085870312156109c057600080fd5b843567ffffffffffffffff808211156109d857600080fd5b818701915087601f8301126109ec57600080fd5b8135818111156109fb57600080fd5b602089818360051b8601011115610a1157600080fd5b808401975081965080890135935082841115610a2c57600080fd5b838901935089601f850112610a4057600080fd5b83359150610a55610a508361095e565b61092d565b82815260059290921b8401810191818101908b841115610a7457600080fd5b8286015b84811015610ae857803586811115610a905760008081fd5b8701603f81018e13610aa25760008081fd5b84810135610ab2610a5082610982565b8181528f8b838501011115610ac75760008081fd5b818b8401888301376000918101870191909152845250918301918301610a78565b50809750505050505050509250925092565b60005b83811015610b15578181015183820152602001610afd565b83811115610b24576000848401525b50505050565b60008151808452610b42816020860160208601610afa565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bc9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610bb7858351610b2a565b94509285019290850190600101610b7d565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c3457610c34610bec565b5060010190565b60008251610c4d818460208701610afa565b9190910192915050565b83815273ffffffffffffffffffffffffffffffffffffffff83166020820152606060408201526000610c8c6060830184610b2a565b95945050505050565b60008219821115610ca857610ca8610bec565b500190565b600082821015610cbf57610cbf610bec565b500390565b60006020808385031215610cd757600080fd5b825167ffffffffffffffff80821115610cef57600080fd5b818501915085601f830112610d0357600080fd5b8151610d11610a508261095e565b81815260059190911b83018401908481019088831115610d3057600080fd5b8585015b83811015610da457805185811115610d4c5760008081fd5b8601603f81018b13610d5e5760008081fd5b878101516040610d70610a5083610982565b8281528d82848601011115610d855760008081fd5b610d94838c8301848701610afa565b8652505050918601918601610d34565b509897505050505050505056fea2646970667358221220c39b19b9e647b19a1d0f670e78daf21f52c0b67cbb64619470c69a24feb39a2464736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de792d5f14610030575b600080fd5b61004361003e3660046109aa565b610059565b6040516100509190610b56565b60405180910390f35b6060610066848484610070565b90505b9392505050565b606060008080808487825b818110156104c2578a8a8281811061009557610095610bd6565b90506020020135965060d887901c60001c60ff169550604086166000146100e1578a8a6100c183610c02565b9250828181106100d3576100d3610bd6565b905060200201359450610105565b602887901b79ffffffffffffffffffffffffffffffffffffffffffffffffffff1794505b600386166101875773ffffffffffffffffffffffffffffffffffffffff871661012f8a89886104d1565b60405161013c9190610c3b565b600060405180830381855af49150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b606091505b5090945092506103f7565b60016003871614156101ff5773ffffffffffffffffffffffffffffffffffffffff87166101b58a89886104d1565b6040516101c29190610c3b565b6000604051808303816000865af19150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b60026003871614156102755773ffffffffffffffffffffffffffffffffffffffff871661022d8a89886104d1565b60405161023a9190610c3b565b600060405180830381855afa9150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b600380871614156103af576000808a8760f81c60ff168151811061029b5761029b610bd6565b6020026020010151905080516020146103215760405162461bcd60e51b815260206004820152602c60248201527f5f657865637574653a2076616c75652063616c6c20686173206e6f2076616c7560448201527f6520696e646963617465642e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6020810151915073ffffffffffffffffffffffffffffffffffffffff8916826103528d8c60088c901b60ff176104d1565b60405161035f9190610c3b565b60006040518083038185875af1925050503d806000811461039c576040519150601f19603f3d011682016040523d82523d6000602084013e6103a1565b606091505b5090965094506103f7915050565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c69642063616c6c74797065000000000000000000000000000000006044820152606401610318565b8361048b5782511561040a576044830192505b60008760001c6000855111610454576040518060400160405280600781526020017f556e6b6e6f776e00000000000000000000000000000000000000000000000000815250610456565b845b6040517fef3dcb2f00000000000000000000000000000000000000000000000000000000815260040161031893929190610c57565b60808616156104a8576104a389605889901b856106d7565b6104ba565b6104b789605889901b8561077c565b98505b60010161007b565b50969998505050505050505050565b606060008060005b6020811015610514578481602081106104f4576104f4610bd6565b1a915060ff82141561050557610514565b602092909201916001016104d9565b5060408051808201909152602081018690529250600460006060815b60208110156106c85787816020811061054b5761054b610bd6565b1a945060ff85141561055c576106c8565b60808516156106795760fe85141561060957601f19605f850116870160405260248388010186905281516020909401936105b357896040516020016105a19190610b56565b60405160208183030381529060405291505b8151603f9401938401601f191687016040526105ea826020896105d78a6004610c95565b602087516105e59190610cad565b6108fd565b602082516105f89190610cad565b6106029087610c95565b95506106b9565b60008a607f87168151811061062057610620610bd6565b6020908102919091018101518051868b016024018a9052968701605f8101601f19168b01604052909101959091506106668260008b6106608c6004610c95565b856108fd565b6106708189610c95565b975050506106b9565b60008a607f87168151811061069057610690610bd6565b6020908102919091018101518051603f9701968701601f19168a01604052015184890160240152505b60209290920191600101610530565b50505083525090949350505050565b60f882901c60ff8114156106eb5750505050565b6000825160206106fb9190610c95565b67ffffffffffffffff81111561071357610713610917565b6040519080825280601f01601f19166020018201604052801561073d576020820181803683370190505b5085838151811061075057610750610bd6565b60200260200101819052905061076c83600083602087516108fd565b8251806020830152505050505050565b606060f883901c60ff8114156107955784915050610069565b608081161561085b5760fe8114156107c257828060200190518101906107bb9190610cc4565b94506108f4565b60208381015190811461083d5760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c6529000000000000000000000000000000000000000000006064820152608401610318565b508251601f19016020848101918252607f83168102870101526108f4565b82516020146108d25760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f28737461746963290000000000000000000000000000000000000000000000006064820152608401610318565b8285607f8316815181106108e8576108e8610bd6565b60200260200101819052505b50929392505050565b808260208501018286602089010160045afa505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561095657610956610917565b604052919050565b600067ffffffffffffffff82111561097857610978610917565b5060051b60200190565b600067ffffffffffffffff82111561099c5761099c610917565b50601f01601f191660200190565b600080600060408085870312156109c057600080fd5b843567ffffffffffffffff808211156109d857600080fd5b818701915087601f8301126109ec57600080fd5b8135818111156109fb57600080fd5b602089818360051b8601011115610a1157600080fd5b808401975081965080890135935082841115610a2c57600080fd5b838901935089601f850112610a4057600080fd5b83359150610a55610a508361095e565b61092d565b82815260059290921b8401810191818101908b841115610a7457600080fd5b8286015b84811015610ae857803586811115610a905760008081fd5b8701603f81018e13610aa25760008081fd5b84810135610ab2610a5082610982565b8181528f8b838501011115610ac75760008081fd5b818b8401888301376000918101870191909152845250918301918301610a78565b50809750505050505050509250925092565b60005b83811015610b15578181015183820152602001610afd565b83811115610b24576000848401525b50505050565b60008151808452610b42816020860160208601610afa565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bc9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610bb7858351610b2a565b94509285019290850190600101610b7d565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c3457610c34610bec565b5060010190565b60008251610c4d818460208701610afa565b9190910192915050565b83815273ffffffffffffffffffffffffffffffffffffffff83166020820152606060408201526000610c8c6060830184610b2a565b95945050505050565b60008219821115610ca857610ca8610bec565b500190565b600082821015610cbf57610cbf610bec565b500390565b60006020808385031215610cd757600080fd5b825167ffffffffffffffff80821115610cef57600080fd5b818501915085601f830112610d0357600080fd5b8151610d11610a508261095e565b81815260059190911b83018401908481019088831115610d3057600080fd5b8585015b83811015610da457805185811115610d4c5760008081fd5b8601603f81018b13610d5e5760008081fd5b878101516040610d70610a5083610982565b8281528d82848601011115610d855760008081fd5b610d94838c8301848701610afa565b8652505050918601918601610d34565b509897505050505050505056fea2646970667358221220c39b19b9e647b19a1d0f670e78daf21f52c0b67cbb64619470c69a24feb39a2464736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}