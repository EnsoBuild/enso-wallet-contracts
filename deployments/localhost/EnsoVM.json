{
  "address": "0x164D2110Cbd6576D190464c57b3F49355F14BDC2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "command_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ExecutionFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a000eddc6a8d516e7da3392b7d4392e71214cc090f060e59661537cbc9be6f8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "895896",
    "logsBloom": "0x
    "blockHash": "0x275fecc857079594d26466b7851be32ae7b7fbbeb2170053f83c1dfad3f80aa3",
    "transactionHash": "0x0a000eddc6a8d516e7da3392b7d4392e71214cc090f060e59661537cbc9be6f8",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "895896",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d3509825bcc8758690d6137b99e63519",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"command_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ExecutionFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnsoVM.sol\":\"EnsoVM\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@ensofinance/weiroll/contracts/CommandBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nuint256 constant IDX_VARIABLE_LENGTH = 0x80;\\nuint256 constant IDX_VALUE_MASK = 0x7f;\\nuint256 constant IDX_END_OF_ARGS = 0xff;\\nuint256 constant IDX_USE_STATE = 0xfe;\\n\\nlibrary CommandBuilder {\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices\\n    ) internal view returns (bytes memory ret) {\\n        uint256 count; // Number of bytes in whole ABI encoded message\\n        uint256 free; // Pointer to first free byte in tail part of message\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n\\n        uint256 idx;\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i; i < 32; i=_uncheckedIncrement(i)) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    count += stateData.length;\\n                    unchecked{free += 32;}\\n                } else {\\n                    // Add the size of the value, rounded up to the next word boundary, plus space for pointer and length\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n                    require(\\n                        arglen % 32 == 0,\\n                        \\\"Dynamic state variables must be a multiple of 32 bytes\\\"\\n                    );\\n                    count += arglen + 32;\\n                    unchecked{free += 32;}\\n                }\\n            } else {\\n                require(\\n                    state[idx & IDX_VALUE_MASK].length == 32,\\n                    \\\"Static state variables must be 32 bytes\\\"\\n                );\\n                count += 32;\\n                unchecked{free += 32;}\\n            }\\n        }\\n\\n        // Encode it\\n        ret = new bytes(count + 4);\\n        assembly {\\n            mstore(add(ret, 32), selector)\\n        }\\n        count = 0;\\n        for (uint256 i; i < 32; i=_uncheckedIncrement(i)) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    free += stateData.length - 32;\\n                    unchecked{count += 32;}\\n                } else {\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n\\n                    // Variable length data; put a pointer in the slot and write the data at the end\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        free + 4,\\n                        arglen\\n                    );\\n                    free += arglen;\\n                    unchecked{count += 32;}\\n                }\\n            } else {\\n                // Fixed length data; write it directly\\n                bytes memory statevar = state[idx & IDX_VALUE_MASK];\\n                assembly {\\n                    mstore(add(add(ret, 36), count), mload(add(statevar, 32)))\\n                }\\n                unchecked{count += 32;}\\n            }\\n        }\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal pure returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argptr;\\n                assembly {\\n                    argptr := mload(add(output, 32))\\n                }\\n                require(\\n                    argptr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            // Single word\\n            require(\\n                output.length == 32,\\n                \\\"Only one return value permitted (static)\\\"\\n            );\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint256 idx = uint256(uint8(index));\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcidx,\\n        bytes memory dest,\\n        uint256 destidx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcidx),\\n                    len,\\n                    add(add(dest, 32), destidx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n\\n    function _uncheckedIncrement(uint256 i) private pure returns(uint256) {\\n        unchecked {++i;}\\n        return i;\\n    }\\n}\\n\",\"keccak256\":\"0x925bef21f011a5911f3bbf8953a2738012dfc8c75aa5072777c7eb74d9f06cbd\",\"license\":\"MIT\"},\"@ensofinance/weiroll/contracts/VM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\nuint256 constant FLAG_CT_DELEGATECALL = 0x00;\\nuint256 constant FLAG_CT_CALL = 0x01;\\nuint256 constant FLAG_CT_STATICCALL = 0x02;\\nuint256 constant FLAG_CT_VALUECALL = 0x03;\\nuint256 constant FLAG_CT_MASK = 0x03;\\nuint256 constant FLAG_EXTENDED_COMMAND = 0x80;\\nuint256 constant FLAG_TUPLE_RETURN = 0x40;\\n\\nuint256 constant SHORT_COMMAND_FILL = 0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n\\nabstract contract VM {\\n    using CommandBuilder for bytes[];\\n\\n    address immutable self;\\n\\n    error ExecutionFailed(\\n        uint256 command_index,\\n        address target,\\n        string message\\n    );\\n\\n    constructor() {\\n        self = address(this);\\n    }\\n\\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\\n      internal returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outdata;\\n\\n        uint256 commandsLength = commands.length;\\n        for (uint256 i; i < commandsLength; i=_uncheckedIncrement(i)) {\\n            command = commands[i];\\n            flags = uint256(uint8(bytes1(command << 32)));\\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                indices = commands[i++];\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\\n                (success, outdata) = address(uint160(uint256(command))).delegatecall( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                (success, outdata) = address(uint160(uint256(command))).call( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outdata) = address(uint160(uint256(command))).staticcall( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                uint256 calleth;\\n                bytes memory v = state[uint8(bytes1(indices))];\\n                assembly {\\n                    mstore(calleth, add(v, 0x20))\\n                }\\n                (success, outdata) = address(uint160(uint256(command))).call{ // target\\n                    value: calleth\\n                }(\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        bytes32(uint256(indices << 8) | IDX_END_OF_ARGS)\\n                    )\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            if (!success) {\\n                if (outdata.length > 0) {\\n                    assembly {\\n                        outdata := add(outdata, 68)\\n                    }\\n                }\\n                revert ExecutionFailed({\\n                    command_index: 0,\\n                    target: address(uint160(uint256(command))),\\n                    message: outdata.length > 0 ? string(outdata) : \\\"Unknown\\\"\\n                });\\n            }\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outdata);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outdata);\\n            }\\n        }\\n        return state;\\n    }\\n\\n    function _uncheckedIncrement(uint256 i) private pure returns(uint256) {\\n        unchecked {++i;}\\n        return i;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x1db4b8e2512845440bf088fd848eefd245e5853452c0405834cb3a6c1b34e726\",\"license\":\"MIT\"},\"contracts/EnsoVM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\nimport {VM} from \\\"@ensofinance/weiroll/contracts/VM.sol\\\";\\n\\ncontract EnsoVM is VM {\\n    function execute(bytes32[] calldata commands, bytes[] memory state) public returns (bytes[] memory) {\\n        return _execute(commands, state);\\n    }\\n}\\n\",\"keccak256\":\"0x5361ad4293cc58c7ae32cb6d72b8a7282feb2e9e662c2166e72f499e0f869585\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5030608052608051610f3d61002d60003960005050610f3d6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de792d5f14610030575b600080fd5b61004361003e366004610ade565b610059565b6040516100509190610c8a565b60405180910390f35b6060610066848484610070565b90505b9392505050565b606060008080808487825b8181101561044d578a8a8281811061009557610095610d0a565b905060200201359650602087901b60f81c60ff169550608086166000146100e1578a8a826100c281610d36565b93508181106100d3576100d3610d0a565b905060200201359450610105565b602887901b79ffffffffffffffffffffffffffffffffffffffffffffffffffff1794505b600386166101875773ffffffffffffffffffffffffffffffffffffffff871661012f8a898861045c565b60405161013c9190610d6f565b600060405180830381855af49150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b606091505b509094509250610382565b60016003871614156101ff5773ffffffffffffffffffffffffffffffffffffffff87166101b58a898861045c565b6040516101c29190610d6f565b6000604051808303816000865af19150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b60026003871614156102755773ffffffffffffffffffffffffffffffffffffffff871661022d8a898861045c565b60405161023a9190610d6f565b600060405180830381855afa9150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b60038087161415610335576000808a8760f81c60ff168151811061029b5761029b610d0a565b6020908102919091018101519081018352905073ffffffffffffffffffffffffffffffffffffffff8916826102d88d8c60088c901b60ff1761045c565b6040516102e59190610d6f565b60006040518083038185875af1925050503d8060008114610322576040519150601f19603f3d011682016040523d82523d6000602084013e610327565b606091505b509096509450610382915050565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c69642063616c6c747970650000000000000000000000000000000060448201526064015b60405180910390fd5b8361041657825115610395576044830192505b60008760001c60008551116103df576040518060400160405280600781526020017f556e6b6e6f776e000000000000000000000000000000000000000000000000008152506103e1565b845b6040517fef3dcb2f00000000000000000000000000000000000000000000000000000000815260040161037993929190610d8b565b60408616156104335761042e89605889901b8561080b565b610445565b61044289605889901b856108b0565b98505b60010161007b565b50969998505050505050505050565b606060008060606000805b602081101561065b5786816020811061048257610482610d0a565b1a915060ff8214156104935761065b565b60808216156105ac5760fe8214156104e75782516104ce57886040516020016104bc9190610c8a565b60405160208183030381529060405292505b82516104da9086610dc9565b9450602084019350610653565b600089607f8416815181106104fe576104fe610d0a565b60200260200101515190506020816105169190610de1565b156105895760405162461bcd60e51b815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f66203332206279746573000000000000000000006064820152608401610379565b610594816020610dc9565b61059e9087610dc9565b955060208501945050610653565b88607f8316815181106105c1576105c1610d0a565b60200260200101515160201461063f5760405162461bcd60e51b815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f32206279746573000000000000000000000000000000000000000000000000006064820152608401610379565b61064a602086610dc9565b94506020840193505b600101610467565b50610667846004610dc9565b67ffffffffffffffff81111561067f5761067f610a4b565b6040519080825280601f01601f1916602001820160405280156106a9576020820181803683370190505b5094508660208601526000935060005b60208110156107ff578681602081106106d4576106d4610d0a565b1a915060ff8214156106e5576107ff565b60808216156107c25760fe82141561074a5785850160240184905261072583602088610712886004610dc9565b602088516107209190610e03565b610a31565b602083516107339190610e03565b61073d9085610dc9565b93506020850194506107f7565b600089607f84168151811061076157610761610d0a565b602002602001015151905084866024890101526107aa8a607f85168151811061078c5761078c610d0a565b60200260200101516000898860046107a49190610dc9565b85610a31565b6107b48186610dc9565b9450602086019550506107f7565b600089607f8416815181106107d9576107d9610d0a565b60200260200101519050602081015186602489010152602086019550505b6001016106b9565b50505050509392505050565b60f882901c60ff81141561081f5750505050565b60008251602061082f9190610dc9565b67ffffffffffffffff81111561084757610847610a4b565b6040519080825280601f01601f191660200182016040528015610871576020820181803683370190505b5085838151811061088457610884610d0a565b6020026020010181905290506108a08360008360208751610a31565b8251806020830152505050505050565b606060f883901c60ff8114156108c95784915050610069565b608081161561098f5760fe8114156108f657828060200190518101906108ef9190610e1a565b9450610a28565b6020838101519081146109715760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c6529000000000000000000000000000000000000000000006064820152608401610379565b508251601f19016020848101918252607f8316810287010152610a28565b8251602014610a065760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f28737461746963290000000000000000000000000000000000000000000000006064820152608401610379565b8285607f831681518110610a1c57610a1c610d0a565b60200260200101819052505b50929392505050565b808260208501018286602089010160045afa505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610a8a57610a8a610a4b565b604052919050565b600067ffffffffffffffff821115610aac57610aac610a4b565b5060051b60200190565b600067ffffffffffffffff821115610ad057610ad0610a4b565b50601f01601f191660200190565b60008060006040808587031215610af457600080fd5b843567ffffffffffffffff80821115610b0c57600080fd5b818701915087601f830112610b2057600080fd5b813581811115610b2f57600080fd5b602089818360051b8601011115610b4557600080fd5b808401975081965080890135935082841115610b6057600080fd5b838901935089601f850112610b7457600080fd5b83359150610b89610b8483610a92565b610a61565b82815260059290921b8401810191818101908b841115610ba857600080fd5b8286015b84811015610c1c57803586811115610bc45760008081fd5b8701603f81018e13610bd65760008081fd5b84810135610be6610b8482610ab6565b8181528f8b838501011115610bfb5760008081fd5b818b8401888301376000918101870191909152845250918301918301610bac565b50809750505050505050509250925092565b60005b83811015610c49578181015183820152602001610c31565b83811115610c58576000848401525b50505050565b60008151808452610c76816020860160208601610c2e565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cfd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610ceb858351610c5e565b94509285019290850190600101610cb1565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d6857610d68610d20565b5060010190565b60008251610d81818460208701610c2e565b9190910192915050565b83815273ffffffffffffffffffffffffffffffffffffffff83166020820152606060408201526000610dc06060830184610c5e565b95945050505050565b60008219821115610ddc57610ddc610d20565b500190565b600082610dfe57634e487b7160e01b600052601260045260246000fd5b500690565b600082821015610e1557610e15610d20565b500390565b60006020808385031215610e2d57600080fd5b825167ffffffffffffffff80821115610e4557600080fd5b818501915085601f830112610e5957600080fd5b8151610e67610b8482610a92565b81815260059190911b83018401908481019088831115610e8657600080fd5b8585015b83811015610efa57805185811115610ea25760008081fd5b8601603f81018b13610eb45760008081fd5b878101516040610ec6610b8483610ab6565b8281528d82848601011115610edb5760008081fd5b610eea838c8301848701610c2e565b8652505050918601918601610e8a565b509897505050505050505056fea26469706673582212207955e2a99c20504b44485c14d6cb775bf84a100528b31175492a70c55bd1751064736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de792d5f14610030575b600080fd5b61004361003e366004610ade565b610059565b6040516100509190610c8a565b60405180910390f35b6060610066848484610070565b90505b9392505050565b606060008080808487825b8181101561044d578a8a8281811061009557610095610d0a565b905060200201359650602087901b60f81c60ff169550608086166000146100e1578a8a826100c281610d36565b93508181106100d3576100d3610d0a565b905060200201359450610105565b602887901b79ffffffffffffffffffffffffffffffffffffffffffffffffffff1794505b600386166101875773ffffffffffffffffffffffffffffffffffffffff871661012f8a898861045c565b60405161013c9190610d6f565b600060405180830381855af49150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b606091505b509094509250610382565b60016003871614156101ff5773ffffffffffffffffffffffffffffffffffffffff87166101b58a898861045c565b6040516101c29190610d6f565b6000604051808303816000865af19150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b60026003871614156102755773ffffffffffffffffffffffffffffffffffffffff871661022d8a898861045c565b60405161023a9190610d6f565b600060405180830381855afa9150503d8060008114610177576040519150601f19603f3d011682016040523d82523d6000602084013e61017c565b60038087161415610335576000808a8760f81c60ff168151811061029b5761029b610d0a565b6020908102919091018101519081018352905073ffffffffffffffffffffffffffffffffffffffff8916826102d88d8c60088c901b60ff1761045c565b6040516102e59190610d6f565b60006040518083038185875af1925050503d8060008114610322576040519150601f19603f3d011682016040523d82523d6000602084013e610327565b606091505b509096509450610382915050565b60405162461bcd60e51b815260206004820152601060248201527f496e76616c69642063616c6c747970650000000000000000000000000000000060448201526064015b60405180910390fd5b8361041657825115610395576044830192505b60008760001c60008551116103df576040518060400160405280600781526020017f556e6b6e6f776e000000000000000000000000000000000000000000000000008152506103e1565b845b6040517fef3dcb2f00000000000000000000000000000000000000000000000000000000815260040161037993929190610d8b565b60408616156104335761042e89605889901b8561080b565b610445565b61044289605889901b856108b0565b98505b60010161007b565b50969998505050505050505050565b606060008060606000805b602081101561065b5786816020811061048257610482610d0a565b1a915060ff8214156104935761065b565b60808216156105ac5760fe8214156104e75782516104ce57886040516020016104bc9190610c8a565b60405160208183030381529060405292505b82516104da9086610dc9565b9450602084019350610653565b600089607f8416815181106104fe576104fe610d0a565b60200260200101515190506020816105169190610de1565b156105895760405162461bcd60e51b815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f66203332206279746573000000000000000000006064820152608401610379565b610594816020610dc9565b61059e9087610dc9565b955060208501945050610653565b88607f8316815181106105c1576105c1610d0a565b60200260200101515160201461063f5760405162461bcd60e51b815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f32206279746573000000000000000000000000000000000000000000000000006064820152608401610379565b61064a602086610dc9565b94506020840193505b600101610467565b50610667846004610dc9565b67ffffffffffffffff81111561067f5761067f610a4b565b6040519080825280601f01601f1916602001820160405280156106a9576020820181803683370190505b5094508660208601526000935060005b60208110156107ff578681602081106106d4576106d4610d0a565b1a915060ff8214156106e5576107ff565b60808216156107c25760fe82141561074a5785850160240184905261072583602088610712886004610dc9565b602088516107209190610e03565b610a31565b602083516107339190610e03565b61073d9085610dc9565b93506020850194506107f7565b600089607f84168151811061076157610761610d0a565b602002602001015151905084866024890101526107aa8a607f85168151811061078c5761078c610d0a565b60200260200101516000898860046107a49190610dc9565b85610a31565b6107b48186610dc9565b9450602086019550506107f7565b600089607f8416815181106107d9576107d9610d0a565b60200260200101519050602081015186602489010152602086019550505b6001016106b9565b50505050509392505050565b60f882901c60ff81141561081f5750505050565b60008251602061082f9190610dc9565b67ffffffffffffffff81111561084757610847610a4b565b6040519080825280601f01601f191660200182016040528015610871576020820181803683370190505b5085838151811061088457610884610d0a565b6020026020010181905290506108a08360008360208751610a31565b8251806020830152505050505050565b606060f883901c60ff8114156108c95784915050610069565b608081161561098f5760fe8114156108f657828060200190518101906108ef9190610e1a565b9450610a28565b6020838101519081146109715760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c6529000000000000000000000000000000000000000000006064820152608401610379565b508251601f19016020848101918252607f8316810287010152610a28565b8251602014610a065760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f28737461746963290000000000000000000000000000000000000000000000006064820152608401610379565b8285607f831681518110610a1c57610a1c610d0a565b60200260200101819052505b50929392505050565b808260208501018286602089010160045afa505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610a8a57610a8a610a4b565b604052919050565b600067ffffffffffffffff821115610aac57610aac610a4b565b5060051b60200190565b600067ffffffffffffffff821115610ad057610ad0610a4b565b50601f01601f191660200190565b60008060006040808587031215610af457600080fd5b843567ffffffffffffffff80821115610b0c57600080fd5b818701915087601f830112610b2057600080fd5b813581811115610b2f57600080fd5b602089818360051b8601011115610b4557600080fd5b808401975081965080890135935082841115610b6057600080fd5b838901935089601f850112610b7457600080fd5b83359150610b89610b8483610a92565b610a61565b82815260059290921b8401810191818101908b841115610ba857600080fd5b8286015b84811015610c1c57803586811115610bc45760008081fd5b8701603f81018e13610bd65760008081fd5b84810135610be6610b8482610ab6565b8181528f8b838501011115610bfb5760008081fd5b818b8401888301376000918101870191909152845250918301918301610bac565b50809750505050505050509250925092565b60005b83811015610c49578181015183820152602001610c31565b83811115610c58576000848401525b50505050565b60008151808452610c76816020860160208601610c2e565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cfd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610ceb858351610c5e565b94509285019290850190600101610cb1565b5092979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d6857610d68610d20565b5060010190565b60008251610d81818460208701610c2e565b9190910192915050565b83815273ffffffffffffffffffffffffffffffffffffffff83166020820152606060408201526000610dc06060830184610c5e565b95945050505050565b60008219821115610ddc57610ddc610d20565b500190565b600082610dfe57634e487b7160e01b600052601260045260246000fd5b500690565b600082821015610e1557610e15610d20565b500390565b60006020808385031215610e2d57600080fd5b825167ffffffffffffffff80821115610e4557600080fd5b818501915085601f830112610e5957600080fd5b8151610e67610b8482610a92565b81815260059190911b83018401908481019088831115610e8657600080fd5b8585015b83811015610efa57805185811115610ea25760008081fd5b8601603f81018b13610eb45760008081fd5b878101516040610ec6610b8483610ab6565b8281528d82848601011115610edb5760008081fd5b610eea838c8301848701610c2e565b8652505050918601918601610e8a565b509897505050505050505056fea26469706673582212207955e2a99c20504b44485c14d6cb775bf84a100528b31175492a70c55bd1751064736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}