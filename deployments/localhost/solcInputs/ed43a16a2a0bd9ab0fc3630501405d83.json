{
  "language": "Solidity",
  "sources": {
    "contracts/EnsoVM.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nimport {VM} from \"@ensofinance/weiroll/contracts/VM.sol\";\n\ncontract EnsoVM is VM {\n    function execute(bytes32[] calldata commands, bytes[] memory state) public returns (bytes[] memory) {\n        return _execute(commands, state);\n    }\n}\n"
    },
    "@ensofinance/weiroll/contracts/VM.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nimport \"./CommandBuilder.sol\";\n\nabstract contract VM {\n    using CommandBuilder for bytes[];\n\n    uint256 constant FLAG_CT_DELEGATECALL = 0x00;\n    uint256 constant FLAG_CT_CALL = 0x01;\n    uint256 constant FLAG_CT_STATICCALL = 0x02;\n    uint256 constant FLAG_CT_VALUECALL = 0x03;\n    uint256 constant FLAG_CT_MASK = 0x03;\n    uint256 constant FLAG_EXTENDED_COMMAND = 0x40;\n    uint256 constant FLAG_TUPLE_RETURN = 0x80;\n\n    uint256 constant SHORT_COMMAND_FILL = 0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    address immutable self;\n\n    error ExecutionFailed(\n        uint256 command_index,\n        address target,\n        string message\n    );\n\n    constructor() {\n        self = address(this);\n    }\n\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\n      internal returns (bytes[] memory)\n    {\n        bytes32 command;\n        uint256 flags;\n        bytes32 indices;\n\n        bool success;\n        bytes memory outdata;\n\n        uint256 commandsLength = commands.length;\n        for (uint256 i; i < commandsLength;) {\n            command = commands[i];\n            flags = uint256(command >> 216) & 0xFF; // more efficient\n            // flags = uint256(uint8(bytes1(command << 32))); // more readable \n\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\n                indices = commands[++i];\n            } else {\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\n            }\n\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\n                (success, outdata) = address(uint160(uint256(command))).delegatecall( // target\n                    // inputs\n                    state.buildInputs(\n                        //selector\n                        bytes4(command),\n                        indices\n                    )\n                );\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\n                (success, outdata) = address(uint160(uint256(command))).call( // target\n                    // inputs\n                    state.buildInputs(\n                        //selector\n                        bytes4(command),\n                        indices\n                    )\n                );\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\n                (success, outdata) = address(uint160(uint256(command))).staticcall( // target\n                    // inputs\n                    state.buildInputs(\n                        //selector\n                        bytes4(command),\n                        indices\n                    )\n                );\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\n                uint256 callEth;\n                bytes memory v = state[uint8(bytes1(indices))];\n                require(v.length == 32, \"_execute: value call has no value indicated.\");\n                assembly {\n                    callEth := mload(add(v, 0x20))\n                }\n                (success, outdata) = address(uint160(uint256(command))).call{ // target\n                    value: callEth\n                }(\n                    // inputs\n                    state.buildInputs(\n                        //selector\n                        bytes4(command),\n                        bytes32(uint256(indices << 8) | CommandBuilder.IDX_END_OF_ARGS)\n                    )\n                );\n            } else {\n                revert(\"Invalid calltype\");\n            }\n\n            if (!success) {\n                if (outdata.length > 0) {\n                    assembly {\n                        outdata := add(outdata, 68)\n                    }\n                }\n                revert ExecutionFailed({\n                    command_index: 0,\n                    target: address(uint160(uint256(command))),\n                    message: outdata.length > 0 ? string(outdata) : \"Unknown\"\n                });\n            }\n\n            if (flags & FLAG_TUPLE_RETURN != 0) {\n                state.writeTuple(bytes1(command << 88), outdata);\n            } else {\n                state = state.writeOutputs(bytes1(command << 88), outdata);\n            }\n            unchecked{++i;}\n        }\n        return state;\n    }\n}\n"
    },
    "@ensofinance/weiroll/contracts/CommandBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\nlibrary CommandBuilder {\n\n    uint256 constant IDX_VARIABLE_LENGTH = 0x80;\n    uint256 constant IDX_VALUE_MASK = 0x7f;\n    uint256 constant IDX_END_OF_ARGS = 0xff;\n    uint256 constant IDX_USE_STATE = 0xfe;\n\n    function buildInputs(\n        bytes[] memory state,\n        bytes4 selector,\n        bytes32 indices\n    ) internal view returns (bytes memory ret) {\n        uint256 free; // Pointer to first free byte in tail part of message\n        uint256 idx;\n\n        // Determine the length of the encoded data\n        for (uint256 i; i < 32;) {\n            idx = uint8(indices[i]);\n            if (idx == IDX_END_OF_ARGS) break;\n            unchecked{free += 32;}\n            unchecked{++i;}\n        }\n\n        // Encode it\n        uint256 bytesWritten;\n        assembly {\n            ret := mload(0x40)\n            bytesWritten := add(bytesWritten, 4)\n            mstore(0x40, add(ret, and(add(add(bytesWritten, 0x20), 0x1f), not(0x1f))))\n            mstore(add(ret, 32), selector)\n        }\n        uint256 count = 0;\n        bytes memory stateData; // Optionally encode the current state if the call requires it\n        for (uint256 i; i < 32;) {\n            idx = uint8(indices[i]);\n            if (idx == IDX_END_OF_ARGS) break;\n\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\n                if (idx == IDX_USE_STATE) {\n                    assembly {\n                        bytesWritten := add(bytesWritten, 32)\n                        mstore(0x40, add(ret, and(add(add(bytesWritten, 0x20), 0x1f), not(0x1f))))\n                        mstore(add(add(ret, 36), count), free)\n                    }\n                    if (stateData.length == 0) {\n                        stateData = abi.encode(state);\n                    }\n                    assembly {\n                        bytesWritten := add(bytesWritten, mload(stateData))\n                        mstore(0x40, add(ret, and(add(add(bytesWritten, 0x20), 0x1f), not(0x1f))))\n                    }\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\n                    free += stateData.length - 32;\n                } else {\n                    bytes memory stateVar = state[idx & IDX_VALUE_MASK];\n                    uint256 arglen = stateVar.length;\n\n                    // Variable length data; put a pointer in the slot and write the data at the end\n                    assembly {\n                        bytesWritten := add(bytesWritten, 32)\n                        mstore(0x40, add(ret, and(add(add(bytesWritten, 0x20), 0x1f), not(0x1f))))\n                        mstore(add(add(ret, 36), count), free)\n                    }\n                    assembly {\n                        bytesWritten := add(bytesWritten, arglen)\n                        mstore(0x40, add(ret, and(add(add(bytesWritten, 0x20), 0x1f), not(0x1f))))\n                    }\n                    memcpy(\n                        stateVar,\n                        0,\n                        ret,\n                        free + 4,\n                        arglen\n                    );\n                    free += arglen;\n                }\n            } else {\n                // Fixed length data; write it directly\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\n                assembly {\n                    bytesWritten := add(bytesWritten, mload(stateVar))\n                    mstore(0x40, add(ret, and(add(add(bytesWritten, 0x20), 0x1f), not(0x1f))))\n                    mstore(add(add(ret, 36), count), mload(add(stateVar, 32)))\n                }\n            }\n            unchecked{count += 32;}\n            unchecked{++i;}\n        }\n        assembly {\n            mstore(ret, bytesWritten)\n        }\n    }\n\n    function writeOutputs(\n        bytes[] memory state,\n        bytes1 index,\n        bytes memory output\n    ) internal pure returns (bytes[] memory) {\n        uint256 idx = uint8(index);\n        if (idx == IDX_END_OF_ARGS) return state;\n\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\n            if (idx == IDX_USE_STATE) {\n                state = abi.decode(output, (bytes[]));\n            } else {\n                // Check the first field is 0x20 (because we have only a single return value)\n                uint256 argptr;\n                assembly {\n                    argptr := mload(add(output, 32))\n                }\n                require(\n                    argptr == 32,\n                    \"Only one return value permitted (variable)\"\n                );\n\n                assembly {\n                    // Overwrite the first word of the return data with the length - 32\n                    mstore(add(output, 32), sub(mload(output), 32))\n                    // Insert a pointer to the return data, starting at the second word, into state\n                    mstore(\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\n                        add(output, 32)\n                    )\n                }\n            }\n        } else {\n            // Single word\n            require(\n                output.length == 32,\n                \"Only one return value permitted (static)\"\n            );\n\n            state[idx & IDX_VALUE_MASK] = output;\n        }\n\n        return state;\n    }\n\n    function writeTuple(\n        bytes[] memory state,\n        bytes1 index,\n        bytes memory output\n    ) internal view {\n        uint256 idx = uint256(uint8(index));\n        if (idx == IDX_END_OF_ARGS) return;\n\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\n        memcpy(output, 0, entry, 32, output.length);\n        assembly {\n            let l := mload(output)\n            mstore(add(entry, 32), l)\n        }\n    }\n\n    function memcpy(\n        bytes memory src,\n        uint256 srcidx,\n        bytes memory dest,\n        uint256 destidx,\n        uint256 len\n    ) internal view {\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    4,\n                    add(add(src, 32), srcidx),\n                    len,\n                    add(add(dest, 32), destidx),\n                    len\n                )\n            )\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}