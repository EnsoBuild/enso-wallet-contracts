{
  "address": "0x498D5a77E1b7f508AF018f5BCd286134Ea91179c",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "command_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ExecutionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsafeSetting",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "permission",
          "type": "bool"
        }
      ],
      "name": "PermissionSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXECUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        }
      ],
      "name": "executeShortcut",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "magicValue",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum MinimalWallet.Protocol",
              "name": "protocol",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "operators",
              "type": "address[]"
            }
          ],
          "internalType": "struct MinimalWallet.ApprovalNote[]",
          "name": "notes",
          "type": "tuple[]"
        }
      ],
      "name": "revokeApprovals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "revokeERC1155Approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "erc20",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "revokeERC20Approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "erc721",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "revokeERC721Approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "permission",
          "type": "bool"
        }
      ],
      "name": "setPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum MinimalWallet.Protocol",
              "name": "protocol",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct MinimalWallet.TransferNote[]",
          "name": "notes",
          "type": "tuple[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC1155s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "erc20s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC20s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "erc721",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC721s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4fb4533179959ce5d089ac0d605895cb870ca0425c819c9f617b87adffb8102f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf754916D90B109AE8E405FD34064cF6Df23947eb",
    "contractAddress": null,
    "transactionIndex": 79,
    "gasUsed": "3057113",
    "logsBloom": "0x
    "blockHash": "0x905ba820c71c3e06b8298f2ef6a7d91d94df3425b377e97cdb5d6fd5e2fb976a",
    "transactionHash": "0x4fb4533179959ce5d089ac0d605895cb870ca0425c819c9f617b87adffb8102f",
    "logs": [
      {
        "transactionIndex": 79,
        "blockNumber": 36211198,
        "transactionHash": "0x4fb4533179959ce5d089ac0d605895cb870ca0425c819c9f617b87adffb8102f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f754916d90b109ae8e405fd34064cf6df23947eb",
          "0x00000000000000000000000098c27cc3f0301b6272049dc3f972e2f542780629"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000149c3e2bddbbb700000000000000000000000000000000000000000000000053560978388dce25c0000000000000000000000000000000000000000000002d37b009d68918e8e950000000000000000000000000000000000000000000000053416d3a0cb0126ec0000000000000000000000000000000000000000000002d37c4a614b4f6a4a05",
        "logIndex": 305,
        "blockHash": "0x905ba820c71c3e06b8298f2ef6a7d91d94df3425b377e97cdb5d6fd5e2fb976a"
      }
    ],
    "blockNumber": 36211198,
    "cumulativeGasUsed": "14453466",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "57e8446a1a1beec4cd2f90e168165735",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"command_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ExecutionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeSetting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"PermissionSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"executeShortcut\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MinimalWallet.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"internalType\":\"struct MinimalWallet.ApprovalNote[]\",\"name\":\"notes\",\"type\":\"tuple[]\"}],\"name\":\"revokeApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"revokeERC1155Approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"revokeERC20Approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"revokeERC721Approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"setPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MinimalWallet.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MinimalWallet.TransferNote[]\",\"name\":\"notes\",\"type\":\"tuple[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC1155s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"erc20s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnsoWallet.sol\":\"EnsoWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@ensofinance/weiroll/contracts/CommandBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary CommandBuilder {\\n    uint256 constant IDX_VARIABLE_LENGTH = 0x80;\\n    uint256 constant IDX_VALUE_MASK = 0x7f;\\n    uint256 constant IDX_END_OF_ARGS = 0xff;\\n    uint256 constant IDX_USE_STATE = 0xfe;\\n    uint256 constant IDX_ARRAY_START = 0xfd;\\n    uint256 constant IDX_TUPLE_START = 0xfc;\\n    uint256 constant IDX_DYNAMIC_END = 0xfb;\\n\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices\\n    ) internal view returns (bytes memory ret) {\\n        uint256 idx; // The current command index\\n        uint256 offsetIdx; // The index of the current free offset\\n\\n        uint256 count; // Number of bytes in whole ABI encoded message\\n        uint256 free; // Pointer to first free byte in tail part of message\\n        uint256[] memory offsets = new uint256[](10); // Optionally store the length of all dynamic types (a command cannot fit more than 10 dynamic types)\\n\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n\\n        uint256 indicesLength; // Number of indices\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i; i < 32; ) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) {\\n                indicesLength = i;\\n                break;\\n            }\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    unchecked {\\n                        count += stateData.length;\\n                    }\\n                } else if (idx == IDX_ARRAY_START) {\\n                    (offsets, offsetIdx, count, i) = setupDynamicArray(state, indices, offsets, offsetIdx, count, i);\\n                } else if (idx == IDX_TUPLE_START) {\\n                    (offsets, offsetIdx, count, i) = setupDynamicTuple(state, indices, offsets, offsetIdx, count, i);\\n                } else {\\n                    count = setupDynamicVariable(state, count, idx);\\n                }\\n            } else {\\n                count = setupStaticVariable(state, count, idx);\\n            }\\n            unchecked {\\n                free += 32;\\n                ++i;\\n            }\\n        }\\n\\n        // Encode it\\n        ret = new bytes(count + 4);\\n        assembly {\\n            mstore(add(ret, 32), selector)\\n        }\\n        count = 0;\\n        offsetIdx = 0;\\n        for (uint256 i; i < indicesLength; ) {\\n            idx = uint8(indices[i]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    unchecked {\\n                        free += stateData.length - 32;\\n                        count += 32;\\n                    }\\n                } else if (idx == IDX_ARRAY_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    (offsetIdx, free, , i) = encodeDynamicArray(ret, state, indices, offsets, offsetIdx, free, i);\\n                    unchecked {\\n                        count += 32;\\n                    }\\n                } else if (idx == IDX_TUPLE_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    (offsetIdx, free, , i) = encodeDynamicTuple(ret, state, indices, offsets, offsetIdx, free, i);\\n                    unchecked {\\n                        count += 32;\\n                    }\\n                } else {\\n                    // Variable length data\\n                    uint256 argLen = state[idx & IDX_VALUE_MASK].length;\\n                    // Put a pointer in the current slot and write the data to first free slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        free + 4,\\n                        argLen\\n                    );\\n                    unchecked {\\n                        free += argLen;\\n                        count += 32;\\n                    }\\n                }\\n            } else {\\n                // Fixed length data\\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n                // Write the data to current slot\\n                assembly {\\n                    mstore(add(add(ret, 36), count), mload(add(stateVar, 32)))\\n                }\\n                unchecked {\\n                    count += 32;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function setupStaticVariable(\\n        bytes[] memory state,\\n        uint256 count,\\n        uint256 idx\\n    ) internal pure returns (uint256) {\\n        require(\\n            state[idx & IDX_VALUE_MASK].length == 32,\\n            \\\"Static state variables must be 32 bytes\\\"\\n        );\\n        unchecked {\\n            count += 32;\\n        }\\n        return count;\\n    }\\n\\n    function setupDynamicVariable(\\n        bytes[] memory state,\\n        uint256 count,\\n        uint256 idx\\n    ) internal pure returns (uint256) {\\n        // Add the length of the value, rounded up to the next word boundary, plus space for pointer and length\\n        uint256 argLen = state[idx & IDX_VALUE_MASK].length;\\n        require(\\n            argLen % 32 == 0,\\n            \\\"Dynamic state variables must be a multiple of 32 bytes\\\"\\n        );\\n        unchecked {\\n            count += argLen + 32;\\n        }\\n        return count;\\n    }\\n\\n    function setupDynamicArray(\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory offsets,\\n        uint256 offsetIdx,\\n        uint256 count,\\n        uint256 i\\n    ) internal view returns (uint256[] memory, uint256, uint256, uint256) {\\n        // Current idx is IDX_ARRAY_START, next idx will contain the array length\\n        unchecked {\\n            ++i;\\n            count += 32;\\n        }\\n        uint256 idx = uint8(indices[i]);\\n        require(\\n            state[idx & IDX_VALUE_MASK].length == 32,\\n            \\\"Array length must be 32 bytes\\\"\\n        );\\n        return setupDynamicTuple(state, indices, offsets, offsetIdx, count, i);\\n    }\\n\\n    function setupDynamicTuple(\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory offsets,\\n        uint256 offsetIdx,\\n        uint256 count,\\n        uint256 i\\n    ) internal view returns (uint256[] memory, uint256, uint256, uint256) {\\n        uint256 idx;\\n        uint256 offset;\\n        uint256 nextOffsetIdx;\\n        // Progress to first index of the data and progress the next offset idx\\n        unchecked {\\n            ++i;\\n            nextOffsetIdx = offsetIdx + 1;\\n            count += 32;\\n        }\\n        while (i < 32) {\\n            idx = uint8(indices[i]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_DYNAMIC_END) {\\n                    offsets[offsetIdx] = offset;\\n                    // Return\\n                    return (offsets, nextOffsetIdx, count, i);\\n                } else if (idx == IDX_ARRAY_START) {\\n                    (offsets, nextOffsetIdx, count, i) = setupDynamicArray(state, indices, offsets, nextOffsetIdx, count, i);\\n                } else if (idx == IDX_TUPLE_START) {\\n                    (offsets, nextOffsetIdx, count, i) = setupDynamicTuple(state, indices, offsets, nextOffsetIdx, count, i);\\n                } else {\\n                    count = setupDynamicVariable(state, count, idx);\\n                }\\n            } else {\\n                count = setupStaticVariable(state, count, idx);\\n            }\\n            unchecked {\\n                offset += 32;\\n                ++i;\\n            }\\n        }\\n        return (offsets, nextOffsetIdx, count, i);\\n    }\\n\\n    function encodeDynamicArray(\\n        bytes memory ret,\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory offsets,\\n        uint256 offsetIdx,\\n        uint256 free,\\n        uint256 i\\n    ) internal view returns (uint256, uint256, uint256, uint256) {\\n        // Progress to array length metadata\\n        unchecked {\\n            ++i;\\n        }\\n        // Encode array length\\n        uint256 idx = uint8(indices[i]);\\n        bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n        assembly {\\n            mstore(add(add(ret, 36), free), mload(add(stateVar, 32)))\\n        }\\n        unchecked {\\n            free += 32;\\n        }\\n        uint256 length;\\n        (offsetIdx, free, length, i) = encodeDynamicTuple(ret, state, indices, offsets, offsetIdx, free, i);\\n        unchecked {\\n            length += 32; // Increase length to account for array length metadata\\n        }\\n        return (offsetIdx, free, length, i);\\n    }\\n\\n    function encodeDynamicTuple(\\n        bytes memory ret,\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory offsets,\\n        uint256 offsetIdx,\\n        uint256 free,\\n        uint256 i\\n    ) internal view returns (uint256, uint256, uint256, uint256) {\\n        uint256 idx;\\n        uint256 length; // The number of bytes in this tuple\\n        uint256 offset = offsets[offsetIdx]; // The current offset location\\n        uint256 pointer = offset; // The current pointer for dynamic types\\n        unchecked {\\n            offset += free; // Update the offset location\\n            ++offsetIdx; // Progress to next offsetIdx\\n            ++i; // Progress to first index of the data\\n        }\\n        while (i < 32) {\\n            idx = uint8(indices[i]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_DYNAMIC_END) {\\n                    return (offsetIdx, offset, length, i);\\n                } else if (idx == IDX_ARRAY_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), free), pointer)\\n                    }\\n                    uint256 argLen;\\n                    (offsetIdx, offset, argLen, i) = encodeDynamicArray(ret, state, indices, offsets, offsetIdx, offset, i);\\n                    unchecked {\\n                        pointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                        free += 32;\\n                    }\\n                } else if (idx == IDX_TUPLE_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), free), pointer)\\n                    }\\n                    uint256 argLen;\\n                    (offsetIdx, offset, argLen, i) = encodeDynamicTuple(ret, state, indices, offsets, offsetIdx, offset, i);\\n                    unchecked {\\n                        pointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                        free += 32;\\n                    }\\n                } else  {\\n                    // Variable length data\\n                    uint256 argLen = state[idx & IDX_VALUE_MASK].length;\\n                    // Put a pointer in the first free slot and write the data to the offset free slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), free), pointer)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        offset + 4,\\n                        argLen\\n                    );\\n                    unchecked {\\n                        offset += argLen;\\n                        pointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                        free += 32;\\n                    }\\n                }\\n            } else {\\n                // Fixed length data\\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n                // Write to first free slot\\n                assembly {\\n                    mstore(add(add(ret, 36), free), mload(add(stateVar, 32)))\\n                }\\n                unchecked {\\n                    length += 32;\\n                    free += 32;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return (offsetIdx, offset, length, i);\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal pure returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argPtr;\\n                assembly {\\n                    argPtr := mload(add(output, 32))\\n                }\\n                require(\\n                    argPtr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            // Single word\\n            require(\\n                output.length == 32,\\n                \\\"Only one return value permitted (static)\\\"\\n            );\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcIdx,\\n        bytes memory dest,\\n        uint256 destIdx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcIdx),\\n                    len,\\n                    add(add(dest, 32), destIdx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x703fbd8a7a4b68f7e240f68a7153c91ae2b8f5517741487a4282a501131f03a8\",\"license\":\"MIT\"},\"@ensofinance/weiroll/contracts/VM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\nabstract contract VM {\\n    using CommandBuilder for bytes[];\\n\\n    uint256 constant FLAG_CT_DELEGATECALL = 0x00;\\n    uint256 constant FLAG_CT_CALL = 0x01;\\n    uint256 constant FLAG_CT_STATICCALL = 0x02;\\n    uint256 constant FLAG_CT_VALUECALL = 0x03;\\n    uint256 constant FLAG_CT_MASK = 0x03;\\n    uint256 constant FLAG_DATA = 0x20;\\n    uint256 constant FLAG_EXTENDED_COMMAND = 0x40;\\n    uint256 constant FLAG_TUPLE_RETURN = 0x80;\\n\\n    uint256 constant SHORT_COMMAND_FILL =\\n        0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    error ExecutionFailed(\\n        uint256 command_index,\\n        address target,\\n        string message\\n    );\\n\\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\\n        internal\\n        returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outData;\\n\\n        uint256 commandsLength = commands.length;\\n        for (uint256 i; i < commandsLength; i = _uncheckedIncrement(i)) {\\n            command = commands[i];\\n            flags = uint256(uint8(bytes1(command << 32)));\\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                i = _uncheckedIncrement(i);\\n                indices = commands[i];\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\\n                (success, outData) = address(uint160(uint256(command))) // target\\n                    .delegatecall(\\n                        // inputs\\n                        flags & FLAG_DATA == 0\\n                            ? state.buildInputs(\\n                                bytes4(command), // selector\\n                                indices\\n                            )\\n                            : state[\\n                                uint8(bytes1(indices)) &\\n                                CommandBuilder.IDX_VALUE_MASK\\n                            ]\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                (success, outData) = address(uint160(uint256(command))).call( // target\\n                    // inputs\\n                    flags & FLAG_DATA == 0\\n                        ? state.buildInputs(\\n                            bytes4(command), // selector\\n                            indices\\n                        )\\n                        : state[\\n                            uint8(bytes1(indices)) &\\n                            CommandBuilder.IDX_VALUE_MASK\\n                        ]\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outData) = address(uint160(uint256(command))) // target\\n                    .staticcall(\\n                        // inputs\\n                        flags & FLAG_DATA == 0\\n                            ? state.buildInputs(\\n                                bytes4(command), // selector\\n                                indices\\n                            )\\n                            : state[\\n                                uint8(bytes1(indices)) &\\n                                CommandBuilder.IDX_VALUE_MASK\\n                            ]\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                uint256 callEth;\\n                bytes memory v = state[uint8(bytes1(indices))];\\n                assembly {\\n                    callEth := mload(add(v, 0x20))\\n                }\\n                (success, outData) = address(uint160(uint256(command))).call{ // target\\n                    value: callEth\\n                }(\\n                    // inputs\\n                    flags & FLAG_DATA == 0\\n                        ? state.buildInputs(\\n                            bytes4(command), // selector\\n                            indices << 8 // skip value input\\n                        )\\n                        : state[\\n                            uint8(\\n                                bytes1(indices << 8) // first byte after value input\\n                            ) & CommandBuilder.IDX_VALUE_MASK\\n                        ]\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            if (!success) {\\n                if (outData.length > 0) {\\n                    assembly {\\n                        outData := add(outData, 68)\\n                    }\\n                }\\n                revert ExecutionFailed({\\n                    command_index: flags & FLAG_EXTENDED_COMMAND == 0\\n                        ? i\\n                        : i - 1,\\n                    target: address(uint160(uint256(command))),\\n                    message: outData.length > 0 ? string(outData) : \\\"Unknown\\\"\\n                });\\n            }\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outData);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outData);\\n            }\\n        }\\n        return state;\\n    }\\n\\n    function _uncheckedIncrement(uint256 i) private pure returns (uint256) {\\n        unchecked {\\n            ++i;\\n        }\\n        return i;\\n    }\\n}\\n\",\"keccak256\":\"0x5b46e72687038c670dd8ae2a35a5082dbaeb64e9b44b446bde03a8ebd75fd046\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/EnsoWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@ensofinance/weiroll/contracts/VM.sol\\\";\\nimport \\\"./access/AccessController.sol\\\";\\nimport \\\"./wallet/ERC1271.sol\\\";\\nimport \\\"./wallet/MinimalWallet.sol\\\";\\nimport \\\"./interfaces/IEnsoWallet.sol\\\";\\n\\ncontract EnsoWallet is IEnsoWallet, VM, AccessController, ERC1271, MinimalWallet {\\n    using StorageAPI for bytes32;\\n\\n    // Using same slot generation technique as eip-1967 -- https://eips.ethereum.org/EIPS/eip-1967\\n    bytes32 internal constant SALT = bytes32(uint256(keccak256(\\\"enso.wallet.salt\\\")) - 1);\\n\\n    error AlreadyInit();\\n\\n    function initialize(\\n        address owner,\\n        bytes32 salt,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) external override payable {\\n        if (SALT.getBytes32() != bytes32(0)) revert AlreadyInit();\\n        SALT.setBytes32(salt);\\n        _setPermission(OWNER_ROLE, owner, true);\\n        _setPermission(EXECUTOR_ROLE, owner, true);\\n        if (commands.length != 0) {\\n            _execute(commands, state);\\n        }\\n    }\\n\\n    function execute(\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) external payable isPermitted(EXECUTOR_ROLE) returns (bool success) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := call(gas(), target, value, add(data, 0x20), mload(data), 0, 0)\\n        }\\n    }\\n\\n    function executeShortcut(bytes32[] calldata commands, bytes[] calldata state)\\n        external\\n        payable\\n        isPermitted(EXECUTOR_ROLE)\\n        returns (bytes[] memory returnData)\\n    {\\n        returnData = _execute(commands, state);\\n    }\\n\\n    function _checkSigner(address signer) internal view override returns (bool) {\\n        return _getPermission(OWNER_ROLE, signer);\\n    }\\n}\\n\",\"keccak256\":\"0x8eca6d3ca84d1f52a544c9ae19045433091f582c6f16bfb297d9f861e6cf4693\",\"license\":\"MIT\"},\"contracts/access/ACL.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/StorageAPI.sol\\\";\\n\\nabstract contract ACL {\\n    using StorageAPI for bytes32;\\n\\n    error NotPermitted();\\n\\n    modifier isPermitted(bytes32 role) {\\n        bool permitted = _getPermission(role, msg.sender); // TODO: support GSN/Account abstraction\\n        if (!permitted) revert NotPermitted();\\n        _;\\n    }\\n\\n    function getPermission(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool) {\\n        return _getPermission(role, account);\\n    }\\n\\n    function _getPermission(\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        bytes32 key = _getKey(role, account);\\n        return key.getBool();\\n    }\\n\\n    function _getKey(\\n        bytes32 role,\\n        address account\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(role, account));\\n    }\\n}\\n\",\"keccak256\":\"0x71cb738a1f5821286d29a56b88ef6cb90e0c5b55a0f2dac4135270126ddfa5f4\",\"license\":\"Unlicense\"},\"contracts/access/AccessController.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.16;\\n\\nimport \\\"./ACL.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\n// @notice The OWNER_ROLE must be set in the importing contract's constructor or initialize function\\nabstract contract AccessController is ACL, Roles {\\n    using StorageAPI for bytes32;\\n\\n    event PermissionSet(bytes32 role, address account, bool permission);\\n\\n    error UnsafeSetting();\\n\\n    function setPermission(\\n        bytes32 role,\\n        address account,\\n        bool permission\\n    ) external isPermitted(OWNER_ROLE) {\\n        if (role == OWNER_ROLE && account == msg.sender && permission == false)\\n            revert UnsafeSetting();\\n        _setPermission(role, account, permission);\\n    }\\n\\n    function _setPermission(\\n        bytes32 role,\\n        address account,\\n        bool permission\\n    ) internal {\\n        bytes32 key = _getKey(role, account);\\n        key.setBool(permission);\\n        emit PermissionSet(role, account, permission);\\n    }\\n}\\n\",\"keccak256\":\"0xca5c4ac25d715d4a9fc8687223a69a6990075f283103b18d68f5469dc78aba35\",\"license\":\"Unlicense\"},\"contracts/access/Roles.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.16;\\n\\nabstract contract Roles {\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"enso.access.roles.owner\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"enso.access.roles.executor\\\");\\n}\\n\",\"keccak256\":\"0x65a81a27906c4fa89c2f8960acc198e0efabd40dc698080f2b75dc2651ef95bf\",\"license\":\"Unlicense\"},\"contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IERC1271 {\\n    function isValidSignature(\\n        bytes32 _hash,\\n        bytes calldata _signature\\n    ) external view returns (bytes4 magicValue);\\n\\n    function isValidSignature(\\n       bytes calldata _message,\\n       bytes calldata _signature\\n    ) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x1efc2161dcbd4646cbc0c52333275f8d96f4279b5c8939a819caf2fba6ca9339\",\"license\":\"MIT\"},\"contracts/interfaces/IEnsoWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IEnsoWallet {\\n    function initialize(\\n        address owner,\\n        bytes32 salt,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x5695d1cc44a4070bf150311f6d19ebecbf2915b5e8a73ba7b1143cd605c34220\",\"license\":\"MIT\"},\"contracts/libraries/StorageAPI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary StorageAPI {\\n    function setBytes(bytes32 key, bytes memory data) internal {\\n        bytes32 slot = keccak256(abi.encodePacked(key));\\n        assembly {\\n            let length := mload(data)\\n            switch gt(length, 0x1F)\\n            case 0x00 {\\n                sstore(key, or(mload(add(data, 0x20)), mul(length, 2)))\\n            }\\n            case 0x01 {\\n                sstore(key, add(mul(length, 2), 1))\\n                for {let i:= 0} lt(mul(i, 0x20), length) {i := add(i, 0x01)} {\\n                    sstore(add(slot, i), mload(add(data, mul(add(i, 1), 0x20))))\\n                }\\n            }\\n        }\\n    }\\n\\n    function setBytes32(bytes32 key, bytes32 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setAddress(bytes32 key, address a) internal {\\n        assembly {\\n            sstore(key, a)\\n        }\\n    }\\n\\n    function setUint256(bytes32 key, uint256 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setInt256(bytes32 key, int256 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setBool(bytes32 key, bool val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function getBytes(bytes32 key) internal view returns (bytes memory data) {\\n        bytes32 slot = keccak256(abi.encodePacked(key));\\n        assembly {\\n            let length := sload(key)\\n            switch and(length, 0x01)\\n            case 0x00 {\\n                let decodedLength := div(and(length, 0xFF), 2)\\n                mstore(data, decodedLength)\\n                mstore(add(data, 0x20), and(length, not(0xFF)))\\n                mstore(0x40, add(data, 0x40))\\n            }\\n            case 0x01 {\\n                let decodedLength := div(length, 2)\\n                let i := 0\\n                mstore(data, decodedLength)\\n                for {} lt(mul(i, 0x20), decodedLength) {i := add(i, 0x01)} {\\n                    mstore(add(add(data, 0x20), mul(i, 0x20)), sload(add(slot, i)))\\n                }\\n                mstore(0x40, add(data, add(0x20, mul(i, 0x20))))\\n            }\\n        }\\n    }\\n\\n    function getBytes32(bytes32 key) internal view returns (bytes32 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getAddress(bytes32 key) internal view returns (address a) {\\n        assembly {\\n            a := sload(key)\\n        }\\n    }\\n\\n    function getUint256(bytes32 key) internal view returns (uint256 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getInt256(bytes32 key) internal view returns (int256 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getBool(bytes32 key) internal view returns (bool val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6980485003165b5a78a53d005d05e2e78e8c7727fb716c1d8f8426d97002469f\",\"license\":\"MIT\"},\"contracts/wallet/ERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../interfaces/IERC1271.sol\\\";\\n\\nabstract contract ERC1271 is IERC1271 {\\n    using ECDSA for bytes32;\\n\\n    bytes4 constant internal MAGICVALUE_BYTES = 0x20c13b0b;\\n    bytes4 constant internal MAGICVALUE_BYTES32 = 0x1626ba7e;\\n    bytes4 constant internal INVALID_SIGNATURE = 0xffffffff;\\n\\n    function isValidSignature(\\n        bytes32 _hash,\\n        bytes memory _signature\\n    )\\n        public\\n        override\\n        view\\n        returns (bytes4 magicValue)\\n    {\\n        address signer = _hash.recover(_signature);\\n        magicValue = _checkSigner(signer) ? MAGICVALUE_BYTES32 : INVALID_SIGNATURE;\\n    }\\n\\n    function isValidSignature(\\n        bytes memory _message,\\n        bytes memory _signature\\n    )\\n        public\\n        override\\n        view\\n        returns (bytes4 magicValue)\\n    {\\n        address signer = _getEthSignedMessageHash(_message).recover(_signature);\\n        magicValue = _checkSigner(signer) ? MAGICVALUE_BYTES : INVALID_SIGNATURE;\\n    }\\n\\n    // @dev Adds ETH signed message prefix to bytes message and hashes it\\n    // @param _data Bytes data before adding the prefix\\n    // @return Prefixed and hashed message\\n    function _getEthSignedMessageHash(bytes memory _data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(_data.length), _data));\\n    }\\n\\n    // @notice Confirm signer is permitted to sign on behalf of contract\\n    // @dev Abstract function to implemented by importing contract\\n    // @param signer The address of the message signer\\n    // @return Bool confirming whether signer is permitted\\n    function _checkSigner(address signer) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x332a587222785142449d4d252cea284ee48892e83850bb26a37199ddc3b9145a\",\"license\":\"MIT\"},\"contracts/wallet/MinimalWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"../access/ACL.sol\\\";\\nimport \\\"../access/Roles.sol\\\";\\n\\ncontract MinimalWallet is ACL, Roles, ERC721Holder, ERC1155Holder {\\n    using SafeERC20 for IERC20;\\n\\n    enum Protocol {\\n        ETH,\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    struct TransferNote {\\n        Protocol protocol;\\n        address token;\\n        uint256[] ids;\\n        uint256[] amounts;\\n    }\\n\\n    struct ApprovalNote {\\n        Protocol protocol;\\n        address token;\\n        address[] operators;\\n    }\\n\\n    error WithdrawFailed();\\n    error InvalidArrayLength();\\n\\n    ////////////////////////////////////////////////////\\n    // External functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    function withdraw(TransferNote[] memory notes) external isPermitted(OWNER_ROLE) {\\n        TransferNote memory note;\\n        Protocol protocol;\\n        uint256[] memory ids;\\n        uint256[] memory amounts;\\n\\n        uint256 length = notes.length;\\n        for (uint256 i; i < length; ) {\\n            note = notes[i];\\n            protocol = note.protocol;\\n            if (protocol == Protocol.ETH) {\\n                amounts = note.amounts;\\n                if (amounts.length != 1) revert InvalidArrayLength();\\n                _withdrawETH(amounts[0]);\\n            } else if (protocol == Protocol.ERC20) {\\n                amounts = note.amounts;\\n                if (amounts.length != 1) revert InvalidArrayLength();\\n                _withdrawERC20(IERC20(note.token), amounts[0]);\\n            } else if (protocol == Protocol.ERC721) {\\n                ids = note.ids;\\n                _withdrawERC721s(IERC721(note.token), ids);\\n            } else if (protocol == Protocol.ERC1155) {\\n                ids = note.ids;\\n                amounts = note.amounts;\\n                _withdrawERC1155s(IERC1155(note.token), ids, amounts);\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function withdrawETH(uint256 amount) external isPermitted(OWNER_ROLE) {\\n        _withdrawETH(amount);\\n    }\\n\\n    function withdrawERC20s(\\n        IERC20[] memory erc20s,\\n        uint256[] memory amounts\\n    ) external isPermitted(OWNER_ROLE) {\\n        uint256 length = erc20s.length;\\n        if (amounts.length != length) revert InvalidArrayLength();\\n        for (uint256 i; i < length; ) {\\n            _withdrawERC20(erc20s[i], amounts[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function withdrawERC721s(\\n        IERC721 erc721,\\n        uint256[] memory ids\\n    ) external isPermitted(OWNER_ROLE) {\\n        _withdrawERC721s(erc721, ids);\\n    }\\n\\n    function withdrawERC1155s(\\n        IERC1155 erc1155,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external isPermitted(OWNER_ROLE) {\\n        _withdrawERC1155s(erc1155, ids, amounts);\\n    }\\n\\n    function revokeApprovals(ApprovalNote[] memory notes) external isPermitted(OWNER_ROLE) {\\n        ApprovalNote memory note;\\n        Protocol protocol;\\n\\n        uint256 length = notes.length;\\n        for (uint256 i; i < length; ) {\\n            note = notes[i];\\n            protocol = note.protocol;\\n            if (protocol == Protocol.ERC20) {\\n                _revokeERC20Approvals(IERC20(note.token), note.operators);\\n            } else if (protocol == Protocol.ERC721) {\\n                _revokeERC721Approvals(IERC721(note.token), note.operators);\\n            } else if (protocol == Protocol.ERC1155) {\\n                _revokeERC1155Approvals(IERC1155(note.token), note.operators);\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function revokeERC20Approvals(\\n        IERC20 erc20,\\n        address[] memory operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC20Approvals(erc20, operators);\\n    }\\n\\n    function revokeERC721Approvals(\\n        IERC721 erc721,\\n        address[] memory operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC721Approvals(erc721, operators);\\n    }\\n\\n    function revokeERC1155Approvals(\\n        IERC1155 erc1155,\\n        address[] memory operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC1155Approvals(erc1155, operators);\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    // Internal functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    function _withdrawETH(uint256 amount) internal {\\n        (bool success, ) = msg.sender.call{ value : amount }(\\\"\\\");\\n        if (!success) revert WithdrawFailed();\\n    }\\n\\n    function _withdrawERC20(\\n        IERC20 erc20,\\n        uint256 amount\\n    ) internal {\\n        erc20.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function _withdrawERC721s(\\n        IERC721 erc721,\\n        uint256[] memory ids\\n    ) internal {\\n        uint256 length = ids.length;\\n        for (uint256 i; i < length; ) {\\n            erc721.safeTransferFrom(address(this), msg.sender, ids[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function _withdrawERC1155s(\\n        IERC1155 erc1155,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal {\\n        // safeBatchTransferFrom will validate the array lengths\\n        erc1155.safeBatchTransferFrom(address(this), msg.sender, ids, amounts, \\\"\\\");\\n    }\\n\\n    function _revokeERC20Approvals(\\n        IERC20 erc20,\\n        address[] memory operators\\n    ) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc20.safeApprove(operators[i], 0);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function _revokeERC721Approvals(\\n        IERC721 erc721,\\n        address[] memory operators\\n    ) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc721.setApprovalForAll(operators[i], false);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function _revokeERC1155Approvals(\\n        IERC1155 erc1155,\\n        address[] memory operators\\n    ) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc1155.setApprovalForAll(operators[i], false);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    // Fallback functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x55e867ce6add024f2054e243631cf8f6489261e8f9bb3061c31fab4567c34924\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657613685908161001c8239f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a7146101ca57806307bd0265146101c15780630fe786e114610131578063150b7a02146101b85780631626ba7e146101af57806320c13b0b146101a657806331b455a51461019d57806356255c5314610194578063599e4c701461018b57806360d6c7cf146101825780638a2685a914610179578063a4508b1f14610170578063b61d27f614610167578063bc197c811461015e578063d27b979514610155578063dedd65241461014c578063e1084a1314610143578063e58378bb1461013a578063e5cb370314610131578063f14210a614610128578063f23a6e611461011f5763fdb09f3c0361000e5761011a6113ae565b61000e565b5061011a611237565b5061011a6111ed565b5061011a610487565b5061011a611193565b5061011a611064565b5061011a610f10565b5061011a610e0a565b5061011a610d14565b5061011a610c91565b5061011a610c02565b5061011a610b37565b5061011a610ae3565b5061011a6109fb565b5061011a61097d565b5061011a6108ab565b5061011a610730565b5061011a610646565b5061011a6105b5565b5061011a61029a565b503461028a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361028a57807f4e2312e00000000000000000000000000000000000000000000000000000000060209214908115610260575b506040519015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501438610255565b600080fd5b600091031261028a57565b503461028a5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5760206040517fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b55612080308152f35b73ffffffffffffffffffffffffffffffffffffffff81160361028a57565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761035e57604052565b610366610312565b604052565b6060810190811067ffffffffffffffff82111761035e57604052565b67ffffffffffffffff811161035e57604052565b6040810190811067ffffffffffffffff82111761035e57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761035e57604052565b60209067ffffffffffffffff8111610412575b60051b0190565b61041a610312565b61040b565b81601f8201121561028a57803591610436836103f8565b9261044460405194856103b7565b808452602092838086019260051b82010192831161028a578301905b82821061046e575050505090565b838091833561047c816102f4565b815201910190610460565b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576004356104c3816102f4565b60243567ffffffffffffffff811161028a576104e390369060040161041f565b6104ec336125a0565b54156104fb5761001991613585565b60046040517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff8111610561575b01160190565b610569610312565b61055b565b81601f8201121561028a5780359061058582610525565b9261059360405194856103b7565b8284526020838301011161028a57816000926020809301838601378301015290565b503461028a5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576105f06004356102f4565b6105fb6024356102f4565b60643567ffffffffffffffff811161028a5761061b90369060040161056e565b5060206040517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5760243567ffffffffffffffff811161028a576106af6106a761069f6106b493369060040161056e565b600435612a4e565b91909161282f565b6125a0565b54156107085760207f1626ba7e000000000000000000000000000000000000000000000000000000005b7fffffffff0000000000000000000000000000000000000000000000000000000060405191168152f35b60207fffffffff000000000000000000000000000000000000000000000000000000006106de565b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5767ffffffffffffffff60043581811161028a5761078190369060040161056e565b60243591821161028a576106a76106af916107a361082094369060040161056e565b906107ae8151612b75565b90610818603a604051809360208201957f19457468657265756d205369676e6564204d6573736167653a0a00000000000087526107f481518092602087870191016112c8565b820161080982518093602087850191016112c8565b0103601a8101845201826103b7565b519020612a4e565b54156108825761087e7f20c13b0b000000000000000000000000000000000000000000000000000000005b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681529081906020820190565b0390f35b61087e7fffffffff0000000000000000000000000000000000000000000000000000000061084b565b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576004356108e7816102f4565b60243567ffffffffffffffff811161028a5761090790369060040161041f565b610910336125a0565b54156104fb57610019916134e0565b81601f8201121561028a57803591610936836103f8565b9261094460405194856103b7565b808452602092838086019260051b82010192831161028a578301905b82821061096e575050505090565b81358152908301908301610960565b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576004356109b9816102f4565b60243567ffffffffffffffff811161028a576109d990369060040161091f565b6109e2336125a0565b54156104fb5761001991613310565b8015150361028a57565b503461028a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a57600435602435610a3a816102f4565b60443590610a47826109f1565b610a50336125a0565b54156104fb577f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1c831480610ac4575b80610abc575b610a925761001992612791565b60046040517f337b9b30000000000000000000000000000000000000000000000000000000008152fd5b508115610a85565b503373ffffffffffffffffffffffffffffffffffffffff821614610a7f565b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576020610b2c602435610b24816102f4565b60043561264c565b546040519015158152f35b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5767ffffffffffffffff60043581811161028a573660238201121561028a578060040135610b93816103f8565b91610ba160405193846103b7565b81835260209160248385019160051b8301019136831161028a57602401905b828210610be9576024358587821161028a57610be361001992369060040161091f565b90612ea9565b8380918335610bf7816102f4565b815201910190610bc0565b503461028a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a57600435610c3e816102f4565b67ffffffffffffffff60243581811161028a57610c5f90369060040161091f565b9060443590811161028a57610c7890369060040161091f565b90610c82336125a0565b54156104fb5761001992613402565b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a57600435610cc8816102f4565b60443567ffffffffffffffff811161028a57610ce890369060040161056e565b610cf1336125f9565b54156104fb5760008160209384839451920190602435905af16040519015158152f35b503461028a5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a57610d4f6004356102f4565b610d5a6024356102f4565b67ffffffffffffffff60443581811161028a57610d7b90369060040161091f565b5060643581811161028a57610d9490369060040161091f565b5060843590811161028a57610dad90369060040161056e565b506040517fbc197c81000000000000000000000000000000000000000000000000000000008152602090f35b9181601f8401121561028a5782359167ffffffffffffffff831161028a576020808501948460051b01011161028a57565b5060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a57600435610e41816102f4565b67ffffffffffffffff60443581811161028a57610e62903690600401610dd9565b909160643590811161028a57610e7c903690600401610dd9565b90937f8ace5aef1887be9219d1b04dbcfb5676ed5a12ec4a1129de5781d4d7ea71c9ed908154610ed957610ebd916024359055610eb881612680565b612715565b81610ec457005b61001993610ed39136916114d8565b9161166a565b60046040517fef34ca5c000000000000000000000000000000000000000000000000000000008152fd5b3590600482101561028a57565b503461028a576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576004359067ffffffffffffffff9081831161028a573660238401121561028a57826004013592610f70846103f8565b93604093610f80855196876103b7565b818652838601906024809360051b8501019336851161028a57838101925b858410610fb457600088610fb18b612c81565b51f35b833583811161028a57820160807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc823603011261028a57885191610ff783610342565b611002878301610f03565b83526044820135611012816102f4565b89840152606482013585811161028a576110319088369185010161091f565b8a84015260848201359285841161028a576110548a94938986953692010161091f565b6060820152815201930192610f9e565b503461028a576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576004359067ffffffffffffffff80831161028a573660238401121561028a578260040135916110c3836103f8565b916040936110d3855194856103b7565b8084528284016024809260051b8801019236841161028a57828801915b84831061110357600088610fb189612f0b565b823582811161028a57890160607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc823603011261028a578851916111468361036b565b611151868301610f03565b83526044820135611161816102f4565b8884015260648201359284841161028a576111848994938886953692010161041f565b8b8201528152019201916110f0565b503461028a5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5760206040517f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1c8152f35b503461028a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a57611226336125a0565b54156104fb5761001960043561306c565b503461028a5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576112726004356102f4565b61127d6024356102f4565b60843567ffffffffffffffff811161028a5761129d90369060040161056e565b5060206040517ff23a6e61000000000000000000000000000000000000000000000000000000008152f35b60005b8381106112db5750506000910152565b81810151838201526020016112cb565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093611327815180928187528780880191016112c8565b0116010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106113625750505050505090565b909192939495848061139e837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a516112eb565b9801930193019194939290611352565b5060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5767ffffffffffffffff60043581811161028a576113fa903690600401610dd9565b909160243590811161028a57611414903690600401610dd9565b929091611420336125f9565b54156104fb57610ed36114389361087e9536916114d8565b6040519182918261132e565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82019182116114a157565b6114a9611444565b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082019182116114a157565b929190926114e5846103f8565b916114f360405193846103b7565b829480845260208094019060051b83019282841161028a5780915b84831061151d57505050505050565b823567ffffffffffffffff811161028a57869161153d868493860161056e565b81520192019161150e565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91908110156115885760051b0190565b61041a611548565b60209080511561159e570190565b6115a6611548565b0190565b60209181518110156115bf575b60051b010190565b6115c7611548565b6115b7565b3d156115f7573d906115dd82610525565b916115eb60405193846103b7565b82523d6000602084013e565b606090565b604051906116098261039b565b600782527f556e6b6e6f776e000000000000000000000000000000000000000000000000006020830152565b73ffffffffffffffffffffffffffffffffffffffff6116679493606093835216602082015281604082015201906112eb565b90565b9060005b81811061167b5750505090565b611686818385611578565b604091903560d881901c838116159283611a5657600101936116a9858789611578565b355b60038381168061184a57505060008091602090818616158314611833576116f5907fffffffff0000000000000000000000000000000000000000000000000000000088168d611b15565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165af49361171d6115cc565b945b156117a15750506080161561176757600192917fff000000000000000000000000000000000000000000000000000000000000006117619260581b1687612520565b0161166e565b90600192957fff0000000000000000000000000000000000000000000000000000000000000061179b9360581b1690612474565b93611761565b6118079250938573ffffffffffffffffffffffffffffffffffffffff958251611829575b1561181a57905b80511561180b57915b519485947fef3dcb2f000000000000000000000000000000000000000000000000000000008652169060048501611635565b0390fd5b506118146115fc565b916117d5565b61182390611474565b906117cc565b91604401916117c5565b607f6118439160f81c168c6115aa565b51906116f7565b600181036118d8575050600080916020908186161583146118c157611892907fffffffff0000000000000000000000000000000000000000000000000000000088168d611b15565b905b815191018273ffffffffffffffffffffffffffffffffffffffff88165af1936118bb6115cc565b9461171f565b607f6118d19160f81c168c6115aa565b5190611894565b6002810361195f5750506000809160209081861615831461194857611920907fffffffff0000000000000000000000000000000000000000000000000000000088168d611b15565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165afa936118bb6115cc565b607f6119589160f81c168c6115aa565b5190611922565b036119f857600080916020908161197a8d8360f81c906115aa565b510151908287161584146119e1576119b89060081b7fffffffff0000000000000000000000000000000000000000000000000000000089168e611b15565b915b825192019073ffffffffffffffffffffffffffffffffffffffff88165af1936118bb6115cc565b607f6119f19160f01c168d6115aa565b51916119ba565b50517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c69642063616c6c74797065000000000000000000000000000000006044820152606490fd5b9379ffffffffffffffffffffffffffffffffffffffffffffffffffff8360281b176116ab565b60405190610160820182811067ffffffffffffffff821117611aab575b604052600a8252610140366020840137565b611ab3610312565b611a99565b90600482018092116114a157565b90611ad082610525565b611add60405191826103b7565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611b0b8294610525565b0190602036910137565b929192600090818291611b26611a7c565b916060928596865b60209081891015611dc1578b891a60ff8114611c30576080811615611c225760fe8103611bbe5750865115611b71575b90600191875101975b0197019695611b2e565b9550600190604051611bb581611b898985830161132e565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826103b7565b96909150611b5e565b92989197949193909260fd8103611bef5750916001949391611be1938d88611f1b565b989294919790979493611b67565b60fc8103611c095750916001949391611be1938d88611fc6565b611c1c90600193969992959a9488611e78565b97611b67565b611c1c906001939288611dd6565b5097985090969194939250611c4e91611c499150611ab8565b611ac6565b97602095868a0152600093849185965b898810611c715750505050505050505050565b889081891015611db4575b8c838a1a6080811615611d8f5760fe8103611ced575081611cdd826001959460248d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe096010152611ccc83611ab8565b611cd68c516114ab565b918c61258e565b885101019701975b019695611c5e565b929895919260fd8103611d2357509160019991858589868560248c611d149a0101526120c3565b90509891979097940197611ce5565b60fc8103611d4557509160019991858589868560248c611d149a010152612114565b92611d8687602493611d758b859b9e979b611d66607f60019b1680936115aa565b5151978895850101528c6115aa565b5190611d8085611ab8565b9161257c565b01970197611ce5565b9060248a85611da6607f600198979e96168c6115aa565b510151920101520197611ce5565b611dbc611548565b611c7c565b9050611c49919750611c4e9295949350611ab8565b611de790607f6020939416906115aa565b515103611df45760200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f32206279746573000000000000000000000000000000000000000000000000006064820152fd5b607f611e86929316906115aa565b5151601f8116611e97570160200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f66203332206279746573000000000000000000006064820152fd5b9291909394600101936020851015611fb9575b6020611f3f607f83881a16866115aa565b515103611f5b576020611f53960193611fc6565b929391929091565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4172726179206c656e677468206d7573742062652033322062797465730000006044820152fd5b611fc1611548565b611f2e565b9493909592600091600180960195808301986020809301985b838910611ff25750505050505093929190565b81891a60808116156120b05760fb810361201c57505050505061201590836115aa565b5293929190565b9a849b978860fd869d949697999a9c959c1460001461205c5750906120449392918b86611f1b565b9b929b9a919a96909a9b975b01950197909291611fdf565b60fc9193959798508092949650146000146120945750928492612084928b958b8e9998611fc6565b9b929b9a919a96909a9b97612050565b9a6120aa81939c87958d9799989d949a9d611e78565b9a612050565b936120aa849582949b989c849694611dd6565b93929190602060016120fb98019681881015612107575b816120ea607f868b1a16856115aa565b510151602482890101520194612114565b92939192602090910191565b61210f611548565b6120da565b949095929196939660009661212989856115aa565b51906001808584019b019601975b602095868a101561228057848a1a60808116156122515760fb810361216457505050505050505093929190565b9b8498889d958660fd8a9f9b989e9596979a999e146000146121b8575060248697986121979697010152848c89886120c3565b919c9781019095019a91979094019501926001905b01979293909491612137565b92949650509193955060fc81146000146122005750916121e7918594938960248f988f010152848c8988612114565b919c9781019095019a91979094019501926001906121ac565b9b8860248d83949b9f956122438a6122388d607f60019b9e9d9c9e169061222782826115aa565b5151988998899889960101526115aa565b518b611d8085611ab8565b019e019801019a01936121ac565b96869b8192949760248361226f999e99607f6001989a9d168c6115aa565b5101519188010152019a01936121ac565b5050505050505093929190565b1561229457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f28737461746963290000000000000000000000000000000000000000000000006064820152fd5b1561231f57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c6529000000000000000000000000000000000000000000006064820152fd5b602090818184031261028a57805167ffffffffffffffff9182821161028a57019083601f8301121561028a5781516123da816103f8565b946040926123ea845197886103b7565b828752858088019360051b8601019482861161028a57868101935b86851061241757505050505050505090565b845183811161028a5782019084603f8301121561028a57888201519061243c82610525565b612448895191826103b7565b8281528689848601011161028a576124698b949385948b86850191016112c8565b815201940193612405565b91908060f81c60ff811461251a5760808116156124ed5760fe036124a757506116679150602080825183010191016123a3565b610fe06020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838501946124de85875114612318565b5101845260f31c168301015290565b829150607f90612503602061251695511461228d565b169061250f82856115aa565b52826115aa565b5090565b50505090565b9060f81c9060ff82146125775760209161255891612548855185810180911161256f57611ac6565b61255283836115aa565b526115aa565b51918051604084018184840160045afa5051910152565b611c49611444565b505050565b916020809185930101920160045afa50565b910160200190829060400160045afa50565b60405173ffffffffffffffffffffffffffffffffffffffff60208201927f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1c8452166040820152604081526125f38161036b565b51902090565b60405173ffffffffffffffffffffffffffffffffffffffff60208201927fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b55612080308452166040820152604081526125f38161036b565b9073ffffffffffffffffffffffffffffffffffffffff6040519160208301938452166040820152604081526125f38161036b565b60607ff7682c7604ab581823c6ee4b22f8283179771e57c8115328f4a698be07430a419160405160016020820173ffffffffffffffffffffffffffffffffffffffff7f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1c948583521692836040820152604081526126fc8161036b565b51902055604051918252602082015260016040820152a1565b60607ff7682c7604ab581823c6ee4b22f8283179771e57c8115328f4a698be07430a419160405160016020820173ffffffffffffffffffffffffffffffffffffffff7fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b5561208030948583521692836040820152604081526126fc8161036b565b7ff7682c7604ab581823c6ee4b22f8283179771e57c8115328f4a698be07430a419273ffffffffffffffffffffffffffffffffffffffff606093826127d6828661264c565b5560405193845216602083015215156040820152a1565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005111561282757565b6114a96127ed565b6128388161281d565b806128405750565b6128498161281d565b600181036128b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b6128b98161281d565b60028103612920576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b6129298161281d565b600381036129b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b806129c260049261281d565b146129c957565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b906041815114600014612a7c57612a78916020820151906060604084015193015160001a90612a93565b9091565b5050600090600290565b506040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311612b4a5760ff16601b81141580612b3f575b612b33579160809493916020936040519384528484015260408301526060820152600093849182805260015afa15612b26575b815173ffffffffffffffffffffffffffffffffffffffff811615612b20579190565b50600190565b612b2e612a86565b612afe565b50505050600090600490565b50601c811415612acb565b50505050600090600390565b906020918051821015612b6857010190565b612b70611548565b010190565b8015612c47576000818181805b612bff5750612b9081611ac6565b935b612b9c5750505090565b612ba590611474565b90600a907fff0000000000000000000000000000000000000000000000000000000000000060308383068101809111612bf2575b60f81b16841a612be98487612b56565b53049081612b92565b612bfa611444565b612bd9565b91506001817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600a9314612c3a575b01910480849291612b82565b612c42611444565b612c2e565b50604051612c548161039b565b600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b612c8a336125a0565b54156104fb57612c98612e5a565b5080519060005b828110612cab57505050565b612cb581836115aa565b5190815191612cc383612e9f565b612ccc83612e9f565b82612d44576060015180519092507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01612d1a57612d14612d0e600193611590565b5161306c565b01612c9f565b60046040517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b612d4d83612e9f565b600192808403612dbd5750606081015192835103612d1a57600192612db1612dab612d926020612db895015173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b91611590565b51906130b2565b612d14565b60019350612dca81612e9f565b60028103612e05575080612e00612d9260206040612db895015193015173ffffffffffffffffffffffffffffffffffffffff1690565b613310565b80612e11600392612e9f565b14612e1d575b50612d14565b806040612e54920151612e4f612d926020606085015194015173ffffffffffffffffffffffffffffffffffffffff1690565b613402565b38612e17565b604051906080820182811067ffffffffffffffff821117612e92575b6040526060808360008152600060208201528160408201520152565b612e9a610312565b612e76565b6004111561282757565b90612eb3336125a0565b54156104fb5781519182825103612d1a5760005b838110612ed45750505050565b80612f0573ffffffffffffffffffffffffffffffffffffffff612ef9600194866115aa565b5116612db183876115aa565b01612ec7565b612f14336125a0565b54156104fb57612f2261302c565b5080519060005b828110612f3557505050565b612f3f81836115aa565b5190815191612f4d83612e9f565b612f5683612e9f565b600192808403612f9a5750806040612f8b612d926020612f9495015173ffffffffffffffffffffffffffffffffffffffff1690565b910151906134e0565b01612f29565b612fa381612e9f565b60028103612fe45750806040612fd6612d926020612fdf95015173ffffffffffffffffffffffffffffffffffffffff1690565b91015190613585565b612f94565b80612ff0600392612e9f565b14612ffc575b50612f94565b806040612fd6612d92602061302695015173ffffffffffffffffffffffffffffffffffffffff1690565b38612ff6565b604051906060820182811067ffffffffffffffff82111761305f575b604052606060408360008152600060208201520152565b613067610312565b613048565b600080809260405190335af16130806115cc565b501561308857565b60046040517f750b219c000000000000000000000000000000000000000000000000000000008152fd5b906114a991604051917fa9059cbb0000000000000000000000000000000000000000000000000000000060208401523360248401526044830152604482526080820182811067ffffffffffffffff821117613110575b6040526131bd565b613118610312565b613108565b9081602091031261028a5751611667816109f1565b1561313957565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff1690604051906131e18261039b565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b1561325857600082819282876132339796519301915af161322d6115cc565b906132b6565b8051908161324057505050565b826114a99361325393830101910161311d565b613132565b606484604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b909190156132c2575090565b8151156132d25750805190602001fd5b611807906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260248301906112eb565b81519060005b8281106133235750505050565b73ffffffffffffffffffffffffffffffffffffffff82169061334581866115aa565b5191803b1561028a5760008091606460019560405194859384927f42842e0e00000000000000000000000000000000000000000000000000000000845230600485015233602485015260448401525af180156133c1575b6133a8575b5001613316565b806133b56133bb92610387565b8061028f565b386133a1565b6133c9612a86565b61339c565b90815180825260208080930193019160005b8281106133ee575050505090565b8351855293810193928101926001016133e0565b73ffffffffffffffffffffffffffffffffffffffff1691823b1561028a576134a892600092836020613477948260405198899788967f2eb2c2d600000000000000000000000000000000000000000000000000000000885230600489015233602489015260a0604489015260a48801906133ce565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc93848883030160648901526133ce565b85810392830160848701525201925af180156134d3575b6134c65750565b806133b56114a992610387565b6134db612a86565b6134bf565b81519160005b8381106134f35750505050565b8061357f611b8961357973ffffffffffffffffffffffffffffffffffffffff61351e600196886115aa565b51166040519283917f095ea7b300000000000000000000000000000000000000000000000000000000602084015260248301602060009193929373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b856131bd565b016134e6565b81519060005b8281106135985750505050565b73ffffffffffffffffffffffffffffffffffffffff90818316916135bc82876115aa565b5116823b1561028a576040517fa22cb46500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9190911660048201526000602482018190526001938290604490829084905af18015613642575b613633575b500161358b565b61363c90610387565b3861362c565b61364a612a86565b61362756fea2646970667358221220cd41ba60fd8b598e36bc8ae136278bbd22b61ec813b02da52384cf209b62dac564736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c806301ffc9a7146101ca57806307bd0265146101c15780630fe786e114610131578063150b7a02146101b85780631626ba7e146101af57806320c13b0b146101a657806331b455a51461019d57806356255c5314610194578063599e4c701461018b57806360d6c7cf146101825780638a2685a914610179578063a4508b1f14610170578063b61d27f614610167578063bc197c811461015e578063d27b979514610155578063dedd65241461014c578063e1084a1314610143578063e58378bb1461013a578063e5cb370314610131578063f14210a614610128578063f23a6e611461011f5763fdb09f3c0361000e5761011a6113ae565b61000e565b5061011a611237565b5061011a6111ed565b5061011a610487565b5061011a611193565b5061011a611064565b5061011a610f10565b5061011a610e0a565b5061011a610d14565b5061011a610c91565b5061011a610c02565b5061011a610b37565b5061011a610ae3565b5061011a6109fb565b5061011a61097d565b5061011a6108ab565b5061011a610730565b5061011a610646565b5061011a6105b5565b5061011a61029a565b503461028a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576004357fffffffff00000000000000000000000000000000000000000000000000000000811680910361028a57807f4e2312e00000000000000000000000000000000000000000000000000000000060209214908115610260575b506040519015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501438610255565b600080fd5b600091031261028a57565b503461028a5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5760206040517fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b55612080308152f35b73ffffffffffffffffffffffffffffffffffffffff81160361028a57565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761035e57604052565b610366610312565b604052565b6060810190811067ffffffffffffffff82111761035e57604052565b67ffffffffffffffff811161035e57604052565b6040810190811067ffffffffffffffff82111761035e57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761035e57604052565b60209067ffffffffffffffff8111610412575b60051b0190565b61041a610312565b61040b565b81601f8201121561028a57803591610436836103f8565b9261044460405194856103b7565b808452602092838086019260051b82010192831161028a578301905b82821061046e575050505090565b838091833561047c816102f4565b815201910190610460565b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576004356104c3816102f4565b60243567ffffffffffffffff811161028a576104e390369060040161041f565b6104ec336125a0565b54156104fb5761001991613585565b60046040517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff8111610561575b01160190565b610569610312565b61055b565b81601f8201121561028a5780359061058582610525565b9261059360405194856103b7565b8284526020838301011161028a57816000926020809301838601378301015290565b503461028a5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576105f06004356102f4565b6105fb6024356102f4565b60643567ffffffffffffffff811161028a5761061b90369060040161056e565b5060206040517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5760243567ffffffffffffffff811161028a576106af6106a761069f6106b493369060040161056e565b600435612a4e565b91909161282f565b6125a0565b54156107085760207f1626ba7e000000000000000000000000000000000000000000000000000000005b7fffffffff0000000000000000000000000000000000000000000000000000000060405191168152f35b60207fffffffff000000000000000000000000000000000000000000000000000000006106de565b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5767ffffffffffffffff60043581811161028a5761078190369060040161056e565b60243591821161028a576106a76106af916107a361082094369060040161056e565b906107ae8151612b75565b90610818603a604051809360208201957f19457468657265756d205369676e6564204d6573736167653a0a00000000000087526107f481518092602087870191016112c8565b820161080982518093602087850191016112c8565b0103601a8101845201826103b7565b519020612a4e565b54156108825761087e7f20c13b0b000000000000000000000000000000000000000000000000000000005b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681529081906020820190565b0390f35b61087e7fffffffff0000000000000000000000000000000000000000000000000000000061084b565b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576004356108e7816102f4565b60243567ffffffffffffffff811161028a5761090790369060040161041f565b610910336125a0565b54156104fb57610019916134e0565b81601f8201121561028a57803591610936836103f8565b9261094460405194856103b7565b808452602092838086019260051b82010192831161028a578301905b82821061096e575050505090565b81358152908301908301610960565b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576004356109b9816102f4565b60243567ffffffffffffffff811161028a576109d990369060040161091f565b6109e2336125a0565b54156104fb5761001991613310565b8015150361028a57565b503461028a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a57600435602435610a3a816102f4565b60443590610a47826109f1565b610a50336125a0565b54156104fb577f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1c831480610ac4575b80610abc575b610a925761001992612791565b60046040517f337b9b30000000000000000000000000000000000000000000000000000000008152fd5b508115610a85565b503373ffffffffffffffffffffffffffffffffffffffff821614610a7f565b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576020610b2c602435610b24816102f4565b60043561264c565b546040519015158152f35b503461028a5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5767ffffffffffffffff60043581811161028a573660238201121561028a578060040135610b93816103f8565b91610ba160405193846103b7565b81835260209160248385019160051b8301019136831161028a57602401905b828210610be9576024358587821161028a57610be361001992369060040161091f565b90612ea9565b8380918335610bf7816102f4565b815201910190610bc0565b503461028a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a57600435610c3e816102f4565b67ffffffffffffffff60243581811161028a57610c5f90369060040161091f565b9060443590811161028a57610c7890369060040161091f565b90610c82336125a0565b54156104fb5761001992613402565b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a57600435610cc8816102f4565b60443567ffffffffffffffff811161028a57610ce890369060040161056e565b610cf1336125f9565b54156104fb5760008160209384839451920190602435905af16040519015158152f35b503461028a5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a57610d4f6004356102f4565b610d5a6024356102f4565b67ffffffffffffffff60443581811161028a57610d7b90369060040161091f565b5060643581811161028a57610d9490369060040161091f565b5060843590811161028a57610dad90369060040161056e565b506040517fbc197c81000000000000000000000000000000000000000000000000000000008152602090f35b9181601f8401121561028a5782359167ffffffffffffffff831161028a576020808501948460051b01011161028a57565b5060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a57600435610e41816102f4565b67ffffffffffffffff60443581811161028a57610e62903690600401610dd9565b909160643590811161028a57610e7c903690600401610dd9565b90937f8ace5aef1887be9219d1b04dbcfb5676ed5a12ec4a1129de5781d4d7ea71c9ed908154610ed957610ebd916024359055610eb881612680565b612715565b81610ec457005b61001993610ed39136916114d8565b9161166a565b60046040517fef34ca5c000000000000000000000000000000000000000000000000000000008152fd5b3590600482101561028a57565b503461028a576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576004359067ffffffffffffffff9081831161028a573660238401121561028a57826004013592610f70846103f8565b93604093610f80855196876103b7565b818652838601906024809360051b8501019336851161028a57838101925b858410610fb457600088610fb18b612c81565b51f35b833583811161028a57820160807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc823603011261028a57885191610ff783610342565b611002878301610f03565b83526044820135611012816102f4565b89840152606482013585811161028a576110319088369185010161091f565b8a84015260848201359285841161028a576110548a94938986953692010161091f565b6060820152815201930192610f9e565b503461028a576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576004359067ffffffffffffffff80831161028a573660238401121561028a578260040135916110c3836103f8565b916040936110d3855194856103b7565b8084528284016024809260051b8801019236841161028a57828801915b84831061110357600088610fb189612f0b565b823582811161028a57890160607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc823603011261028a578851916111468361036b565b611151868301610f03565b83526044820135611161816102f4565b8884015260648201359284841161028a576111848994938886953692010161041f565b8b8201528152019201916110f0565b503461028a5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5760206040517f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1c8152f35b503461028a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a57611226336125a0565b54156104fb5761001960043561306c565b503461028a5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a576112726004356102f4565b61127d6024356102f4565b60843567ffffffffffffffff811161028a5761129d90369060040161056e565b5060206040517ff23a6e61000000000000000000000000000000000000000000000000000000008152f35b60005b8381106112db5750506000910152565b81810151838201526020016112cb565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093611327815180928187528780880191016112c8565b0116010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106113625750505050505090565b909192939495848061139e837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a516112eb565b9801930193019194939290611352565b5060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261028a5767ffffffffffffffff60043581811161028a576113fa903690600401610dd9565b909160243590811161028a57611414903690600401610dd9565b929091611420336125f9565b54156104fb57610ed36114389361087e9536916114d8565b6040519182918261132e565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82019182116114a157565b6114a9611444565b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082019182116114a157565b929190926114e5846103f8565b916114f360405193846103b7565b829480845260208094019060051b83019282841161028a5780915b84831061151d57505050505050565b823567ffffffffffffffff811161028a57869161153d868493860161056e565b81520192019161150e565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91908110156115885760051b0190565b61041a611548565b60209080511561159e570190565b6115a6611548565b0190565b60209181518110156115bf575b60051b010190565b6115c7611548565b6115b7565b3d156115f7573d906115dd82610525565b916115eb60405193846103b7565b82523d6000602084013e565b606090565b604051906116098261039b565b600782527f556e6b6e6f776e000000000000000000000000000000000000000000000000006020830152565b73ffffffffffffffffffffffffffffffffffffffff6116679493606093835216602082015281604082015201906112eb565b90565b9060005b81811061167b5750505090565b611686818385611578565b604091903560d881901c838116159283611a5657600101936116a9858789611578565b355b60038381168061184a57505060008091602090818616158314611833576116f5907fffffffff0000000000000000000000000000000000000000000000000000000088168d611b15565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165af49361171d6115cc565b945b156117a15750506080161561176757600192917fff000000000000000000000000000000000000000000000000000000000000006117619260581b1687612520565b0161166e565b90600192957fff0000000000000000000000000000000000000000000000000000000000000061179b9360581b1690612474565b93611761565b6118079250938573ffffffffffffffffffffffffffffffffffffffff958251611829575b1561181a57905b80511561180b57915b519485947fef3dcb2f000000000000000000000000000000000000000000000000000000008652169060048501611635565b0390fd5b506118146115fc565b916117d5565b61182390611474565b906117cc565b91604401916117c5565b607f6118439160f81c168c6115aa565b51906116f7565b600181036118d8575050600080916020908186161583146118c157611892907fffffffff0000000000000000000000000000000000000000000000000000000088168d611b15565b905b815191018273ffffffffffffffffffffffffffffffffffffffff88165af1936118bb6115cc565b9461171f565b607f6118d19160f81c168c6115aa565b5190611894565b6002810361195f5750506000809160209081861615831461194857611920907fffffffff0000000000000000000000000000000000000000000000000000000088168d611b15565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165afa936118bb6115cc565b607f6119589160f81c168c6115aa565b5190611922565b036119f857600080916020908161197a8d8360f81c906115aa565b510151908287161584146119e1576119b89060081b7fffffffff0000000000000000000000000000000000000000000000000000000089168e611b15565b915b825192019073ffffffffffffffffffffffffffffffffffffffff88165af1936118bb6115cc565b607f6119f19160f01c168d6115aa565b51916119ba565b50517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c69642063616c6c74797065000000000000000000000000000000006044820152606490fd5b9379ffffffffffffffffffffffffffffffffffffffffffffffffffff8360281b176116ab565b60405190610160820182811067ffffffffffffffff821117611aab575b604052600a8252610140366020840137565b611ab3610312565b611a99565b90600482018092116114a157565b90611ad082610525565b611add60405191826103b7565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0611b0b8294610525565b0190602036910137565b929192600090818291611b26611a7c565b916060928596865b60209081891015611dc1578b891a60ff8114611c30576080811615611c225760fe8103611bbe5750865115611b71575b90600191875101975b0197019695611b2e565b9550600190604051611bb581611b898985830161132e565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018352826103b7565b96909150611b5e565b92989197949193909260fd8103611bef5750916001949391611be1938d88611f1b565b989294919790979493611b67565b60fc8103611c095750916001949391611be1938d88611fc6565b611c1c90600193969992959a9488611e78565b97611b67565b611c1c906001939288611dd6565b5097985090969194939250611c4e91611c499150611ab8565b611ac6565b97602095868a0152600093849185965b898810611c715750505050505050505050565b889081891015611db4575b8c838a1a6080811615611d8f5760fe8103611ced575081611cdd826001959460248d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe096010152611ccc83611ab8565b611cd68c516114ab565b918c61258e565b885101019701975b019695611c5e565b929895919260fd8103611d2357509160019991858589868560248c611d149a0101526120c3565b90509891979097940197611ce5565b60fc8103611d4557509160019991858589868560248c611d149a010152612114565b92611d8687602493611d758b859b9e979b611d66607f60019b1680936115aa565b5151978895850101528c6115aa565b5190611d8085611ab8565b9161257c565b01970197611ce5565b9060248a85611da6607f600198979e96168c6115aa565b510151920101520197611ce5565b611dbc611548565b611c7c565b9050611c49919750611c4e9295949350611ab8565b611de790607f6020939416906115aa565b515103611df45760200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f32206279746573000000000000000000000000000000000000000000000000006064820152fd5b607f611e86929316906115aa565b5151601f8116611e97570160200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f66203332206279746573000000000000000000006064820152fd5b9291909394600101936020851015611fb9575b6020611f3f607f83881a16866115aa565b515103611f5b576020611f53960193611fc6565b929391929091565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4172726179206c656e677468206d7573742062652033322062797465730000006044820152fd5b611fc1611548565b611f2e565b9493909592600091600180960195808301986020809301985b838910611ff25750505050505093929190565b81891a60808116156120b05760fb810361201c57505050505061201590836115aa565b5293929190565b9a849b978860fd869d949697999a9c959c1460001461205c5750906120449392918b86611f1b565b9b929b9a919a96909a9b975b01950197909291611fdf565b60fc9193959798508092949650146000146120945750928492612084928b958b8e9998611fc6565b9b929b9a919a96909a9b97612050565b9a6120aa81939c87958d9799989d949a9d611e78565b9a612050565b936120aa849582949b989c849694611dd6565b93929190602060016120fb98019681881015612107575b816120ea607f868b1a16856115aa565b510151602482890101520194612114565b92939192602090910191565b61210f611548565b6120da565b949095929196939660009661212989856115aa565b51906001808584019b019601975b602095868a101561228057848a1a60808116156122515760fb810361216457505050505050505093929190565b9b8498889d958660fd8a9f9b989e9596979a999e146000146121b8575060248697986121979697010152848c89886120c3565b919c9781019095019a91979094019501926001905b01979293909491612137565b92949650509193955060fc81146000146122005750916121e7918594938960248f988f010152848c8988612114565b919c9781019095019a91979094019501926001906121ac565b9b8860248d83949b9f956122438a6122388d607f60019b9e9d9c9e169061222782826115aa565b5151988998899889960101526115aa565b518b611d8085611ab8565b019e019801019a01936121ac565b96869b8192949760248361226f999e99607f6001989a9d168c6115aa565b5101519188010152019a01936121ac565b5050505050505093929190565b1561229457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f28737461746963290000000000000000000000000000000000000000000000006064820152fd5b1561231f57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c6529000000000000000000000000000000000000000000006064820152fd5b602090818184031261028a57805167ffffffffffffffff9182821161028a57019083601f8301121561028a5781516123da816103f8565b946040926123ea845197886103b7565b828752858088019360051b8601019482861161028a57868101935b86851061241757505050505050505090565b845183811161028a5782019084603f8301121561028a57888201519061243c82610525565b612448895191826103b7565b8281528689848601011161028a576124698b949385948b86850191016112c8565b815201940193612405565b91908060f81c60ff811461251a5760808116156124ed5760fe036124a757506116679150602080825183010191016123a3565b610fe06020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838501946124de85875114612318565b5101845260f31c168301015290565b829150607f90612503602061251695511461228d565b169061250f82856115aa565b52826115aa565b5090565b50505090565b9060f81c9060ff82146125775760209161255891612548855185810180911161256f57611ac6565b61255283836115aa565b526115aa565b51918051604084018184840160045afa5051910152565b611c49611444565b505050565b916020809185930101920160045afa50565b910160200190829060400160045afa50565b60405173ffffffffffffffffffffffffffffffffffffffff60208201927f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1c8452166040820152604081526125f38161036b565b51902090565b60405173ffffffffffffffffffffffffffffffffffffffff60208201927fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b55612080308452166040820152604081526125f38161036b565b9073ffffffffffffffffffffffffffffffffffffffff6040519160208301938452166040820152604081526125f38161036b565b60607ff7682c7604ab581823c6ee4b22f8283179771e57c8115328f4a698be07430a419160405160016020820173ffffffffffffffffffffffffffffffffffffffff7f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1c948583521692836040820152604081526126fc8161036b565b51902055604051918252602082015260016040820152a1565b60607ff7682c7604ab581823c6ee4b22f8283179771e57c8115328f4a698be07430a419160405160016020820173ffffffffffffffffffffffffffffffffffffffff7fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b5561208030948583521692836040820152604081526126fc8161036b565b7ff7682c7604ab581823c6ee4b22f8283179771e57c8115328f4a698be07430a419273ffffffffffffffffffffffffffffffffffffffff606093826127d6828661264c565b5560405193845216602083015215156040820152a1565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6005111561282757565b6114a96127ed565b6128388161281d565b806128405750565b6128498161281d565b600181036128b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b6128b98161281d565b60028103612920576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b6129298161281d565b600381036129b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b806129c260049261281d565b146129c957565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608490fd5b906041815114600014612a7c57612a78916020820151906060604084015193015160001a90612a93565b9091565b5050600090600290565b506040513d6000823e3d90fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311612b4a5760ff16601b81141580612b3f575b612b33579160809493916020936040519384528484015260408301526060820152600093849182805260015afa15612b26575b815173ffffffffffffffffffffffffffffffffffffffff811615612b20579190565b50600190565b612b2e612a86565b612afe565b50505050600090600490565b50601c811415612acb565b50505050600090600390565b906020918051821015612b6857010190565b612b70611548565b010190565b8015612c47576000818181805b612bff5750612b9081611ac6565b935b612b9c5750505090565b612ba590611474565b90600a907fff0000000000000000000000000000000000000000000000000000000000000060308383068101809111612bf2575b60f81b16841a612be98487612b56565b53049081612b92565b612bfa611444565b612bd9565b91506001817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600a9314612c3a575b01910480849291612b82565b612c42611444565b612c2e565b50604051612c548161039b565b600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b612c8a336125a0565b54156104fb57612c98612e5a565b5080519060005b828110612cab57505050565b612cb581836115aa565b5190815191612cc383612e9f565b612ccc83612e9f565b82612d44576060015180519092507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01612d1a57612d14612d0e600193611590565b5161306c565b01612c9f565b60046040517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b612d4d83612e9f565b600192808403612dbd5750606081015192835103612d1a57600192612db1612dab612d926020612db895015173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b91611590565b51906130b2565b612d14565b60019350612dca81612e9f565b60028103612e05575080612e00612d9260206040612db895015193015173ffffffffffffffffffffffffffffffffffffffff1690565b613310565b80612e11600392612e9f565b14612e1d575b50612d14565b806040612e54920151612e4f612d926020606085015194015173ffffffffffffffffffffffffffffffffffffffff1690565b613402565b38612e17565b604051906080820182811067ffffffffffffffff821117612e92575b6040526060808360008152600060208201528160408201520152565b612e9a610312565b612e76565b6004111561282757565b90612eb3336125a0565b54156104fb5781519182825103612d1a5760005b838110612ed45750505050565b80612f0573ffffffffffffffffffffffffffffffffffffffff612ef9600194866115aa565b5116612db183876115aa565b01612ec7565b612f14336125a0565b54156104fb57612f2261302c565b5080519060005b828110612f3557505050565b612f3f81836115aa565b5190815191612f4d83612e9f565b612f5683612e9f565b600192808403612f9a5750806040612f8b612d926020612f9495015173ffffffffffffffffffffffffffffffffffffffff1690565b910151906134e0565b01612f29565b612fa381612e9f565b60028103612fe45750806040612fd6612d926020612fdf95015173ffffffffffffffffffffffffffffffffffffffff1690565b91015190613585565b612f94565b80612ff0600392612e9f565b14612ffc575b50612f94565b806040612fd6612d92602061302695015173ffffffffffffffffffffffffffffffffffffffff1690565b38612ff6565b604051906060820182811067ffffffffffffffff82111761305f575b604052606060408360008152600060208201520152565b613067610312565b613048565b600080809260405190335af16130806115cc565b501561308857565b60046040517f750b219c000000000000000000000000000000000000000000000000000000008152fd5b906114a991604051917fa9059cbb0000000000000000000000000000000000000000000000000000000060208401523360248401526044830152604482526080820182811067ffffffffffffffff821117613110575b6040526131bd565b613118610312565b613108565b9081602091031261028a5751611667816109f1565b1561313957565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff1690604051906131e18261039b565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b1561325857600082819282876132339796519301915af161322d6115cc565b906132b6565b8051908161324057505050565b826114a99361325393830101910161311d565b613132565b606484604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b909190156132c2575090565b8151156132d25750805190602001fd5b611807906040519182917f08c379a00000000000000000000000000000000000000000000000000000000083526020600484015260248301906112eb565b81519060005b8281106133235750505050565b73ffffffffffffffffffffffffffffffffffffffff82169061334581866115aa565b5191803b1561028a5760008091606460019560405194859384927f42842e0e00000000000000000000000000000000000000000000000000000000845230600485015233602485015260448401525af180156133c1575b6133a8575b5001613316565b806133b56133bb92610387565b8061028f565b386133a1565b6133c9612a86565b61339c565b90815180825260208080930193019160005b8281106133ee575050505090565b8351855293810193928101926001016133e0565b73ffffffffffffffffffffffffffffffffffffffff1691823b1561028a576134a892600092836020613477948260405198899788967f2eb2c2d600000000000000000000000000000000000000000000000000000000885230600489015233602489015260a0604489015260a48801906133ce565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc93848883030160648901526133ce565b85810392830160848701525201925af180156134d3575b6134c65750565b806133b56114a992610387565b6134db612a86565b6134bf565b81519160005b8381106134f35750505050565b8061357f611b8961357973ffffffffffffffffffffffffffffffffffffffff61351e600196886115aa565b51166040519283917f095ea7b300000000000000000000000000000000000000000000000000000000602084015260248301602060009193929373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b856131bd565b016134e6565b81519060005b8281106135985750505050565b73ffffffffffffffffffffffffffffffffffffffff90818316916135bc82876115aa565b5116823b1561028a576040517fa22cb46500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9190911660048201526000602482018190526001938290604490829084905af18015613642575b613633575b500161358b565b61363c90610387565b3861362c565b61364a612a86565b61362756fea2646970667358221220cd41ba60fd8b598e36bc8ae136278bbd22b61ec813b02da52384cf209b62dac564736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}