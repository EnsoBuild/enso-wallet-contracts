{
  "0xe1e333961bce7a18f863ad9a702e397e35a52b0f63dfd20cdc8316c7e35455e2": {
    "name": "EnsoWallet",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "EnsoWallet",
      "sourceName": "contracts/EnsoWallet.sol",
      "abi": [
        {
          "inputs": [],
          "name": "AlreadyInit",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "command_index",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "message",
              "type": "string"
            }
          ],
          "name": "ExecutionFailed",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidAddress",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "NotCaller",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "caller",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "commands",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "state",
              "type": "bytes[]"
            }
          ],
          "name": "execute",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "returnData",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "caller_",
              "type": "address"
            },
            {
              "internalType": "bytes32[]",
              "name": "commands",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "state",
              "type": "bytes[]"
            }
          ],
          "name": "initialize",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "initialized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "bytecode": "0x60808060405234610016576116da908161001c8239f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c908163158ef93e1461006e5750806387258e8e14610065578063de792d5f1461005c5763fc9c8d390361000e576100576103c9565b61000e565b506100576102f5565b506100576100e8565b346100af57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100af5760ff905460a01c16151560805260206080f35b80fd5b9181601f840112156100e35782359167ffffffffffffffff83116100e3576020808501948460051b0101116100e357565b600080fd5b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e35760043573ffffffffffffffffffffffffffffffffffffffff811681036100e35767ffffffffffffffff6024358181116100e3576101549036906004016100b2565b90916044359081116100e35761016e9036906004016100b2565b909361018060005460ff9060a01c1690565b6101e5576101c99073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff00000000000000000000000000000000000000006000541617600055565b816101d057005b610019936101df91369161050a565b9161076e565b60046040517fef34ca5c000000000000000000000000000000000000000000000000000000008152fd5b60005b8381106102225750506000910152565b8181015183820152602001610212565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361026e8151809281875287808801910161020f565b0116010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106102a95750505050505090565b90919293949584806102e5837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a51610232565b9801930193019194939290610299565b5060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e35767ffffffffffffffff6004358181116100e3576103419036906004016100b2565b90916024359081116100e35761035b9036906004016100b2565b92909173ffffffffffffffffffffffffffffffffffffffff60005416330361039f576101df61038f9361039b95369161050a565b60405191829182610275565b0390f35b60046040517f16c618d8000000000000000000000000000000000000000000000000000000008152fd5b50346100e35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e357602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761048d57604052565b61049561041c565b604052565b60209067ffffffffffffffff81116104b4575b60051b0190565b6104bc61041c565b6104ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff81116104fd575b01160190565b61050561041c565b6104f7565b929190926105178461049a565b916040946105278651948561044c565b839581855260208095019160051b8401938385116100e35780925b8584106105525750505050505050565b833567ffffffffffffffff81116100e357820185601f820112156100e35780359161057c836104c1565b6105888651918261044c565b838152878a85850101116100e35760008a858196828097018386013783010152815201930192610542565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91908110156105f35760051b0190565b6104bc6105b3565b6020918151811015610610575b60051b010190565b6106186105b3565b610608565b3d15610648573d9061062e826104c1565b9161063c604051938461044c565b82523d6000602084013e565b606090565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82019182116106aa57565b6106b261064d565b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082019182116106aa57565b604051906040820182811067ffffffffffffffff82111761072c575b604052600782527f556e6b6e6f776e000000000000000000000000000000000000000000000000006020830152565b61073461041c565b6106fd565b73ffffffffffffffffffffffffffffffffffffffff61076b949360609383521660208201528160408201520190610232565b90565b9060005b81811061077f5750505090565b61078a8183856105e3565b604091903560d881901c838116159283610b5a57600101936107ad8587896105e3565b355b60038381168061094e57505060008091602090818616158314610937576107f9907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165af49361082161061d565b945b156108a55750506080161561086b57600192917fff000000000000000000000000000000000000000000000000000000000000006108659260581b1687611624565b01610772565b90600192957fff0000000000000000000000000000000000000000000000000000000000000061089f9360581b1690611578565b93610865565b61090b9250938573ffffffffffffffffffffffffffffffffffffffff95825161092d575b1561091e57905b80511561090f57915b519485947fef3dcb2f000000000000000000000000000000000000000000000000000000008652169060048501610739565b0390fd5b506109186106e1565b916108d9565b6109279061067d565b906108d0565b91604401916108c9565b607f6109479160f81c168c6105fb565b51906107fb565b600181036109dc575050600080916020908186161583146109c557610996907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b815191018273ffffffffffffffffffffffffffffffffffffffff88165af1936109bf61061d565b94610823565b607f6109d59160f81c168c6105fb565b5190610998565b60028103610a6357505060008091602090818616158314610a4c57610a24907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165afa936109bf61061d565b607f610a5c9160f81c168c6105fb565b5190610a26565b03610afc576000809160209081610a7e8d8360f81c906105fb565b51015190828716158414610ae557610abc9060081b7fffffffff0000000000000000000000000000000000000000000000000000000089168e610c19565b915b825192019073ffffffffffffffffffffffffffffffffffffffff88165af1936109bf61061d565b607f610af59160f01c168d6105fb565b5191610abe565b50517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c69642063616c6c74797065000000000000000000000000000000006044820152606490fd5b9379ffffffffffffffffffffffffffffffffffffffffffffffffffff8360281b176107af565b60405190610160820182811067ffffffffffffffff821117610baf575b604052600a8252610140366020840137565b610bb761041c565b610b9d565b90600482018092116106aa57565b90610bd4826104c1565b610be1604051918261044c565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610c0f82946104c1565b0190602036910137565b929192600090818291610c2a610b80565b916060928596865b60209081891015610ec5578b891a60ff8114610d34576080811615610d265760fe8103610cc25750865115610c75575b90600191875101975b0197019695610c32565b9550600190604051610cb981610c8d89858301610275565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261044c565b96909150610c62565b92989197949193909260fd8103610cf35750916001949391610ce5938d8861101f565b989294919790979493610c6b565b60fc8103610d0d5750916001949391610ce5938d886110ca565b610d2090600193969992959a9488610f7c565b97610c6b565b610d20906001939288610eda565b5097985090969194939250610d5291610d4d9150610bbc565b610bca565b97602095868a0152600093849185965b898810610d755750505050505050505050565b889081891015610eb8575b8c838a1a6080811615610e935760fe8103610df1575081610de1826001959460248d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe096010152610dd083610bbc565b610dda8c516106b4565b918c611692565b885101019701975b019695610d62565b929895919260fd8103610e2757509160019991858589868560248c610e189a0101526111c7565b90509891979097940197610de9565b60fc8103610e4957509160019991858589868560248c610e189a010152611218565b92610e8a87602493610e798b859b9e979b610e6a607f60019b1680936105fb565b5151978895850101528c6105fb565b5190610e8485610bbc565b91611680565b01970197610de9565b9060248a85610eaa607f600198979e96168c6105fb565b510151920101520197610de9565b610ec06105b3565b610d80565b9050610d4d919750610d529295949350610bbc565b610eeb90607f6020939416906105fb565b515103610ef85760200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f32206279746573000000000000000000000000000000000000000000000000006064820152fd5b607f610f8a929316906105fb565b5151601f8116610f9b570160200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f66203332206279746573000000000000000000006064820152fd5b92919093946001019360208510156110bd575b6020611043607f83881a16866105fb565b51510361105f5760206110579601936110ca565b929391929091565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4172726179206c656e677468206d7573742062652033322062797465730000006044820152fd5b6110c56105b3565b611032565b9493909592600091600180960195808301986020809301985b8389106110f65750505050505093929190565b81891a60808116156111b45760fb810361112057505050505061111990836105fb565b5293929190565b9a849b978860fd869d949697999a9c959c146000146111605750906111489392918b8661101f565b9b929b9a919a96909a9b975b019501979092916110e3565b60fc9193959798508092949650146000146111985750928492611188928b958b8e99986110ca565b9b929b9a919a96909a9b97611154565b9a6111ae81939c87958d9799989d949a9d610f7c565b9a611154565b936111ae849582949b989c849694610eda565b93929190602060016111ff9801968188101561120b575b816111ee607f868b1a16856105fb565b510151602482890101520194611218565b92939192602090910191565b6112136105b3565b6111de565b949095929196939660009661122d89856105fb565b51906001808584019b019601975b602095868a101561138457848a1a60808116156113555760fb810361126857505050505050505093929190565b9b8498889d958660fd8a9f9b989e9596979a999e146000146112bc5750602486979861129b9697010152848c89886111c7565b919c9781019095019a91979094019501926001905b0197929390949161123b565b92949650509193955060fc81146000146113045750916112eb918594938960248f988f010152848c8988611218565b919c9781019095019a91979094019501926001906112b0565b9b8860248d83949b9f956113478a61133c8d607f60019b9e9d9c9e169061132b82826105fb565b5151988998899889960101526105fb565b518b610e8485610bbc565b019e019801019a01936112b0565b96869b81929497602483611373999e99607f6001989a9d168c6105fb565b5101519188010152019a01936112b0565b5050505050505093929190565b1561139857565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f28737461746963290000000000000000000000000000000000000000000000006064820152fd5b1561142357565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c6529000000000000000000000000000000000000000000006064820152fd5b60209081818403126100e357805167ffffffffffffffff918282116100e357019083601f830112156100e35781516114de8161049a565b946040926114ee8451978861044c565b828752858088019360051b860101948286116100e357868101935b86851061151b57505050505050505090565b84518381116100e35782019084603f830112156100e3578882015190611540826104c1565b61154c8951918261044c565b828152868984860101116100e35761156d8b949385948b868501910161020f565b815201940193611509565b91908060f81c60ff811461161e5760808116156115f15760fe036115ab575061076b9150602080825183010191016114a7565b610fe06020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838501946115e28587511461141c565b5101845260f31c168301015290565b829150607f90611607602061161a955114611391565b169061161382856105fb565b52826105fb565b5090565b50505090565b9060f81c9060ff821461167b5760209161165c9161164c855185810180911161167357610bca565b61165683836105fb565b526105fb565b51918051604084018184840160045afa5051910152565b610d4d61064d565b505050565b916020809185930101920160045afa50565b910160200190829060400160045afa5056fea26469706673582212202d16beb5a60d0239735f2ab06959bf3b6baecba90639ee8fe0fe0ae82c084a4964736f6c63430008100033",
      "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c908163158ef93e1461006e5750806387258e8e14610065578063de792d5f1461005c5763fc9c8d390361000e576100576103c9565b61000e565b506100576102f5565b506100576100e8565b346100af57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100af5760ff905460a01c16151560805260206080f35b80fd5b9181601f840112156100e35782359167ffffffffffffffff83116100e3576020808501948460051b0101116100e357565b600080fd5b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e35760043573ffffffffffffffffffffffffffffffffffffffff811681036100e35767ffffffffffffffff6024358181116100e3576101549036906004016100b2565b90916044359081116100e35761016e9036906004016100b2565b909361018060005460ff9060a01c1690565b6101e5576101c99073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff00000000000000000000000000000000000000006000541617600055565b816101d057005b610019936101df91369161050a565b9161076e565b60046040517fef34ca5c000000000000000000000000000000000000000000000000000000008152fd5b60005b8381106102225750506000910152565b8181015183820152602001610212565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361026e8151809281875287808801910161020f565b0116010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106102a95750505050505090565b90919293949584806102e5837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a51610232565b9801930193019194939290610299565b5060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e35767ffffffffffffffff6004358181116100e3576103419036906004016100b2565b90916024359081116100e35761035b9036906004016100b2565b92909173ffffffffffffffffffffffffffffffffffffffff60005416330361039f576101df61038f9361039b95369161050a565b60405191829182610275565b0390f35b60046040517f16c618d8000000000000000000000000000000000000000000000000000000008152fd5b50346100e35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e357602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761048d57604052565b61049561041c565b604052565b60209067ffffffffffffffff81116104b4575b60051b0190565b6104bc61041c565b6104ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff81116104fd575b01160190565b61050561041c565b6104f7565b929190926105178461049a565b916040946105278651948561044c565b839581855260208095019160051b8401938385116100e35780925b8584106105525750505050505050565b833567ffffffffffffffff81116100e357820185601f820112156100e35780359161057c836104c1565b6105888651918261044c565b838152878a85850101116100e35760008a858196828097018386013783010152815201930192610542565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91908110156105f35760051b0190565b6104bc6105b3565b6020918151811015610610575b60051b010190565b6106186105b3565b610608565b3d15610648573d9061062e826104c1565b9161063c604051938461044c565b82523d6000602084013e565b606090565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82019182116106aa57565b6106b261064d565b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082019182116106aa57565b604051906040820182811067ffffffffffffffff82111761072c575b604052600782527f556e6b6e6f776e000000000000000000000000000000000000000000000000006020830152565b61073461041c565b6106fd565b73ffffffffffffffffffffffffffffffffffffffff61076b949360609383521660208201528160408201520190610232565b90565b9060005b81811061077f5750505090565b61078a8183856105e3565b604091903560d881901c838116159283610b5a57600101936107ad8587896105e3565b355b60038381168061094e57505060008091602090818616158314610937576107f9907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165af49361082161061d565b945b156108a55750506080161561086b57600192917fff000000000000000000000000000000000000000000000000000000000000006108659260581b1687611624565b01610772565b90600192957fff0000000000000000000000000000000000000000000000000000000000000061089f9360581b1690611578565b93610865565b61090b9250938573ffffffffffffffffffffffffffffffffffffffff95825161092d575b1561091e57905b80511561090f57915b519485947fef3dcb2f000000000000000000000000000000000000000000000000000000008652169060048501610739565b0390fd5b506109186106e1565b916108d9565b6109279061067d565b906108d0565b91604401916108c9565b607f6109479160f81c168c6105fb565b51906107fb565b600181036109dc575050600080916020908186161583146109c557610996907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b815191018273ffffffffffffffffffffffffffffffffffffffff88165af1936109bf61061d565b94610823565b607f6109d59160f81c168c6105fb565b5190610998565b60028103610a6357505060008091602090818616158314610a4c57610a24907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165afa936109bf61061d565b607f610a5c9160f81c168c6105fb565b5190610a26565b03610afc576000809160209081610a7e8d8360f81c906105fb565b51015190828716158414610ae557610abc9060081b7fffffffff0000000000000000000000000000000000000000000000000000000089168e610c19565b915b825192019073ffffffffffffffffffffffffffffffffffffffff88165af1936109bf61061d565b607f610af59160f01c168d6105fb565b5191610abe565b50517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c69642063616c6c74797065000000000000000000000000000000006044820152606490fd5b9379ffffffffffffffffffffffffffffffffffffffffffffffffffff8360281b176107af565b60405190610160820182811067ffffffffffffffff821117610baf575b604052600a8252610140366020840137565b610bb761041c565b610b9d565b90600482018092116106aa57565b90610bd4826104c1565b610be1604051918261044c565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610c0f82946104c1565b0190602036910137565b929192600090818291610c2a610b80565b916060928596865b60209081891015610ec5578b891a60ff8114610d34576080811615610d265760fe8103610cc25750865115610c75575b90600191875101975b0197019695610c32565b9550600190604051610cb981610c8d89858301610275565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261044c565b96909150610c62565b92989197949193909260fd8103610cf35750916001949391610ce5938d8861101f565b989294919790979493610c6b565b60fc8103610d0d5750916001949391610ce5938d886110ca565b610d2090600193969992959a9488610f7c565b97610c6b565b610d20906001939288610eda565b5097985090969194939250610d5291610d4d9150610bbc565b610bca565b97602095868a0152600093849185965b898810610d755750505050505050505050565b889081891015610eb8575b8c838a1a6080811615610e935760fe8103610df1575081610de1826001959460248d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe096010152610dd083610bbc565b610dda8c516106b4565b918c611692565b885101019701975b019695610d62565b929895919260fd8103610e2757509160019991858589868560248c610e189a0101526111c7565b90509891979097940197610de9565b60fc8103610e4957509160019991858589868560248c610e189a010152611218565b92610e8a87602493610e798b859b9e979b610e6a607f60019b1680936105fb565b5151978895850101528c6105fb565b5190610e8485610bbc565b91611680565b01970197610de9565b9060248a85610eaa607f600198979e96168c6105fb565b510151920101520197610de9565b610ec06105b3565b610d80565b9050610d4d919750610d529295949350610bbc565b610eeb90607f6020939416906105fb565b515103610ef85760200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f32206279746573000000000000000000000000000000000000000000000000006064820152fd5b607f610f8a929316906105fb565b5151601f8116610f9b570160200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f66203332206279746573000000000000000000006064820152fd5b92919093946001019360208510156110bd575b6020611043607f83881a16866105fb565b51510361105f5760206110579601936110ca565b929391929091565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4172726179206c656e677468206d7573742062652033322062797465730000006044820152fd5b6110c56105b3565b611032565b9493909592600091600180960195808301986020809301985b8389106110f65750505050505093929190565b81891a60808116156111b45760fb810361112057505050505061111990836105fb565b5293929190565b9a849b978860fd869d949697999a9c959c146000146111605750906111489392918b8661101f565b9b929b9a919a96909a9b975b019501979092916110e3565b60fc9193959798508092949650146000146111985750928492611188928b958b8e99986110ca565b9b929b9a919a96909a9b97611154565b9a6111ae81939c87958d9799989d949a9d610f7c565b9a611154565b936111ae849582949b989c849694610eda565b93929190602060016111ff9801968188101561120b575b816111ee607f868b1a16856105fb565b510151602482890101520194611218565b92939192602090910191565b6112136105b3565b6111de565b949095929196939660009661122d89856105fb565b51906001808584019b019601975b602095868a101561138457848a1a60808116156113555760fb810361126857505050505050505093929190565b9b8498889d958660fd8a9f9b989e9596979a999e146000146112bc5750602486979861129b9697010152848c89886111c7565b919c9781019095019a91979094019501926001905b0197929390949161123b565b92949650509193955060fc81146000146113045750916112eb918594938960248f988f010152848c8988611218565b919c9781019095019a91979094019501926001906112b0565b9b8860248d83949b9f956113478a61133c8d607f60019b9e9d9c9e169061132b82826105fb565b5151988998899889960101526105fb565b518b610e8485610bbc565b019e019801019a01936112b0565b96869b81929497602483611373999e99607f6001989a9d168c6105fb565b5101519188010152019a01936112b0565b5050505050505093929190565b1561139857565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f28737461746963290000000000000000000000000000000000000000000000006064820152fd5b1561142357565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c6529000000000000000000000000000000000000000000006064820152fd5b60209081818403126100e357805167ffffffffffffffff918282116100e357019083601f830112156100e35781516114de8161049a565b946040926114ee8451978861044c565b828752858088019360051b860101948286116100e357868101935b86851061151b57505050505050505090565b84518381116100e35782019084603f830112156100e3578882015190611540826104c1565b61154c8951918261044c565b828152868984860101116100e35761156d8b949385948b868501910161020f565b815201940193611509565b91908060f81c60ff811461161e5760808116156115f15760fe036115ab575061076b9150602080825183010191016114a7565b610fe06020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838501946115e28587511461141c565b5101845260f31c168301015290565b829150607f90611607602061161a955114611391565b169061161382856105fb565b52826105fb565b5090565b50505090565b9060f81c9060ff821461167b5760209161165c9161164c855185810180911161167357610bca565b61165683836105fb565b526105fb565b51918051604084018184840160045afa5051910152565b610d4d61064d565b505050565b916020809185930101920160045afa50565b910160200190829060400160045afa5056fea26469706673582212202d16beb5a60d0239735f2ab06959bf3b6baecba90639ee8fe0fe0ae82c084a4964736f6c63430008100033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {},
          "generatedSources": [],
          "linkReferences": {},
          "object": "60808060405234610016576116da908161001c8239f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c908163158ef93e1461006e5750806387258e8e14610065578063de792d5f1461005c5763fc9c8d390361000e576100576103c9565b61000e565b506100576102f5565b506100576100e8565b346100af57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100af5760ff905460a01c16151560805260206080f35b80fd5b9181601f840112156100e35782359167ffffffffffffffff83116100e3576020808501948460051b0101116100e357565b600080fd5b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e35760043573ffffffffffffffffffffffffffffffffffffffff811681036100e35767ffffffffffffffff6024358181116100e3576101549036906004016100b2565b90916044359081116100e35761016e9036906004016100b2565b909361018060005460ff9060a01c1690565b6101e5576101c99073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff00000000000000000000000000000000000000006000541617600055565b816101d057005b610019936101df91369161050a565b9161076e565b60046040517fef34ca5c000000000000000000000000000000000000000000000000000000008152fd5b60005b8381106102225750506000910152565b8181015183820152602001610212565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361026e8151809281875287808801910161020f565b0116010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106102a95750505050505090565b90919293949584806102e5837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a51610232565b9801930193019194939290610299565b5060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e35767ffffffffffffffff6004358181116100e3576103419036906004016100b2565b90916024359081116100e35761035b9036906004016100b2565b92909173ffffffffffffffffffffffffffffffffffffffff60005416330361039f576101df61038f9361039b95369161050a565b60405191829182610275565b0390f35b60046040517f16c618d8000000000000000000000000000000000000000000000000000000008152fd5b50346100e35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e357602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761048d57604052565b61049561041c565b604052565b60209067ffffffffffffffff81116104b4575b60051b0190565b6104bc61041c565b6104ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff81116104fd575b01160190565b61050561041c565b6104f7565b929190926105178461049a565b916040946105278651948561044c565b839581855260208095019160051b8401938385116100e35780925b8584106105525750505050505050565b833567ffffffffffffffff81116100e357820185601f820112156100e35780359161057c836104c1565b6105888651918261044c565b838152878a85850101116100e35760008a858196828097018386013783010152815201930192610542565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91908110156105f35760051b0190565b6104bc6105b3565b6020918151811015610610575b60051b010190565b6106186105b3565b610608565b3d15610648573d9061062e826104c1565b9161063c604051938461044c565b82523d6000602084013e565b606090565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82019182116106aa57565b6106b261064d565b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082019182116106aa57565b604051906040820182811067ffffffffffffffff82111761072c575b604052600782527f556e6b6e6f776e000000000000000000000000000000000000000000000000006020830152565b61073461041c565b6106fd565b73ffffffffffffffffffffffffffffffffffffffff61076b949360609383521660208201528160408201520190610232565b90565b9060005b81811061077f5750505090565b61078a8183856105e3565b604091903560d881901c838116159283610b5a57600101936107ad8587896105e3565b355b60038381168061094e57505060008091602090818616158314610937576107f9907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165af49361082161061d565b945b156108a55750506080161561086b57600192917fff000000000000000000000000000000000000000000000000000000000000006108659260581b1687611624565b01610772565b90600192957fff0000000000000000000000000000000000000000000000000000000000000061089f9360581b1690611578565b93610865565b61090b9250938573ffffffffffffffffffffffffffffffffffffffff95825161092d575b1561091e57905b80511561090f57915b519485947fef3dcb2f000000000000000000000000000000000000000000000000000000008652169060048501610739565b0390fd5b506109186106e1565b916108d9565b6109279061067d565b906108d0565b91604401916108c9565b607f6109479160f81c168c6105fb565b51906107fb565b600181036109dc575050600080916020908186161583146109c557610996907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b815191018273ffffffffffffffffffffffffffffffffffffffff88165af1936109bf61061d565b94610823565b607f6109d59160f81c168c6105fb565b5190610998565b60028103610a6357505060008091602090818616158314610a4c57610a24907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165afa936109bf61061d565b607f610a5c9160f81c168c6105fb565b5190610a26565b03610afc576000809160209081610a7e8d8360f81c906105fb565b51015190828716158414610ae557610abc9060081b7fffffffff0000000000000000000000000000000000000000000000000000000089168e610c19565b915b825192019073ffffffffffffffffffffffffffffffffffffffff88165af1936109bf61061d565b607f610af59160f01c168d6105fb565b5191610abe565b50517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c69642063616c6c74797065000000000000000000000000000000006044820152606490fd5b9379ffffffffffffffffffffffffffffffffffffffffffffffffffff8360281b176107af565b60405190610160820182811067ffffffffffffffff821117610baf575b604052600a8252610140366020840137565b610bb761041c565b610b9d565b90600482018092116106aa57565b90610bd4826104c1565b610be1604051918261044c565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610c0f82946104c1565b0190602036910137565b929192600090818291610c2a610b80565b916060928596865b60209081891015610ec5578b891a60ff8114610d34576080811615610d265760fe8103610cc25750865115610c75575b90600191875101975b0197019695610c32565b9550600190604051610cb981610c8d89858301610275565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261044c565b96909150610c62565b92989197949193909260fd8103610cf35750916001949391610ce5938d8861101f565b989294919790979493610c6b565b60fc8103610d0d5750916001949391610ce5938d886110ca565b610d2090600193969992959a9488610f7c565b97610c6b565b610d20906001939288610eda565b5097985090969194939250610d5291610d4d9150610bbc565b610bca565b97602095868a0152600093849185965b898810610d755750505050505050505050565b889081891015610eb8575b8c838a1a6080811615610e935760fe8103610df1575081610de1826001959460248d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe096010152610dd083610bbc565b610dda8c516106b4565b918c611692565b885101019701975b019695610d62565b929895919260fd8103610e2757509160019991858589868560248c610e189a0101526111c7565b90509891979097940197610de9565b60fc8103610e4957509160019991858589868560248c610e189a010152611218565b92610e8a87602493610e798b859b9e979b610e6a607f60019b1680936105fb565b5151978895850101528c6105fb565b5190610e8485610bbc565b91611680565b01970197610de9565b9060248a85610eaa607f600198979e96168c6105fb565b510151920101520197610de9565b610ec06105b3565b610d80565b9050610d4d919750610d529295949350610bbc565b610eeb90607f6020939416906105fb565b515103610ef85760200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f32206279746573000000000000000000000000000000000000000000000000006064820152fd5b607f610f8a929316906105fb565b5151601f8116610f9b570160200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f66203332206279746573000000000000000000006064820152fd5b92919093946001019360208510156110bd575b6020611043607f83881a16866105fb565b51510361105f5760206110579601936110ca565b929391929091565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4172726179206c656e677468206d7573742062652033322062797465730000006044820152fd5b6110c56105b3565b611032565b9493909592600091600180960195808301986020809301985b8389106110f65750505050505093929190565b81891a60808116156111b45760fb810361112057505050505061111990836105fb565b5293929190565b9a849b978860fd869d949697999a9c959c146000146111605750906111489392918b8661101f565b9b929b9a919a96909a9b975b019501979092916110e3565b60fc9193959798508092949650146000146111985750928492611188928b958b8e99986110ca565b9b929b9a919a96909a9b97611154565b9a6111ae81939c87958d9799989d949a9d610f7c565b9a611154565b936111ae849582949b989c849694610eda565b93929190602060016111ff9801968188101561120b575b816111ee607f868b1a16856105fb565b510151602482890101520194611218565b92939192602090910191565b6112136105b3565b6111de565b949095929196939660009661122d89856105fb565b51906001808584019b019601975b602095868a101561138457848a1a60808116156113555760fb810361126857505050505050505093929190565b9b8498889d958660fd8a9f9b989e9596979a999e146000146112bc5750602486979861129b9697010152848c89886111c7565b919c9781019095019a91979094019501926001905b0197929390949161123b565b92949650509193955060fc81146000146113045750916112eb918594938960248f988f010152848c8988611218565b919c9781019095019a91979094019501926001906112b0565b9b8860248d83949b9f956113478a61133c8d607f60019b9e9d9c9e169061132b82826105fb565b5151988998899889960101526105fb565b518b610e8485610bbc565b019e019801019a01936112b0565b96869b81929497602483611373999e99607f6001989a9d168c6105fb565b5101519188010152019a01936112b0565b5050505050505093929190565b1561139857565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f28737461746963290000000000000000000000000000000000000000000000006064820152fd5b1561142357565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c6529000000000000000000000000000000000000000000006064820152fd5b60209081818403126100e357805167ffffffffffffffff918282116100e357019083601f830112156100e35781516114de8161049a565b946040926114ee8451978861044c565b828752858088019360051b860101948286116100e357868101935b86851061151b57505050505050505090565b84518381116100e35782019084603f830112156100e3578882015190611540826104c1565b61154c8951918261044c565b828152868984860101116100e35761156d8b949385948b868501910161020f565b815201940193611509565b91908060f81c60ff811461161e5760808116156115f15760fe036115ab575061076b9150602080825183010191016114a7565b610fe06020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838501946115e28587511461141c565b5101845260f31c168301015290565b829150607f90611607602061161a955114611391565b169061161382856105fb565b52826105fb565b5090565b50505090565b9060f81c9060ff821461167b5760209161165c9161164c855185810180911161167357610bca565b61165683836105fb565b526105fb565b51918051604084018184840160045afa5051910152565b610d4d61064d565b505050565b916020809185930101920160045afa50565b910160200190829060400160045afa5056fea26469706673582212202d16beb5a60d0239735f2ab06959bf3b6baecba90639ee8fe0fe0ae82c084a4964736f6c63430008100033",
          "opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x16DA SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1B JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x158EF93E EQ PUSH2 0x6E JUMPI POP DUP1 PUSH4 0x87258E8E EQ PUSH2 0x65 JUMPI DUP1 PUSH4 0xDE792D5F EQ PUSH2 0x5C JUMPI PUSH4 0xFC9C8D39 SUB PUSH2 0xE JUMPI PUSH2 0x57 PUSH2 0x3C9 JUMP JUMPDEST PUSH2 0xE JUMP JUMPDEST POP PUSH2 0x57 PUSH2 0x2F5 JUMP JUMPDEST POP PUSH2 0x57 PUSH2 0xE8 JUMP JUMPDEST CALLVALUE PUSH2 0xAF JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0xAF JUMPI PUSH1 0xFF SWAP1 SLOAD PUSH1 0xA0 SHR AND ISZERO ISZERO PUSH1 0x80 MSTORE PUSH1 0x20 PUSH1 0x80 RETURN JUMPDEST DUP1 REVERT JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xE3 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xE3 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0xE3 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0xE3 JUMPI PUSH1 0x4 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0xE3 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xE3 JUMPI PUSH2 0x154 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xB2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xE3 JUMPI PUSH2 0x16E SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xB2 JUMP JUMPDEST SWAP1 SWAP4 PUSH2 0x180 PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 PUSH1 0xA0 SHR AND SWAP1 JUMP JUMPDEST PUSH2 0x1E5 JUMPI PUSH2 0x1C9 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST DUP2 PUSH2 0x1D0 JUMPI STOP JUMPDEST PUSH2 0x19 SWAP4 PUSH2 0x1DF SWAP2 CALLDATASIZE SWAP2 PUSH2 0x50A JUMP JUMPDEST SWAP2 PUSH2 0x76E JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xEF34CA5C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x222 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x212 JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x20 SWAP4 PUSH2 0x26E DUP2 MLOAD DUP1 SWAP3 DUP2 DUP8 MSTORE DUP8 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x20F JUMP JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 DUP2 PUSH1 0x40 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD SWAP6 ADD SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0x2A9 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 DUP5 DUP1 PUSH2 0x2E5 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP7 PUSH1 0x1 SWAP7 SUB ADD DUP8 MSTORE DUP11 MLOAD PUSH2 0x232 JUMP JUMPDEST SWAP9 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP5 SWAP4 SWAP3 SWAP1 PUSH2 0x299 JUMP JUMPDEST POP PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0xE3 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xE3 JUMPI PUSH2 0x341 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xB2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xE3 JUMPI PUSH2 0x35B SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xB2 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SLOAD AND CALLER SUB PUSH2 0x39F JUMPI PUSH2 0x1DF PUSH2 0x38F SWAP4 PUSH2 0x39B SWAP6 CALLDATASIZE SWAP2 PUSH2 0x50A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x275 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x16C618D800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0xE3 JUMPI PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x48D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x495 PUSH2 0x41C JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4B4 JUMPI JUMPDEST PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH2 0x4BC PUSH2 0x41C JUMP JUMPDEST PUSH2 0x4AD JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x20 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4FD JUMPI JUMPDEST ADD AND ADD SWAP1 JUMP JUMPDEST PUSH2 0x505 PUSH2 0x41C JUMP JUMPDEST PUSH2 0x4F7 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP3 PUSH2 0x517 DUP5 PUSH2 0x49A JUMP JUMPDEST SWAP2 PUSH1 0x40 SWAP5 PUSH2 0x527 DUP7 MLOAD SWAP5 DUP6 PUSH2 0x44C JUMP JUMPDEST DUP4 SWAP6 DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 SWAP6 ADD SWAP2 PUSH1 0x5 SHL DUP5 ADD SWAP4 DUP4 DUP6 GT PUSH2 0xE3 JUMPI DUP1 SWAP3 JUMPDEST DUP6 DUP5 LT PUSH2 0x552 JUMPI POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xE3 JUMPI DUP3 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xE3 JUMPI DUP1 CALLDATALOAD SWAP2 PUSH2 0x57C DUP4 PUSH2 0x4C1 JUMP JUMPDEST PUSH2 0x588 DUP7 MLOAD SWAP2 DUP3 PUSH2 0x44C JUMP JUMPDEST DUP4 DUP2 MSTORE DUP8 DUP11 DUP6 DUP6 ADD ADD GT PUSH2 0xE3 JUMPI PUSH1 0x0 DUP11 DUP6 DUP2 SWAP7 DUP3 DUP1 SWAP8 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP3 PUSH2 0x542 JUMP JUMPDEST POP PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x5F3 JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH2 0x4BC PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x610 JUMPI JUMPDEST PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x618 PUSH2 0x5B3 JUMP JUMPDEST PUSH2 0x608 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x648 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x62E DUP3 PUSH2 0x4C1 JUMP JUMPDEST SWAP2 PUSH2 0x63C PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x44C JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST POP PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 ADD SWAP2 DUP3 GT PUSH2 0x6AA JUMPI JUMP JUMPDEST PUSH2 0x6B2 PUSH2 0x64D JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 ADD SWAP2 DUP3 GT PUSH2 0x6AA JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x40 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x72C JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x7 DUP3 MSTORE PUSH32 0x556E6B6E6F776E00000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0x734 PUSH2 0x41C JUMP JUMPDEST PUSH2 0x6FD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x76B SWAP5 SWAP4 PUSH1 0x60 SWAP4 DUP4 MSTORE AND PUSH1 0x20 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x77F JUMPI POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x78A DUP2 DUP4 DUP6 PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x40 SWAP2 SWAP1 CALLDATALOAD PUSH1 0xD8 DUP2 SWAP1 SHR DUP4 DUP2 AND ISZERO SWAP3 DUP4 PUSH2 0xB5A JUMPI PUSH1 0x1 ADD SWAP4 PUSH2 0x7AD DUP6 DUP8 DUP10 PUSH2 0x5E3 JUMP JUMPDEST CALLDATALOAD JUMPDEST PUSH1 0x3 DUP4 DUP2 AND DUP1 PUSH2 0x94E JUMPI POP POP PUSH1 0x0 DUP1 SWAP2 PUSH1 0x20 SWAP1 DUP2 DUP7 AND ISZERO DUP4 EQ PUSH2 0x937 JUMPI PUSH2 0x7F9 SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP9 AND DUP14 PUSH2 0xC19 JUMP JUMPDEST SWAP1 JUMPDEST DUP2 MLOAD SWAP2 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND GAS DELEGATECALL SWAP4 PUSH2 0x821 PUSH2 0x61D JUMP JUMPDEST SWAP5 JUMPDEST ISZERO PUSH2 0x8A5 JUMPI POP POP PUSH1 0x80 AND ISZERO PUSH2 0x86B JUMPI PUSH1 0x1 SWAP3 SWAP2 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH2 0x865 SWAP3 PUSH1 0x58 SHL AND DUP8 PUSH2 0x1624 JUMP JUMPDEST ADD PUSH2 0x772 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP3 SWAP6 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH2 0x89F SWAP4 PUSH1 0x58 SHL AND SWAP1 PUSH2 0x1578 JUMP JUMPDEST SWAP4 PUSH2 0x865 JUMP JUMPDEST PUSH2 0x90B SWAP3 POP SWAP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP3 MLOAD PUSH2 0x92D JUMPI JUMPDEST ISZERO PUSH2 0x91E JUMPI SWAP1 JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x90F JUMPI SWAP2 JUMPDEST MLOAD SWAP5 DUP6 SWAP5 PUSH32 0xEF3DCB2F00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE AND SWAP1 PUSH1 0x4 DUP6 ADD PUSH2 0x739 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x918 PUSH2 0x6E1 JUMP JUMPDEST SWAP2 PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x927 SWAP1 PUSH2 0x67D JUMP JUMPDEST SWAP1 PUSH2 0x8D0 JUMP JUMPDEST SWAP2 PUSH1 0x44 ADD SWAP2 PUSH2 0x8C9 JUMP JUMPDEST PUSH1 0x7F PUSH2 0x947 SWAP2 PUSH1 0xF8 SHR AND DUP13 PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x7FB JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x9DC JUMPI POP POP PUSH1 0x0 DUP1 SWAP2 PUSH1 0x20 SWAP1 DUP2 DUP7 AND ISZERO DUP4 EQ PUSH2 0x9C5 JUMPI PUSH2 0x996 SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP9 AND DUP14 PUSH2 0xC19 JUMP JUMPDEST SWAP1 JUMPDEST DUP2 MLOAD SWAP2 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND GAS CALL SWAP4 PUSH2 0x9BF PUSH2 0x61D JUMP JUMPDEST SWAP5 PUSH2 0x823 JUMP JUMPDEST PUSH1 0x7F PUSH2 0x9D5 SWAP2 PUSH1 0xF8 SHR AND DUP13 PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x998 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0xA63 JUMPI POP POP PUSH1 0x0 DUP1 SWAP2 PUSH1 0x20 SWAP1 DUP2 DUP7 AND ISZERO DUP4 EQ PUSH2 0xA4C JUMPI PUSH2 0xA24 SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP9 AND DUP14 PUSH2 0xC19 JUMP JUMPDEST SWAP1 JUMPDEST DUP2 MLOAD SWAP2 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND GAS STATICCALL SWAP4 PUSH2 0x9BF PUSH2 0x61D JUMP JUMPDEST PUSH1 0x7F PUSH2 0xA5C SWAP2 PUSH1 0xF8 SHR AND DUP13 PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP1 PUSH2 0xA26 JUMP JUMPDEST SUB PUSH2 0xAFC JUMPI PUSH1 0x0 DUP1 SWAP2 PUSH1 0x20 SWAP1 DUP2 PUSH2 0xA7E DUP14 DUP4 PUSH1 0xF8 SHR SWAP1 PUSH2 0x5FB JUMP JUMPDEST MLOAD ADD MLOAD SWAP1 DUP3 DUP8 AND ISZERO DUP5 EQ PUSH2 0xAE5 JUMPI PUSH2 0xABC SWAP1 PUSH1 0x8 SHL PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP10 AND DUP15 PUSH2 0xC19 JUMP JUMPDEST SWAP2 JUMPDEST DUP3 MLOAD SWAP3 ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND GAS CALL SWAP4 PUSH2 0x9BF PUSH2 0x61D JUMP JUMPDEST PUSH1 0x7F PUSH2 0xAF5 SWAP2 PUSH1 0xF0 SHR AND DUP14 PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP2 PUSH2 0xABE JUMP JUMPDEST POP MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642063616C6C7479706500000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 PUSH1 0x28 SHL OR PUSH2 0x7AF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x160 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xBAF JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0xA DUP3 MSTORE PUSH2 0x140 CALLDATASIZE PUSH1 0x20 DUP5 ADD CALLDATACOPY JUMP JUMPDEST PUSH2 0xBB7 PUSH2 0x41C JUMP JUMPDEST PUSH2 0xB9D JUMP JUMPDEST SWAP1 PUSH1 0x4 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x6AA JUMPI JUMP JUMPDEST SWAP1 PUSH2 0xBD4 DUP3 PUSH2 0x4C1 JUMP JUMPDEST PUSH2 0xBE1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x44C JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH2 0xC0F DUP3 SWAP5 PUSH2 0x4C1 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH1 0x0 SWAP1 DUP2 DUP3 SWAP2 PUSH2 0xC2A PUSH2 0xB80 JUMP JUMPDEST SWAP2 PUSH1 0x60 SWAP3 DUP6 SWAP7 DUP7 JUMPDEST PUSH1 0x20 SWAP1 DUP2 DUP10 LT ISZERO PUSH2 0xEC5 JUMPI DUP12 DUP10 BYTE PUSH1 0xFF DUP2 EQ PUSH2 0xD34 JUMPI PUSH1 0x80 DUP2 AND ISZERO PUSH2 0xD26 JUMPI PUSH1 0xFE DUP2 SUB PUSH2 0xCC2 JUMPI POP DUP7 MLOAD ISZERO PUSH2 0xC75 JUMPI JUMPDEST SWAP1 PUSH1 0x1 SWAP2 DUP8 MLOAD ADD SWAP8 JUMPDEST ADD SWAP8 ADD SWAP7 SWAP6 PUSH2 0xC32 JUMP JUMPDEST SWAP6 POP PUSH1 0x1 SWAP1 PUSH1 0x40 MLOAD PUSH2 0xCB9 DUP2 PUSH2 0xC8D DUP10 DUP6 DUP4 ADD PUSH2 0x275 JUMP JUMPDEST SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x44C JUMP JUMPDEST SWAP7 SWAP1 SWAP2 POP PUSH2 0xC62 JUMP JUMPDEST SWAP3 SWAP9 SWAP2 SWAP8 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 PUSH1 0xFD DUP2 SUB PUSH2 0xCF3 JUMPI POP SWAP2 PUSH1 0x1 SWAP5 SWAP4 SWAP2 PUSH2 0xCE5 SWAP4 DUP14 DUP9 PUSH2 0x101F JUMP JUMPDEST SWAP9 SWAP3 SWAP5 SWAP2 SWAP8 SWAP1 SWAP8 SWAP5 SWAP4 PUSH2 0xC6B JUMP JUMPDEST PUSH1 0xFC DUP2 SUB PUSH2 0xD0D JUMPI POP SWAP2 PUSH1 0x1 SWAP5 SWAP4 SWAP2 PUSH2 0xCE5 SWAP4 DUP14 DUP9 PUSH2 0x10CA JUMP JUMPDEST PUSH2 0xD20 SWAP1 PUSH1 0x1 SWAP4 SWAP7 SWAP10 SWAP3 SWAP6 SWAP11 SWAP5 DUP9 PUSH2 0xF7C JUMP JUMPDEST SWAP8 PUSH2 0xC6B JUMP JUMPDEST PUSH2 0xD20 SWAP1 PUSH1 0x1 SWAP4 SWAP3 DUP9 PUSH2 0xEDA JUMP JUMPDEST POP SWAP8 SWAP9 POP SWAP1 SWAP7 SWAP2 SWAP5 SWAP4 SWAP3 POP PUSH2 0xD52 SWAP2 PUSH2 0xD4D SWAP2 POP PUSH2 0xBBC JUMP JUMPDEST PUSH2 0xBCA JUMP JUMPDEST SWAP8 PUSH1 0x20 SWAP6 DUP7 DUP11 ADD MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP2 DUP6 SWAP7 JUMPDEST DUP10 DUP9 LT PUSH2 0xD75 JUMPI POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP9 SWAP1 DUP2 DUP10 LT ISZERO PUSH2 0xEB8 JUMPI JUMPDEST DUP13 DUP4 DUP11 BYTE PUSH1 0x80 DUP2 AND ISZERO PUSH2 0xE93 JUMPI PUSH1 0xFE DUP2 SUB PUSH2 0xDF1 JUMPI POP DUP2 PUSH2 0xDE1 DUP3 PUSH1 0x1 SWAP6 SWAP5 PUSH1 0x24 DUP14 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP7 ADD ADD MSTORE PUSH2 0xDD0 DUP4 PUSH2 0xBBC JUMP JUMPDEST PUSH2 0xDDA DUP13 MLOAD PUSH2 0x6B4 JUMP JUMPDEST SWAP2 DUP13 PUSH2 0x1692 JUMP JUMPDEST DUP9 MLOAD ADD ADD SWAP8 ADD SWAP8 JUMPDEST ADD SWAP7 SWAP6 PUSH2 0xD62 JUMP JUMPDEST SWAP3 SWAP9 SWAP6 SWAP2 SWAP3 PUSH1 0xFD DUP2 SUB PUSH2 0xE27 JUMPI POP SWAP2 PUSH1 0x1 SWAP10 SWAP2 DUP6 DUP6 DUP10 DUP7 DUP6 PUSH1 0x24 DUP13 PUSH2 0xE18 SWAP11 ADD ADD MSTORE PUSH2 0x11C7 JUMP JUMPDEST SWAP1 POP SWAP9 SWAP2 SWAP8 SWAP1 SWAP8 SWAP5 ADD SWAP8 PUSH2 0xDE9 JUMP JUMPDEST PUSH1 0xFC DUP2 SUB PUSH2 0xE49 JUMPI POP SWAP2 PUSH1 0x1 SWAP10 SWAP2 DUP6 DUP6 DUP10 DUP7 DUP6 PUSH1 0x24 DUP13 PUSH2 0xE18 SWAP11 ADD ADD MSTORE PUSH2 0x1218 JUMP JUMPDEST SWAP3 PUSH2 0xE8A DUP8 PUSH1 0x24 SWAP4 PUSH2 0xE79 DUP12 DUP6 SWAP12 SWAP15 SWAP8 SWAP12 PUSH2 0xE6A PUSH1 0x7F PUSH1 0x1 SWAP12 AND DUP1 SWAP4 PUSH2 0x5FB JUMP JUMPDEST MLOAD MLOAD SWAP8 DUP9 SWAP6 DUP6 ADD ADD MSTORE DUP13 PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP1 PUSH2 0xE84 DUP6 PUSH2 0xBBC JUMP JUMPDEST SWAP2 PUSH2 0x1680 JUMP JUMPDEST ADD SWAP8 ADD SWAP8 PUSH2 0xDE9 JUMP JUMPDEST SWAP1 PUSH1 0x24 DUP11 DUP6 PUSH2 0xEAA PUSH1 0x7F PUSH1 0x1 SWAP9 SWAP8 SWAP15 SWAP7 AND DUP13 PUSH2 0x5FB JUMP JUMPDEST MLOAD ADD MLOAD SWAP3 ADD ADD MSTORE ADD SWAP8 PUSH2 0xDE9 JUMP JUMPDEST PUSH2 0xEC0 PUSH2 0x5B3 JUMP JUMPDEST PUSH2 0xD80 JUMP JUMPDEST SWAP1 POP PUSH2 0xD4D SWAP2 SWAP8 POP PUSH2 0xD52 SWAP3 SWAP6 SWAP5 SWAP4 POP PUSH2 0xBBC JUMP JUMPDEST PUSH2 0xEEB SWAP1 PUSH1 0x7F PUSH1 0x20 SWAP4 SWAP5 AND SWAP1 PUSH2 0x5FB JUMP JUMPDEST MLOAD MLOAD SUB PUSH2 0xEF8 JUMPI PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537461746963207374617465207661726961626C6573206D7573742062652033 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x3220627974657300000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x7F PUSH2 0xF8A SWAP3 SWAP4 AND SWAP1 PUSH2 0x5FB JUMP JUMPDEST MLOAD MLOAD PUSH1 0x1F DUP2 AND PUSH2 0xF9B JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44796E616D6963207374617465207661726961626C6573206D75737420626520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61206D756C7469706C65206F6620333220627974657300000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP3 SWAP2 SWAP1 SWAP4 SWAP5 PUSH1 0x1 ADD SWAP4 PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x10BD JUMPI JUMPDEST PUSH1 0x20 PUSH2 0x1043 PUSH1 0x7F DUP4 DUP9 BYTE AND DUP7 PUSH2 0x5FB JUMP JUMPDEST MLOAD MLOAD SUB PUSH2 0x105F JUMPI PUSH1 0x20 PUSH2 0x1057 SWAP7 ADD SWAP4 PUSH2 0x10CA JUMP JUMPDEST SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4172726179206C656E677468206D757374206265203332206279746573000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x10C5 PUSH2 0x5B3 JUMP JUMPDEST PUSH2 0x1032 JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP6 SWAP3 PUSH1 0x0 SWAP2 PUSH1 0x1 DUP1 SWAP7 ADD SWAP6 DUP1 DUP4 ADD SWAP9 PUSH1 0x20 DUP1 SWAP4 ADD SWAP9 JUMPDEST DUP4 DUP10 LT PUSH2 0x10F6 JUMPI POP POP POP POP POP POP SWAP4 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST DUP2 DUP10 BYTE PUSH1 0x80 DUP2 AND ISZERO PUSH2 0x11B4 JUMPI PUSH1 0xFB DUP2 SUB PUSH2 0x1120 JUMPI POP POP POP POP POP PUSH2 0x1119 SWAP1 DUP4 PUSH2 0x5FB JUMP JUMPDEST MSTORE SWAP4 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP11 DUP5 SWAP12 SWAP8 DUP9 PUSH1 0xFD DUP7 SWAP14 SWAP5 SWAP7 SWAP8 SWAP10 SWAP11 SWAP13 SWAP6 SWAP13 EQ PUSH1 0x0 EQ PUSH2 0x1160 JUMPI POP SWAP1 PUSH2 0x1148 SWAP4 SWAP3 SWAP2 DUP12 DUP7 PUSH2 0x101F JUMP JUMPDEST SWAP12 SWAP3 SWAP12 SWAP11 SWAP2 SWAP11 SWAP7 SWAP1 SWAP11 SWAP12 SWAP8 JUMPDEST ADD SWAP6 ADD SWAP8 SWAP1 SWAP3 SWAP2 PUSH2 0x10E3 JUMP JUMPDEST PUSH1 0xFC SWAP2 SWAP4 SWAP6 SWAP8 SWAP9 POP DUP1 SWAP3 SWAP5 SWAP7 POP EQ PUSH1 0x0 EQ PUSH2 0x1198 JUMPI POP SWAP3 DUP5 SWAP3 PUSH2 0x1188 SWAP3 DUP12 SWAP6 DUP12 DUP15 SWAP10 SWAP9 PUSH2 0x10CA JUMP JUMPDEST SWAP12 SWAP3 SWAP12 SWAP11 SWAP2 SWAP11 SWAP7 SWAP1 SWAP11 SWAP12 SWAP8 PUSH2 0x1154 JUMP JUMPDEST SWAP11 PUSH2 0x11AE DUP2 SWAP4 SWAP13 DUP8 SWAP6 DUP14 SWAP8 SWAP10 SWAP9 SWAP14 SWAP5 SWAP11 SWAP14 PUSH2 0xF7C JUMP JUMPDEST SWAP11 PUSH2 0x1154 JUMP JUMPDEST SWAP4 PUSH2 0x11AE DUP5 SWAP6 DUP3 SWAP5 SWAP12 SWAP9 SWAP13 DUP5 SWAP7 SWAP5 PUSH2 0xEDA JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x20 PUSH1 0x1 PUSH2 0x11FF SWAP9 ADD SWAP7 DUP2 DUP9 LT ISZERO PUSH2 0x120B JUMPI JUMPDEST DUP2 PUSH2 0x11EE PUSH1 0x7F DUP7 DUP12 BYTE AND DUP6 PUSH2 0x5FB JUMP JUMPDEST MLOAD ADD MLOAD PUSH1 0x24 DUP3 DUP10 ADD ADD MSTORE ADD SWAP5 PUSH2 0x1218 JUMP JUMPDEST SWAP3 SWAP4 SWAP2 SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD SWAP2 JUMP JUMPDEST PUSH2 0x1213 PUSH2 0x5B3 JUMP JUMPDEST PUSH2 0x11DE JUMP JUMPDEST SWAP5 SWAP1 SWAP6 SWAP3 SWAP2 SWAP7 SWAP4 SWAP7 PUSH1 0x0 SWAP7 PUSH2 0x122D DUP10 DUP6 PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 DUP1 DUP6 DUP5 ADD SWAP12 ADD SWAP7 ADD SWAP8 JUMPDEST PUSH1 0x20 SWAP6 DUP7 DUP11 LT ISZERO PUSH2 0x1384 JUMPI DUP5 DUP11 BYTE PUSH1 0x80 DUP2 AND ISZERO PUSH2 0x1355 JUMPI PUSH1 0xFB DUP2 SUB PUSH2 0x1268 JUMPI POP POP POP POP POP POP POP POP SWAP4 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP12 DUP5 SWAP9 DUP9 SWAP14 SWAP6 DUP7 PUSH1 0xFD DUP11 SWAP16 SWAP12 SWAP9 SWAP15 SWAP6 SWAP7 SWAP8 SWAP11 SWAP10 SWAP15 EQ PUSH1 0x0 EQ PUSH2 0x12BC JUMPI POP PUSH1 0x24 DUP7 SWAP8 SWAP9 PUSH2 0x129B SWAP7 SWAP8 ADD ADD MSTORE DUP5 DUP13 DUP10 DUP9 PUSH2 0x11C7 JUMP JUMPDEST SWAP2 SWAP13 SWAP8 DUP2 ADD SWAP1 SWAP6 ADD SWAP11 SWAP2 SWAP8 SWAP1 SWAP5 ADD SWAP6 ADD SWAP3 PUSH1 0x1 SWAP1 JUMPDEST ADD SWAP8 SWAP3 SWAP4 SWAP1 SWAP5 SWAP2 PUSH2 0x123B JUMP JUMPDEST SWAP3 SWAP5 SWAP7 POP POP SWAP2 SWAP4 SWAP6 POP PUSH1 0xFC DUP2 EQ PUSH1 0x0 EQ PUSH2 0x1304 JUMPI POP SWAP2 PUSH2 0x12EB SWAP2 DUP6 SWAP5 SWAP4 DUP10 PUSH1 0x24 DUP16 SWAP9 DUP16 ADD ADD MSTORE DUP5 DUP13 DUP10 DUP9 PUSH2 0x1218 JUMP JUMPDEST SWAP2 SWAP13 SWAP8 DUP2 ADD SWAP1 SWAP6 ADD SWAP11 SWAP2 SWAP8 SWAP1 SWAP5 ADD SWAP6 ADD SWAP3 PUSH1 0x1 SWAP1 PUSH2 0x12B0 JUMP JUMPDEST SWAP12 DUP9 PUSH1 0x24 DUP14 DUP4 SWAP5 SWAP12 SWAP16 SWAP6 PUSH2 0x1347 DUP11 PUSH2 0x133C DUP14 PUSH1 0x7F PUSH1 0x1 SWAP12 SWAP15 SWAP14 SWAP13 SWAP15 AND SWAP1 PUSH2 0x132B DUP3 DUP3 PUSH2 0x5FB JUMP JUMPDEST MLOAD MLOAD SWAP9 DUP10 SWAP9 DUP10 SWAP9 DUP10 SWAP7 ADD ADD MSTORE PUSH2 0x5FB JUMP JUMPDEST MLOAD DUP12 PUSH2 0xE84 DUP6 PUSH2 0xBBC JUMP JUMPDEST ADD SWAP15 ADD SWAP9 ADD ADD SWAP11 ADD SWAP4 PUSH2 0x12B0 JUMP JUMPDEST SWAP7 DUP7 SWAP12 DUP2 SWAP3 SWAP5 SWAP8 PUSH1 0x24 DUP4 PUSH2 0x1373 SWAP10 SWAP15 SWAP10 PUSH1 0x7F PUSH1 0x1 SWAP9 SWAP11 SWAP14 AND DUP13 PUSH2 0x5FB JUMP JUMPDEST MLOAD ADD MLOAD SWAP2 DUP9 ADD ADD MSTORE ADD SWAP11 ADD SWAP4 PUSH2 0x12B0 JUMP JUMPDEST POP POP POP POP POP POP POP SWAP4 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1398 JUMPI JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F6E652072657475726E2076616C7565207065726D697474656420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2873746174696329000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x1423 JUMPI JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F6E652072657475726E2076616C7565207065726D697474656420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x287661726961626C652900000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 DUP2 DUP5 SUB SLT PUSH2 0xE3 JUMPI DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP3 GT PUSH2 0xE3 JUMPI ADD SWAP1 DUP4 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xE3 JUMPI DUP2 MLOAD PUSH2 0x14DE DUP2 PUSH2 0x49A JUMP JUMPDEST SWAP5 PUSH1 0x40 SWAP3 PUSH2 0x14EE DUP5 MLOAD SWAP8 DUP9 PUSH2 0x44C JUMP JUMPDEST DUP3 DUP8 MSTORE DUP6 DUP1 DUP9 ADD SWAP4 PUSH1 0x5 SHL DUP7 ADD ADD SWAP5 DUP3 DUP7 GT PUSH2 0xE3 JUMPI DUP7 DUP2 ADD SWAP4 JUMPDEST DUP7 DUP6 LT PUSH2 0x151B JUMPI POP POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 MLOAD DUP4 DUP2 GT PUSH2 0xE3 JUMPI DUP3 ADD SWAP1 DUP5 PUSH1 0x3F DUP4 ADD SLT ISZERO PUSH2 0xE3 JUMPI DUP9 DUP3 ADD MLOAD SWAP1 PUSH2 0x1540 DUP3 PUSH2 0x4C1 JUMP JUMPDEST PUSH2 0x154C DUP10 MLOAD SWAP2 DUP3 PUSH2 0x44C JUMP JUMPDEST DUP3 DUP2 MSTORE DUP7 DUP10 DUP5 DUP7 ADD ADD GT PUSH2 0xE3 JUMPI PUSH2 0x156D DUP12 SWAP5 SWAP4 DUP6 SWAP5 DUP12 DUP7 DUP6 ADD SWAP2 ADD PUSH2 0x20F JUMP JUMPDEST DUP2 MSTORE ADD SWAP5 ADD SWAP4 PUSH2 0x1509 JUMP JUMPDEST SWAP2 SWAP1 DUP1 PUSH1 0xF8 SHR PUSH1 0xFF DUP2 EQ PUSH2 0x161E JUMPI PUSH1 0x80 DUP2 AND ISZERO PUSH2 0x15F1 JUMPI PUSH1 0xFE SUB PUSH2 0x15AB JUMPI POP PUSH2 0x76B SWAP2 POP PUSH1 0x20 DUP1 DUP3 MLOAD DUP4 ADD ADD SWAP2 ADD PUSH2 0x14A7 JUMP JUMPDEST PUSH2 0xFE0 PUSH1 0x20 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP6 ADD SWAP5 PUSH2 0x15E2 DUP6 DUP8 MLOAD EQ PUSH2 0x141C JUMP JUMPDEST MLOAD ADD DUP5 MSTORE PUSH1 0xF3 SHR AND DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP3 SWAP2 POP PUSH1 0x7F SWAP1 PUSH2 0x1607 PUSH1 0x20 PUSH2 0x161A SWAP6 MLOAD EQ PUSH2 0x1391 JUMP JUMPDEST AND SWAP1 PUSH2 0x1613 DUP3 DUP6 PUSH2 0x5FB JUMP JUMPDEST MSTORE DUP3 PUSH2 0x5FB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xF8 SHR SWAP1 PUSH1 0xFF DUP3 EQ PUSH2 0x167B JUMPI PUSH1 0x20 SWAP2 PUSH2 0x165C SWAP2 PUSH2 0x164C DUP6 MLOAD DUP6 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x1673 JUMPI PUSH2 0xBCA JUMP JUMPDEST PUSH2 0x1656 DUP4 DUP4 PUSH2 0x5FB JUMP JUMPDEST MSTORE PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP2 DUP1 MLOAD PUSH1 0x40 DUP5 ADD DUP2 DUP5 DUP5 ADD PUSH1 0x4 GAS STATICCALL POP MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xD4D PUSH2 0x64D JUMP JUMPDEST POP POP POP JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP1 SWAP2 DUP6 SWAP4 ADD ADD SWAP3 ADD PUSH1 0x4 GAS STATICCALL POP JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD SWAP1 DUP3 SWAP1 PUSH1 0x40 ADD PUSH1 0x4 GAS STATICCALL POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D AND 0xBE 0xB5 0xA6 0xD MUL CODECOPY PUSH20 0x5F2AB06959BF3B6BAECBA90639EE8FE0FE0AE82C ADDMOD 0x4A 0x49 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ",
          "sourceMap": "117:839:2:-:0;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "abi_decode_array_bytes32_dyn_calldata": {
              "entryPoint": 178,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_array_bytes_dyn_fromMemory": {
              "entryPoint": 5287,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_available_length_array_bytes_dyn": {
              "entryPoint": 1290,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_array_bytes_dyn": {
              "entryPoint": 629,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_bytes": {
              "entryPoint": 562,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_stringliteral_c7fd": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_uint256_address_string": {
              "entryPoint": 1849,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "allocate_and_zero_memory_array_array_uint256_dyn": {
              "entryPoint": 2944,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "allocate_and_zero_memory_array_bytes": {
              "entryPoint": 3018,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_allocation_size_array_bytes_dyn": {
              "entryPoint": 1178,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_allocation_size_bytes": {
              "entryPoint": 1217,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "calldata_array_index_access_bytes32_dyn_calldata": {
              "entryPoint": 1507,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "checked_add_uint256": {
              "entryPoint": 3004,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_sub_uint256": {
              "entryPoint": 1716,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_sub_uint256_5802": {
              "entryPoint": 1661,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_literal_to_memory_6ff165d3fe0272c13129fc9e1aecd998364a5fdcad04c6ae84a7d1dfc3d06a17": {
              "entryPoint": 1761,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 527,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "external_fun_caller": {
              "entryPoint": 969,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_execute": {
              "entryPoint": 757,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_initialize": {
              "entryPoint": 232,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "extract_from_storage_value_offsett_bool": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_returndata": {
              "entryPoint": 1565,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "finalize_allocation": {
              "entryPoint": 1100,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "fun_buildInputs": {
              "entryPoint": 3097,
              "id": 366,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "fun_encodeDynamicArray": {
              "entryPoint": 4551,
              "id": 748,
              "parameterSlots": 7,
              "returnSlots": 4
            },
            "fun_encodeDynamicTuple": {
              "entryPoint": 4632,
              "id": 991,
              "parameterSlots": 7,
              "returnSlots": 4
            },
            "fun_execute": {
              "entryPoint": 1902,
              "id": 1586,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "fun_memcpy": {
              "entryPoint": 5760,
              "id": 1135,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "fun_memcpy_5811": {
              "entryPoint": 5778,
              "id": 1135,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "fun_setupDynamicArray": {
              "entryPoint": 4127,
              "id": 503,
              "parameterSlots": 6,
              "returnSlots": 4
            },
            "fun_setupDynamicTuple": {
              "entryPoint": 4298,
              "id": 663,
              "parameterSlots": 6,
              "returnSlots": 4
            },
            "fun_setupDynamicVariable": {
              "entryPoint": 3964,
              "id": 438,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "fun_setupStaticVariable": {
              "entryPoint": 3802,
              "id": 398,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "fun_writeOutputs": {
              "entryPoint": 5496,
              "id": 1073,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "fun_writeTuple": {
              "entryPoint": 5668,
              "id": 1120,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "memory_array_index_access_bytes_dyn": {
              "entryPoint": 1531,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 1613,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 1459,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 1052,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "require_helper_stringliteral_b0fc": {
              "entryPoint": 5009,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "require_helper_stringliteral_f485": {
              "entryPoint": 5148,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "update_storage_value_offsett_address_to_address": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c908163158ef93e1461006e5750806387258e8e14610065578063de792d5f1461005c5763fc9c8d390361000e576100576103c9565b61000e565b506100576102f5565b506100576100e8565b346100af57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100af5760ff905460a01c16151560805260206080f35b80fd5b9181601f840112156100e35782359167ffffffffffffffff83116100e3576020808501948460051b0101116100e357565b600080fd5b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e35760043573ffffffffffffffffffffffffffffffffffffffff811681036100e35767ffffffffffffffff6024358181116100e3576101549036906004016100b2565b90916044359081116100e35761016e9036906004016100b2565b909361018060005460ff9060a01c1690565b6101e5576101c99073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff00000000000000000000000000000000000000006000541617600055565b816101d057005b610019936101df91369161050a565b9161076e565b60046040517fef34ca5c000000000000000000000000000000000000000000000000000000008152fd5b60005b8381106102225750506000910152565b8181015183820152602001610212565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361026e8151809281875287808801910161020f565b0116010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106102a95750505050505090565b90919293949584806102e5837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a51610232565b9801930193019194939290610299565b5060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e35767ffffffffffffffff6004358181116100e3576103419036906004016100b2565b90916024359081116100e35761035b9036906004016100b2565b92909173ffffffffffffffffffffffffffffffffffffffff60005416330361039f576101df61038f9361039b95369161050a565b60405191829182610275565b0390f35b60046040517f16c618d8000000000000000000000000000000000000000000000000000000008152fd5b50346100e35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e357602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761048d57604052565b61049561041c565b604052565b60209067ffffffffffffffff81116104b4575b60051b0190565b6104bc61041c565b6104ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff81116104fd575b01160190565b61050561041c565b6104f7565b929190926105178461049a565b916040946105278651948561044c565b839581855260208095019160051b8401938385116100e35780925b8584106105525750505050505050565b833567ffffffffffffffff81116100e357820185601f820112156100e35780359161057c836104c1565b6105888651918261044c565b838152878a85850101116100e35760008a858196828097018386013783010152815201930192610542565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91908110156105f35760051b0190565b6104bc6105b3565b6020918151811015610610575b60051b010190565b6106186105b3565b610608565b3d15610648573d9061062e826104c1565b9161063c604051938461044c565b82523d6000602084013e565b606090565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82019182116106aa57565b6106b261064d565b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082019182116106aa57565b604051906040820182811067ffffffffffffffff82111761072c575b604052600782527f556e6b6e6f776e000000000000000000000000000000000000000000000000006020830152565b61073461041c565b6106fd565b73ffffffffffffffffffffffffffffffffffffffff61076b949360609383521660208201528160408201520190610232565b90565b9060005b81811061077f5750505090565b61078a8183856105e3565b604091903560d881901c838116159283610b5a57600101936107ad8587896105e3565b355b60038381168061094e57505060008091602090818616158314610937576107f9907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165af49361082161061d565b945b156108a55750506080161561086b57600192917fff000000000000000000000000000000000000000000000000000000000000006108659260581b1687611624565b01610772565b90600192957fff0000000000000000000000000000000000000000000000000000000000000061089f9360581b1690611578565b93610865565b61090b9250938573ffffffffffffffffffffffffffffffffffffffff95825161092d575b1561091e57905b80511561090f57915b519485947fef3dcb2f000000000000000000000000000000000000000000000000000000008652169060048501610739565b0390fd5b506109186106e1565b916108d9565b6109279061067d565b906108d0565b91604401916108c9565b607f6109479160f81c168c6105fb565b51906107fb565b600181036109dc575050600080916020908186161583146109c557610996907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b815191018273ffffffffffffffffffffffffffffffffffffffff88165af1936109bf61061d565b94610823565b607f6109d59160f81c168c6105fb565b5190610998565b60028103610a6357505060008091602090818616158314610a4c57610a24907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165afa936109bf61061d565b607f610a5c9160f81c168c6105fb565b5190610a26565b03610afc576000809160209081610a7e8d8360f81c906105fb565b51015190828716158414610ae557610abc9060081b7fffffffff0000000000000000000000000000000000000000000000000000000089168e610c19565b915b825192019073ffffffffffffffffffffffffffffffffffffffff88165af1936109bf61061d565b607f610af59160f01c168d6105fb565b5191610abe565b50517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c69642063616c6c74797065000000000000000000000000000000006044820152606490fd5b9379ffffffffffffffffffffffffffffffffffffffffffffffffffff8360281b176107af565b60405190610160820182811067ffffffffffffffff821117610baf575b604052600a8252610140366020840137565b610bb761041c565b610b9d565b90600482018092116106aa57565b90610bd4826104c1565b610be1604051918261044c565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610c0f82946104c1565b0190602036910137565b929192600090818291610c2a610b80565b916060928596865b60209081891015610ec5578b891a60ff8114610d34576080811615610d265760fe8103610cc25750865115610c75575b90600191875101975b0197019695610c32565b9550600190604051610cb981610c8d89858301610275565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261044c565b96909150610c62565b92989197949193909260fd8103610cf35750916001949391610ce5938d8861101f565b989294919790979493610c6b565b60fc8103610d0d5750916001949391610ce5938d886110ca565b610d2090600193969992959a9488610f7c565b97610c6b565b610d20906001939288610eda565b5097985090969194939250610d5291610d4d9150610bbc565b610bca565b97602095868a0152600093849185965b898810610d755750505050505050505050565b889081891015610eb8575b8c838a1a6080811615610e935760fe8103610df1575081610de1826001959460248d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe096010152610dd083610bbc565b610dda8c516106b4565b918c611692565b885101019701975b019695610d62565b929895919260fd8103610e2757509160019991858589868560248c610e189a0101526111c7565b90509891979097940197610de9565b60fc8103610e4957509160019991858589868560248c610e189a010152611218565b92610e8a87602493610e798b859b9e979b610e6a607f60019b1680936105fb565b5151978895850101528c6105fb565b5190610e8485610bbc565b91611680565b01970197610de9565b9060248a85610eaa607f600198979e96168c6105fb565b510151920101520197610de9565b610ec06105b3565b610d80565b9050610d4d919750610d529295949350610bbc565b610eeb90607f6020939416906105fb565b515103610ef85760200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f32206279746573000000000000000000000000000000000000000000000000006064820152fd5b607f610f8a929316906105fb565b5151601f8116610f9b570160200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f66203332206279746573000000000000000000006064820152fd5b92919093946001019360208510156110bd575b6020611043607f83881a16866105fb565b51510361105f5760206110579601936110ca565b929391929091565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4172726179206c656e677468206d7573742062652033322062797465730000006044820152fd5b6110c56105b3565b611032565b9493909592600091600180960195808301986020809301985b8389106110f65750505050505093929190565b81891a60808116156111b45760fb810361112057505050505061111990836105fb565b5293929190565b9a849b978860fd869d949697999a9c959c146000146111605750906111489392918b8661101f565b9b929b9a919a96909a9b975b019501979092916110e3565b60fc9193959798508092949650146000146111985750928492611188928b958b8e99986110ca565b9b929b9a919a96909a9b97611154565b9a6111ae81939c87958d9799989d949a9d610f7c565b9a611154565b936111ae849582949b989c849694610eda565b93929190602060016111ff9801968188101561120b575b816111ee607f868b1a16856105fb565b510151602482890101520194611218565b92939192602090910191565b6112136105b3565b6111de565b949095929196939660009661122d89856105fb565b51906001808584019b019601975b602095868a101561138457848a1a60808116156113555760fb810361126857505050505050505093929190565b9b8498889d958660fd8a9f9b989e9596979a999e146000146112bc5750602486979861129b9697010152848c89886111c7565b919c9781019095019a91979094019501926001905b0197929390949161123b565b92949650509193955060fc81146000146113045750916112eb918594938960248f988f010152848c8988611218565b919c9781019095019a91979094019501926001906112b0565b9b8860248d83949b9f956113478a61133c8d607f60019b9e9d9c9e169061132b82826105fb565b5151988998899889960101526105fb565b518b610e8485610bbc565b019e019801019a01936112b0565b96869b81929497602483611373999e99607f6001989a9d168c6105fb565b5101519188010152019a01936112b0565b5050505050505093929190565b1561139857565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f28737461746963290000000000000000000000000000000000000000000000006064820152fd5b1561142357565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c6529000000000000000000000000000000000000000000006064820152fd5b60209081818403126100e357805167ffffffffffffffff918282116100e357019083601f830112156100e35781516114de8161049a565b946040926114ee8451978861044c565b828752858088019360051b860101948286116100e357868101935b86851061151b57505050505050505090565b84518381116100e35782019084603f830112156100e3578882015190611540826104c1565b61154c8951918261044c565b828152868984860101116100e35761156d8b949385948b868501910161020f565b815201940193611509565b91908060f81c60ff811461161e5760808116156115f15760fe036115ab575061076b9150602080825183010191016114a7565b610fe06020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838501946115e28587511461141c565b5101845260f31c168301015290565b829150607f90611607602061161a955114611391565b169061161382856105fb565b52826105fb565b5090565b50505090565b9060f81c9060ff821461167b5760209161165c9161164c855185810180911161167357610bca565b61165683836105fb565b526105fb565b51918051604084018184840160045afa5051910152565b610d4d61064d565b505050565b916020809185930101920160045afa50565b910160200190829060400160045afa5056fea26469706673582212202d16beb5a60d0239735f2ab06959bf3b6baecba90639ee8fe0fe0ae82c084a4964736f6c63430008100033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1B JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x158EF93E EQ PUSH2 0x6E JUMPI POP DUP1 PUSH4 0x87258E8E EQ PUSH2 0x65 JUMPI DUP1 PUSH4 0xDE792D5F EQ PUSH2 0x5C JUMPI PUSH4 0xFC9C8D39 SUB PUSH2 0xE JUMPI PUSH2 0x57 PUSH2 0x3C9 JUMP JUMPDEST PUSH2 0xE JUMP JUMPDEST POP PUSH2 0x57 PUSH2 0x2F5 JUMP JUMPDEST POP PUSH2 0x57 PUSH2 0xE8 JUMP JUMPDEST CALLVALUE PUSH2 0xAF JUMPI DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0xAF JUMPI PUSH1 0xFF SWAP1 SLOAD PUSH1 0xA0 SHR AND ISZERO ISZERO PUSH1 0x80 MSTORE PUSH1 0x20 PUSH1 0x80 RETURN JUMPDEST DUP1 REVERT JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xE3 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xE3 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0xE3 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0xE3 JUMPI PUSH1 0x4 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0xE3 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xE3 JUMPI PUSH2 0x154 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xB2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xE3 JUMPI PUSH2 0x16E SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xB2 JUMP JUMPDEST SWAP1 SWAP4 PUSH2 0x180 PUSH1 0x0 SLOAD PUSH1 0xFF SWAP1 PUSH1 0xA0 SHR AND SWAP1 JUMP JUMPDEST PUSH2 0x1E5 JUMPI PUSH2 0x1C9 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE JUMP JUMPDEST DUP2 PUSH2 0x1D0 JUMPI STOP JUMPDEST PUSH2 0x19 SWAP4 PUSH2 0x1DF SWAP2 CALLDATASIZE SWAP2 PUSH2 0x50A JUMP JUMPDEST SWAP2 PUSH2 0x76E JUMP JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0xEF34CA5C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x222 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x212 JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x20 SWAP4 PUSH2 0x26E DUP2 MLOAD DUP1 SWAP3 DUP2 DUP8 MSTORE DUP8 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x20F JUMP JUMPDEST ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 DUP2 PUSH1 0x40 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD SWAP6 ADD SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0x2A9 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 DUP5 DUP1 PUSH2 0x2E5 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP7 PUSH1 0x1 SWAP7 SUB ADD DUP8 MSTORE DUP11 MLOAD PUSH2 0x232 JUMP JUMPDEST SWAP9 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP5 SWAP4 SWAP3 SWAP1 PUSH2 0x299 JUMP JUMPDEST POP PUSH1 0x40 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0xE3 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0xE3 JUMPI PUSH2 0x341 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xB2 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xE3 JUMPI PUSH2 0x35B SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xB2 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SLOAD AND CALLER SUB PUSH2 0x39F JUMPI PUSH2 0x1DF PUSH2 0x38F SWAP4 PUSH2 0x39B SWAP6 CALLDATASIZE SWAP2 PUSH2 0x50A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x275 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 PUSH1 0x40 MLOAD PUSH32 0x16C618D800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0xE3 JUMPI PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC CALLDATASIZE ADD SLT PUSH2 0xE3 JUMPI PUSH1 0x20 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x48D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x495 PUSH2 0x41C JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4B4 JUMPI JUMPDEST PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH2 0x4BC PUSH2 0x41C JUMP JUMPDEST PUSH2 0x4AD JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F PUSH1 0x20 SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x4FD JUMPI JUMPDEST ADD AND ADD SWAP1 JUMP JUMPDEST PUSH2 0x505 PUSH2 0x41C JUMP JUMPDEST PUSH2 0x4F7 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 SWAP3 PUSH2 0x517 DUP5 PUSH2 0x49A JUMP JUMPDEST SWAP2 PUSH1 0x40 SWAP5 PUSH2 0x527 DUP7 MLOAD SWAP5 DUP6 PUSH2 0x44C JUMP JUMPDEST DUP4 SWAP6 DUP2 DUP6 MSTORE PUSH1 0x20 DUP1 SWAP6 ADD SWAP2 PUSH1 0x5 SHL DUP5 ADD SWAP4 DUP4 DUP6 GT PUSH2 0xE3 JUMPI DUP1 SWAP3 JUMPDEST DUP6 DUP5 LT PUSH2 0x552 JUMPI POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xE3 JUMPI DUP3 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0xE3 JUMPI DUP1 CALLDATALOAD SWAP2 PUSH2 0x57C DUP4 PUSH2 0x4C1 JUMP JUMPDEST PUSH2 0x588 DUP7 MLOAD SWAP2 DUP3 PUSH2 0x44C JUMP JUMPDEST DUP4 DUP2 MSTORE DUP8 DUP11 DUP6 DUP6 ADD ADD GT PUSH2 0xE3 JUMPI PUSH1 0x0 DUP11 DUP6 DUP2 SWAP7 DUP3 DUP1 SWAP8 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP3 PUSH2 0x542 JUMP JUMPDEST POP PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x5F3 JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH2 0x4BC PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x20 SWAP2 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x610 JUMPI JUMPDEST PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x618 PUSH2 0x5B3 JUMP JUMPDEST PUSH2 0x608 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x648 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x62E DUP3 PUSH2 0x4C1 JUMP JUMPDEST SWAP2 PUSH2 0x63C PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x44C JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST POP PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 ADD SWAP2 DUP3 GT PUSH2 0x6AA JUMPI JUMP JUMPDEST PUSH2 0x6B2 PUSH2 0x64D JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 ADD SWAP2 DUP3 GT PUSH2 0x6AA JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x40 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x72C JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x7 DUP3 MSTORE PUSH32 0x556E6B6E6F776E00000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH2 0x734 PUSH2 0x41C JUMP JUMPDEST PUSH2 0x6FD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x76B SWAP5 SWAP4 PUSH1 0x60 SWAP4 DUP4 MSTORE AND PUSH1 0x20 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x232 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x77F JUMPI POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x78A DUP2 DUP4 DUP6 PUSH2 0x5E3 JUMP JUMPDEST PUSH1 0x40 SWAP2 SWAP1 CALLDATALOAD PUSH1 0xD8 DUP2 SWAP1 SHR DUP4 DUP2 AND ISZERO SWAP3 DUP4 PUSH2 0xB5A JUMPI PUSH1 0x1 ADD SWAP4 PUSH2 0x7AD DUP6 DUP8 DUP10 PUSH2 0x5E3 JUMP JUMPDEST CALLDATALOAD JUMPDEST PUSH1 0x3 DUP4 DUP2 AND DUP1 PUSH2 0x94E JUMPI POP POP PUSH1 0x0 DUP1 SWAP2 PUSH1 0x20 SWAP1 DUP2 DUP7 AND ISZERO DUP4 EQ PUSH2 0x937 JUMPI PUSH2 0x7F9 SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP9 AND DUP14 PUSH2 0xC19 JUMP JUMPDEST SWAP1 JUMPDEST DUP2 MLOAD SWAP2 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND GAS DELEGATECALL SWAP4 PUSH2 0x821 PUSH2 0x61D JUMP JUMPDEST SWAP5 JUMPDEST ISZERO PUSH2 0x8A5 JUMPI POP POP PUSH1 0x80 AND ISZERO PUSH2 0x86B JUMPI PUSH1 0x1 SWAP3 SWAP2 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH2 0x865 SWAP3 PUSH1 0x58 SHL AND DUP8 PUSH2 0x1624 JUMP JUMPDEST ADD PUSH2 0x772 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP3 SWAP6 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 PUSH2 0x89F SWAP4 PUSH1 0x58 SHL AND SWAP1 PUSH2 0x1578 JUMP JUMPDEST SWAP4 PUSH2 0x865 JUMP JUMPDEST PUSH2 0x90B SWAP3 POP SWAP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP3 MLOAD PUSH2 0x92D JUMPI JUMPDEST ISZERO PUSH2 0x91E JUMPI SWAP1 JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x90F JUMPI SWAP2 JUMPDEST MLOAD SWAP5 DUP6 SWAP5 PUSH32 0xEF3DCB2F00000000000000000000000000000000000000000000000000000000 DUP7 MSTORE AND SWAP1 PUSH1 0x4 DUP6 ADD PUSH2 0x739 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x918 PUSH2 0x6E1 JUMP JUMPDEST SWAP2 PUSH2 0x8D9 JUMP JUMPDEST PUSH2 0x927 SWAP1 PUSH2 0x67D JUMP JUMPDEST SWAP1 PUSH2 0x8D0 JUMP JUMPDEST SWAP2 PUSH1 0x44 ADD SWAP2 PUSH2 0x8C9 JUMP JUMPDEST PUSH1 0x7F PUSH2 0x947 SWAP2 PUSH1 0xF8 SHR AND DUP13 PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x7FB JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x9DC JUMPI POP POP PUSH1 0x0 DUP1 SWAP2 PUSH1 0x20 SWAP1 DUP2 DUP7 AND ISZERO DUP4 EQ PUSH2 0x9C5 JUMPI PUSH2 0x996 SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP9 AND DUP14 PUSH2 0xC19 JUMP JUMPDEST SWAP1 JUMPDEST DUP2 MLOAD SWAP2 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND GAS CALL SWAP4 PUSH2 0x9BF PUSH2 0x61D JUMP JUMPDEST SWAP5 PUSH2 0x823 JUMP JUMPDEST PUSH1 0x7F PUSH2 0x9D5 SWAP2 PUSH1 0xF8 SHR AND DUP13 PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x998 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0xA63 JUMPI POP POP PUSH1 0x0 DUP1 SWAP2 PUSH1 0x20 SWAP1 DUP2 DUP7 AND ISZERO DUP4 EQ PUSH2 0xA4C JUMPI PUSH2 0xA24 SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP9 AND DUP14 PUSH2 0xC19 JUMP JUMPDEST SWAP1 JUMPDEST DUP2 MLOAD SWAP2 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND GAS STATICCALL SWAP4 PUSH2 0x9BF PUSH2 0x61D JUMP JUMPDEST PUSH1 0x7F PUSH2 0xA5C SWAP2 PUSH1 0xF8 SHR AND DUP13 PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP1 PUSH2 0xA26 JUMP JUMPDEST SUB PUSH2 0xAFC JUMPI PUSH1 0x0 DUP1 SWAP2 PUSH1 0x20 SWAP1 DUP2 PUSH2 0xA7E DUP14 DUP4 PUSH1 0xF8 SHR SWAP1 PUSH2 0x5FB JUMP JUMPDEST MLOAD ADD MLOAD SWAP1 DUP3 DUP8 AND ISZERO DUP5 EQ PUSH2 0xAE5 JUMPI PUSH2 0xABC SWAP1 PUSH1 0x8 SHL PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP10 AND DUP15 PUSH2 0xC19 JUMP JUMPDEST SWAP2 JUMPDEST DUP3 MLOAD SWAP3 ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND GAS CALL SWAP4 PUSH2 0x9BF PUSH2 0x61D JUMP JUMPDEST PUSH1 0x7F PUSH2 0xAF5 SWAP2 PUSH1 0xF0 SHR AND DUP14 PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP2 PUSH2 0xABE JUMP JUMPDEST POP MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642063616C6C7479706500000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP4 PUSH26 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 PUSH1 0x28 SHL OR PUSH2 0x7AF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x160 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xBAF JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0xA DUP3 MSTORE PUSH2 0x140 CALLDATASIZE PUSH1 0x20 DUP5 ADD CALLDATACOPY JUMP JUMPDEST PUSH2 0xBB7 PUSH2 0x41C JUMP JUMPDEST PUSH2 0xB9D JUMP JUMPDEST SWAP1 PUSH1 0x4 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x6AA JUMPI JUMP JUMPDEST SWAP1 PUSH2 0xBD4 DUP3 PUSH2 0x4C1 JUMP JUMPDEST PUSH2 0xBE1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x44C JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH2 0xC0F DUP3 SWAP5 PUSH2 0x4C1 JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH1 0x0 SWAP1 DUP2 DUP3 SWAP2 PUSH2 0xC2A PUSH2 0xB80 JUMP JUMPDEST SWAP2 PUSH1 0x60 SWAP3 DUP6 SWAP7 DUP7 JUMPDEST PUSH1 0x20 SWAP1 DUP2 DUP10 LT ISZERO PUSH2 0xEC5 JUMPI DUP12 DUP10 BYTE PUSH1 0xFF DUP2 EQ PUSH2 0xD34 JUMPI PUSH1 0x80 DUP2 AND ISZERO PUSH2 0xD26 JUMPI PUSH1 0xFE DUP2 SUB PUSH2 0xCC2 JUMPI POP DUP7 MLOAD ISZERO PUSH2 0xC75 JUMPI JUMPDEST SWAP1 PUSH1 0x1 SWAP2 DUP8 MLOAD ADD SWAP8 JUMPDEST ADD SWAP8 ADD SWAP7 SWAP6 PUSH2 0xC32 JUMP JUMPDEST SWAP6 POP PUSH1 0x1 SWAP1 PUSH1 0x40 MLOAD PUSH2 0xCB9 DUP2 PUSH2 0xC8D DUP10 DUP6 DUP4 ADD PUSH2 0x275 JUMP JUMPDEST SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x44C JUMP JUMPDEST SWAP7 SWAP1 SWAP2 POP PUSH2 0xC62 JUMP JUMPDEST SWAP3 SWAP9 SWAP2 SWAP8 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 PUSH1 0xFD DUP2 SUB PUSH2 0xCF3 JUMPI POP SWAP2 PUSH1 0x1 SWAP5 SWAP4 SWAP2 PUSH2 0xCE5 SWAP4 DUP14 DUP9 PUSH2 0x101F JUMP JUMPDEST SWAP9 SWAP3 SWAP5 SWAP2 SWAP8 SWAP1 SWAP8 SWAP5 SWAP4 PUSH2 0xC6B JUMP JUMPDEST PUSH1 0xFC DUP2 SUB PUSH2 0xD0D JUMPI POP SWAP2 PUSH1 0x1 SWAP5 SWAP4 SWAP2 PUSH2 0xCE5 SWAP4 DUP14 DUP9 PUSH2 0x10CA JUMP JUMPDEST PUSH2 0xD20 SWAP1 PUSH1 0x1 SWAP4 SWAP7 SWAP10 SWAP3 SWAP6 SWAP11 SWAP5 DUP9 PUSH2 0xF7C JUMP JUMPDEST SWAP8 PUSH2 0xC6B JUMP JUMPDEST PUSH2 0xD20 SWAP1 PUSH1 0x1 SWAP4 SWAP3 DUP9 PUSH2 0xEDA JUMP JUMPDEST POP SWAP8 SWAP9 POP SWAP1 SWAP7 SWAP2 SWAP5 SWAP4 SWAP3 POP PUSH2 0xD52 SWAP2 PUSH2 0xD4D SWAP2 POP PUSH2 0xBBC JUMP JUMPDEST PUSH2 0xBCA JUMP JUMPDEST SWAP8 PUSH1 0x20 SWAP6 DUP7 DUP11 ADD MSTORE PUSH1 0x0 SWAP4 DUP5 SWAP2 DUP6 SWAP7 JUMPDEST DUP10 DUP9 LT PUSH2 0xD75 JUMPI POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP9 SWAP1 DUP2 DUP10 LT ISZERO PUSH2 0xEB8 JUMPI JUMPDEST DUP13 DUP4 DUP11 BYTE PUSH1 0x80 DUP2 AND ISZERO PUSH2 0xE93 JUMPI PUSH1 0xFE DUP2 SUB PUSH2 0xDF1 JUMPI POP DUP2 PUSH2 0xDE1 DUP3 PUSH1 0x1 SWAP6 SWAP5 PUSH1 0x24 DUP14 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP7 ADD ADD MSTORE PUSH2 0xDD0 DUP4 PUSH2 0xBBC JUMP JUMPDEST PUSH2 0xDDA DUP13 MLOAD PUSH2 0x6B4 JUMP JUMPDEST SWAP2 DUP13 PUSH2 0x1692 JUMP JUMPDEST DUP9 MLOAD ADD ADD SWAP8 ADD SWAP8 JUMPDEST ADD SWAP7 SWAP6 PUSH2 0xD62 JUMP JUMPDEST SWAP3 SWAP9 SWAP6 SWAP2 SWAP3 PUSH1 0xFD DUP2 SUB PUSH2 0xE27 JUMPI POP SWAP2 PUSH1 0x1 SWAP10 SWAP2 DUP6 DUP6 DUP10 DUP7 DUP6 PUSH1 0x24 DUP13 PUSH2 0xE18 SWAP11 ADD ADD MSTORE PUSH2 0x11C7 JUMP JUMPDEST SWAP1 POP SWAP9 SWAP2 SWAP8 SWAP1 SWAP8 SWAP5 ADD SWAP8 PUSH2 0xDE9 JUMP JUMPDEST PUSH1 0xFC DUP2 SUB PUSH2 0xE49 JUMPI POP SWAP2 PUSH1 0x1 SWAP10 SWAP2 DUP6 DUP6 DUP10 DUP7 DUP6 PUSH1 0x24 DUP13 PUSH2 0xE18 SWAP11 ADD ADD MSTORE PUSH2 0x1218 JUMP JUMPDEST SWAP3 PUSH2 0xE8A DUP8 PUSH1 0x24 SWAP4 PUSH2 0xE79 DUP12 DUP6 SWAP12 SWAP15 SWAP8 SWAP12 PUSH2 0xE6A PUSH1 0x7F PUSH1 0x1 SWAP12 AND DUP1 SWAP4 PUSH2 0x5FB JUMP JUMPDEST MLOAD MLOAD SWAP8 DUP9 SWAP6 DUP6 ADD ADD MSTORE DUP13 PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP1 PUSH2 0xE84 DUP6 PUSH2 0xBBC JUMP JUMPDEST SWAP2 PUSH2 0x1680 JUMP JUMPDEST ADD SWAP8 ADD SWAP8 PUSH2 0xDE9 JUMP JUMPDEST SWAP1 PUSH1 0x24 DUP11 DUP6 PUSH2 0xEAA PUSH1 0x7F PUSH1 0x1 SWAP9 SWAP8 SWAP15 SWAP7 AND DUP13 PUSH2 0x5FB JUMP JUMPDEST MLOAD ADD MLOAD SWAP3 ADD ADD MSTORE ADD SWAP8 PUSH2 0xDE9 JUMP JUMPDEST PUSH2 0xEC0 PUSH2 0x5B3 JUMP JUMPDEST PUSH2 0xD80 JUMP JUMPDEST SWAP1 POP PUSH2 0xD4D SWAP2 SWAP8 POP PUSH2 0xD52 SWAP3 SWAP6 SWAP5 SWAP4 POP PUSH2 0xBBC JUMP JUMPDEST PUSH2 0xEEB SWAP1 PUSH1 0x7F PUSH1 0x20 SWAP4 SWAP5 AND SWAP1 PUSH2 0x5FB JUMP JUMPDEST MLOAD MLOAD SUB PUSH2 0xEF8 JUMPI PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537461746963207374617465207661726961626C6573206D7573742062652033 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x3220627974657300000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x7F PUSH2 0xF8A SWAP3 SWAP4 AND SWAP1 PUSH2 0x5FB JUMP JUMPDEST MLOAD MLOAD PUSH1 0x1F DUP2 AND PUSH2 0xF9B JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x44796E616D6963207374617465207661726961626C6573206D75737420626520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61206D756C7469706C65206F6620333220627974657300000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP3 SWAP2 SWAP1 SWAP4 SWAP5 PUSH1 0x1 ADD SWAP4 PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x10BD JUMPI JUMPDEST PUSH1 0x20 PUSH2 0x1043 PUSH1 0x7F DUP4 DUP9 BYTE AND DUP7 PUSH2 0x5FB JUMP JUMPDEST MLOAD MLOAD SUB PUSH2 0x105F JUMPI PUSH1 0x20 PUSH2 0x1057 SWAP7 ADD SWAP4 PUSH2 0x10CA JUMP JUMPDEST SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4172726179206C656E677468206D757374206265203332206279746573000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x10C5 PUSH2 0x5B3 JUMP JUMPDEST PUSH2 0x1032 JUMP JUMPDEST SWAP5 SWAP4 SWAP1 SWAP6 SWAP3 PUSH1 0x0 SWAP2 PUSH1 0x1 DUP1 SWAP7 ADD SWAP6 DUP1 DUP4 ADD SWAP9 PUSH1 0x20 DUP1 SWAP4 ADD SWAP9 JUMPDEST DUP4 DUP10 LT PUSH2 0x10F6 JUMPI POP POP POP POP POP POP SWAP4 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST DUP2 DUP10 BYTE PUSH1 0x80 DUP2 AND ISZERO PUSH2 0x11B4 JUMPI PUSH1 0xFB DUP2 SUB PUSH2 0x1120 JUMPI POP POP POP POP POP PUSH2 0x1119 SWAP1 DUP4 PUSH2 0x5FB JUMP JUMPDEST MSTORE SWAP4 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP11 DUP5 SWAP12 SWAP8 DUP9 PUSH1 0xFD DUP7 SWAP14 SWAP5 SWAP7 SWAP8 SWAP10 SWAP11 SWAP13 SWAP6 SWAP13 EQ PUSH1 0x0 EQ PUSH2 0x1160 JUMPI POP SWAP1 PUSH2 0x1148 SWAP4 SWAP3 SWAP2 DUP12 DUP7 PUSH2 0x101F JUMP JUMPDEST SWAP12 SWAP3 SWAP12 SWAP11 SWAP2 SWAP11 SWAP7 SWAP1 SWAP11 SWAP12 SWAP8 JUMPDEST ADD SWAP6 ADD SWAP8 SWAP1 SWAP3 SWAP2 PUSH2 0x10E3 JUMP JUMPDEST PUSH1 0xFC SWAP2 SWAP4 SWAP6 SWAP8 SWAP9 POP DUP1 SWAP3 SWAP5 SWAP7 POP EQ PUSH1 0x0 EQ PUSH2 0x1198 JUMPI POP SWAP3 DUP5 SWAP3 PUSH2 0x1188 SWAP3 DUP12 SWAP6 DUP12 DUP15 SWAP10 SWAP9 PUSH2 0x10CA JUMP JUMPDEST SWAP12 SWAP3 SWAP12 SWAP11 SWAP2 SWAP11 SWAP7 SWAP1 SWAP11 SWAP12 SWAP8 PUSH2 0x1154 JUMP JUMPDEST SWAP11 PUSH2 0x11AE DUP2 SWAP4 SWAP13 DUP8 SWAP6 DUP14 SWAP8 SWAP10 SWAP9 SWAP14 SWAP5 SWAP11 SWAP14 PUSH2 0xF7C JUMP JUMPDEST SWAP11 PUSH2 0x1154 JUMP JUMPDEST SWAP4 PUSH2 0x11AE DUP5 SWAP6 DUP3 SWAP5 SWAP12 SWAP9 SWAP13 DUP5 SWAP7 SWAP5 PUSH2 0xEDA JUMP JUMPDEST SWAP4 SWAP3 SWAP2 SWAP1 PUSH1 0x20 PUSH1 0x1 PUSH2 0x11FF SWAP9 ADD SWAP7 DUP2 DUP9 LT ISZERO PUSH2 0x120B JUMPI JUMPDEST DUP2 PUSH2 0x11EE PUSH1 0x7F DUP7 DUP12 BYTE AND DUP6 PUSH2 0x5FB JUMP JUMPDEST MLOAD ADD MLOAD PUSH1 0x24 DUP3 DUP10 ADD ADD MSTORE ADD SWAP5 PUSH2 0x1218 JUMP JUMPDEST SWAP3 SWAP4 SWAP2 SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD SWAP2 JUMP JUMPDEST PUSH2 0x1213 PUSH2 0x5B3 JUMP JUMPDEST PUSH2 0x11DE JUMP JUMPDEST SWAP5 SWAP1 SWAP6 SWAP3 SWAP2 SWAP7 SWAP4 SWAP7 PUSH1 0x0 SWAP7 PUSH2 0x122D DUP10 DUP6 PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP1 PUSH1 0x1 DUP1 DUP6 DUP5 ADD SWAP12 ADD SWAP7 ADD SWAP8 JUMPDEST PUSH1 0x20 SWAP6 DUP7 DUP11 LT ISZERO PUSH2 0x1384 JUMPI DUP5 DUP11 BYTE PUSH1 0x80 DUP2 AND ISZERO PUSH2 0x1355 JUMPI PUSH1 0xFB DUP2 SUB PUSH2 0x1268 JUMPI POP POP POP POP POP POP POP POP SWAP4 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST SWAP12 DUP5 SWAP9 DUP9 SWAP14 SWAP6 DUP7 PUSH1 0xFD DUP11 SWAP16 SWAP12 SWAP9 SWAP15 SWAP6 SWAP7 SWAP8 SWAP11 SWAP10 SWAP15 EQ PUSH1 0x0 EQ PUSH2 0x12BC JUMPI POP PUSH1 0x24 DUP7 SWAP8 SWAP9 PUSH2 0x129B SWAP7 SWAP8 ADD ADD MSTORE DUP5 DUP13 DUP10 DUP9 PUSH2 0x11C7 JUMP JUMPDEST SWAP2 SWAP13 SWAP8 DUP2 ADD SWAP1 SWAP6 ADD SWAP11 SWAP2 SWAP8 SWAP1 SWAP5 ADD SWAP6 ADD SWAP3 PUSH1 0x1 SWAP1 JUMPDEST ADD SWAP8 SWAP3 SWAP4 SWAP1 SWAP5 SWAP2 PUSH2 0x123B JUMP JUMPDEST SWAP3 SWAP5 SWAP7 POP POP SWAP2 SWAP4 SWAP6 POP PUSH1 0xFC DUP2 EQ PUSH1 0x0 EQ PUSH2 0x1304 JUMPI POP SWAP2 PUSH2 0x12EB SWAP2 DUP6 SWAP5 SWAP4 DUP10 PUSH1 0x24 DUP16 SWAP9 DUP16 ADD ADD MSTORE DUP5 DUP13 DUP10 DUP9 PUSH2 0x1218 JUMP JUMPDEST SWAP2 SWAP13 SWAP8 DUP2 ADD SWAP1 SWAP6 ADD SWAP11 SWAP2 SWAP8 SWAP1 SWAP5 ADD SWAP6 ADD SWAP3 PUSH1 0x1 SWAP1 PUSH2 0x12B0 JUMP JUMPDEST SWAP12 DUP9 PUSH1 0x24 DUP14 DUP4 SWAP5 SWAP12 SWAP16 SWAP6 PUSH2 0x1347 DUP11 PUSH2 0x133C DUP14 PUSH1 0x7F PUSH1 0x1 SWAP12 SWAP15 SWAP14 SWAP13 SWAP15 AND SWAP1 PUSH2 0x132B DUP3 DUP3 PUSH2 0x5FB JUMP JUMPDEST MLOAD MLOAD SWAP9 DUP10 SWAP9 DUP10 SWAP9 DUP10 SWAP7 ADD ADD MSTORE PUSH2 0x5FB JUMP JUMPDEST MLOAD DUP12 PUSH2 0xE84 DUP6 PUSH2 0xBBC JUMP JUMPDEST ADD SWAP15 ADD SWAP9 ADD ADD SWAP11 ADD SWAP4 PUSH2 0x12B0 JUMP JUMPDEST SWAP7 DUP7 SWAP12 DUP2 SWAP3 SWAP5 SWAP8 PUSH1 0x24 DUP4 PUSH2 0x1373 SWAP10 SWAP15 SWAP10 PUSH1 0x7F PUSH1 0x1 SWAP9 SWAP11 SWAP14 AND DUP13 PUSH2 0x5FB JUMP JUMPDEST MLOAD ADD MLOAD SWAP2 DUP9 ADD ADD MSTORE ADD SWAP11 ADD SWAP4 PUSH2 0x12B0 JUMP JUMPDEST POP POP POP POP POP POP POP SWAP4 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1398 JUMPI JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F6E652072657475726E2076616C7565207065726D697474656420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2873746174696329000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST ISZERO PUSH2 0x1423 JUMPI JUMP JUMPDEST PUSH1 0x84 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F6E6C79206F6E652072657475726E2076616C7565207065726D697474656420 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x287661726961626C652900000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 DUP2 DUP5 SUB SLT PUSH2 0xE3 JUMPI DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP2 DUP3 DUP3 GT PUSH2 0xE3 JUMPI ADD SWAP1 DUP4 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0xE3 JUMPI DUP2 MLOAD PUSH2 0x14DE DUP2 PUSH2 0x49A JUMP JUMPDEST SWAP5 PUSH1 0x40 SWAP3 PUSH2 0x14EE DUP5 MLOAD SWAP8 DUP9 PUSH2 0x44C JUMP JUMPDEST DUP3 DUP8 MSTORE DUP6 DUP1 DUP9 ADD SWAP4 PUSH1 0x5 SHL DUP7 ADD ADD SWAP5 DUP3 DUP7 GT PUSH2 0xE3 JUMPI DUP7 DUP2 ADD SWAP4 JUMPDEST DUP7 DUP6 LT PUSH2 0x151B JUMPI POP POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP5 MLOAD DUP4 DUP2 GT PUSH2 0xE3 JUMPI DUP3 ADD SWAP1 DUP5 PUSH1 0x3F DUP4 ADD SLT ISZERO PUSH2 0xE3 JUMPI DUP9 DUP3 ADD MLOAD SWAP1 PUSH2 0x1540 DUP3 PUSH2 0x4C1 JUMP JUMPDEST PUSH2 0x154C DUP10 MLOAD SWAP2 DUP3 PUSH2 0x44C JUMP JUMPDEST DUP3 DUP2 MSTORE DUP7 DUP10 DUP5 DUP7 ADD ADD GT PUSH2 0xE3 JUMPI PUSH2 0x156D DUP12 SWAP5 SWAP4 DUP6 SWAP5 DUP12 DUP7 DUP6 ADD SWAP2 ADD PUSH2 0x20F JUMP JUMPDEST DUP2 MSTORE ADD SWAP5 ADD SWAP4 PUSH2 0x1509 JUMP JUMPDEST SWAP2 SWAP1 DUP1 PUSH1 0xF8 SHR PUSH1 0xFF DUP2 EQ PUSH2 0x161E JUMPI PUSH1 0x80 DUP2 AND ISZERO PUSH2 0x15F1 JUMPI PUSH1 0xFE SUB PUSH2 0x15AB JUMPI POP PUSH2 0x76B SWAP2 POP PUSH1 0x20 DUP1 DUP3 MLOAD DUP4 ADD ADD SWAP2 ADD PUSH2 0x14A7 JUMP JUMPDEST PUSH2 0xFE0 PUSH1 0x20 SWAP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP6 ADD SWAP5 PUSH2 0x15E2 DUP6 DUP8 MLOAD EQ PUSH2 0x141C JUMP JUMPDEST MLOAD ADD DUP5 MSTORE PUSH1 0xF3 SHR AND DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP3 SWAP2 POP PUSH1 0x7F SWAP1 PUSH2 0x1607 PUSH1 0x20 PUSH2 0x161A SWAP6 MLOAD EQ PUSH2 0x1391 JUMP JUMPDEST AND SWAP1 PUSH2 0x1613 DUP3 DUP6 PUSH2 0x5FB JUMP JUMPDEST MSTORE DUP3 PUSH2 0x5FB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0xF8 SHR SWAP1 PUSH1 0xFF DUP3 EQ PUSH2 0x167B JUMPI PUSH1 0x20 SWAP2 PUSH2 0x165C SWAP2 PUSH2 0x164C DUP6 MLOAD DUP6 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x1673 JUMPI PUSH2 0xBCA JUMP JUMPDEST PUSH2 0x1656 DUP4 DUP4 PUSH2 0x5FB JUMP JUMPDEST MSTORE PUSH2 0x5FB JUMP JUMPDEST MLOAD SWAP2 DUP1 MLOAD PUSH1 0x40 DUP5 ADD DUP2 DUP5 DUP5 ADD PUSH1 0x4 GAS STATICCALL POP MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xD4D PUSH2 0x64D JUMP JUMPDEST POP POP POP JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP1 SWAP2 DUP6 SWAP4 ADD ADD SWAP3 ADD PUSH1 0x4 GAS STATICCALL POP JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD SWAP1 DUP3 SWAP1 PUSH1 0x40 ADD PUSH1 0x4 GAS STATICCALL POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D AND 0xBE 0xB5 0xA6 0xD MUL CODECOPY PUSH20 0x5F2AB06959BF3B6BAECBA90639EE8FE0FE0AE82C ADDMOD 0x4A 0x49 PUSH5 0x736F6C6343 STOP ADDMOD LT STOP CALLER ",
          "sourceMap": "117:839:2:-:0;;;;;;;;;-1:-1:-1;117:839:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;117:839:2;;;;;;;;;498:37;;545:16;;117:839;;;502:11;117:839;;;502:11;117:839;;545:16;575:20;571:76;;117:839;571:76;611:25;117:839;;;;;;:::i;:::-;611:25;;:::i;498:37::-;117:839;;;522:13;;;;117:839;;;;;;;;-1:-1:-1;;117:839:2;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;117:839:2;;824:10;:20;820:44;;117:839;887:25;117:839;;;;;;:::i;887:25::-;117:839;;;;;;;:::i;:::-;;;;820:44;117:839;;;853:11;;;;117:839;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;117:839:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;334:4:1:-;;;117:839:2;;334:4:1;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;171::0;;;;;;;;;;:::i;:::-;117:839:2;;;;;;;:::i;:::-;171:4:0;;;-1:-1:-1;171:4:0;;;;:::o;:::-;117:839:2;171:4:0;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::o;:::-;117:839:2;;;;;;;;;;;;;;;171:4:0;117:839:2;;171:4:0;;;;;;;;:::o;117:839:2:-;;;:::i;:::-;;;171:4:0;117:839:2;171:4:0;;;;;;;117:839:2;171:4:0;;;117:839:2;171:4:0;;;;;;;;:::i;:::-;;:::o;756:4417:1:-;;117:839:2;1082:18:1;;;;;;5154:12;;;756:4417;:::o;1102:26::-;1154:11;;;;;:::i;:::-;466:4;;117:839:2;;;;;;1243:29:1;;;:34;;;;;349:4:0;;1351:11:1;;;;;;:::i;:::-;117:839:2;1239:239:1;376:4;1496:20;;;:44;;;1719:388;;117:839:2;1719:388:1;;117:839:2;1719:17:1;;;;:22;117:839:2;;;;1772:149:1;171:4:0;;;;1772:149:1;;:::i;:::-;1719:388;;1581:548;;;;117:839:2;;;1581:548:1;;;;;:::i;:::-;1560:569;1492:2873;4383:8;4379:528;;-1:-1:-1;;513:4:1;4925:25;:30;513:4;;349::0;117:839:2;;;5015:7:1;117:839:2;;;;5015:7:1;;:::i;:::-;349:4:0;1071:9:1;;4921:214;117:839:2;349:4:0;117:839:2;;;5070:50:1;117:839:2;;;;5070:50:1;;:::i;:::-;4921:214;;;4379:528;4583:309;117:839:2;;;;;;;;4411:148:1;;4379:528;4636:94;;;;;117:839:2;;4825:18:1;:48;;;;117:839:2;4583:309:1;;;;;;117:839:2;4583:309:1;;;;;:::i;:::-;;;;4825:48;171:4:0;;;:::i;:::-;4825:48:1;;;4636:94;4725:5;;;:::i;:::-;4636:94;;;4411:148;4457:84;;;4411:148;;;1719:388;171:4:0;1952:155:1;117:839:2;;;1991:86:1;1952:155;;:::i;:::-;;1719:388;;;1492:2873;349:4:0;2154:36:1;;349:4:0;;2332:356:1;;117:839:2;2332:356:1;;117:839:2;2332:17:1;;;;:22;117:839:2;;;;2381:137:1;171:4:0;;;;2381:137:1;;:::i;:::-;2332:356;;2231:475;;;;117:839:2;;;;2231:475:1;;;;;:::i;:::-;2210:496;1492:2873;;2332:356;171:4:0;2545:143:1;117:839:2;;;2580:82:1;2545:143;;:::i;:::-;;2332:356;;;2150:2215;287:4;2731:42;;287:4;;2950:388;;117:839:2;2950:388:1;;117:839:2;2950:17:1;;;;:22;117:839:2;;;;3003:149:1;171:4:0;;;;3003:149:1;;:::i;:::-;2950:388;;2814:546;;;;117:839:2;;;2814:546:1;;;;;:::i;2950:388::-;171:4:0;3183:155:1;117:839:2;;;3222:86:1;3183:155;;:::i;:::-;;2950:388;;;2727:1638;3385:41;376:4;;117:839:2;;;;;;3496:29:1;117:839:2;;;;3496:29:1;;:::i;:::-;;3543:79;;3815:452;:17;;;:22;117:839:2;;;;3864:162:1;;117:839:2;;171:4:0;;;;3864:162:1;:::i;:::-;3815:452;;3660:625;;;;117:839:2;;;;3660:625:1;;;;;:::i;3815:452::-;171:4:0;4053:214:1;117:839:2;;;4088:153:1;4053:214;;:::i;:::-;;3815:452;;;3381:984;-1:-1:-1;117:839:2;4324:26:1;;;334:4;4324:26;;;334:4;;;;;117:839:2;334:4:1;117:839:2;;;334:4:1;;;4583:309;1239:239;117:839:2;570:66:1;117:839:2;;;1419:43:1;1239:239;;117:839:2;;;;;;;;;;;;;;;;;;;869:2:0;117:839:2;;;;;;;;:::o;:::-;;;:::i;:::-;;;349:4:0;;2394:1;349:4;;;;;;;:::o;:::-;;171;;;:::i;:::-;117:839:2;;;;;;:::i;:::-;171:4:0;;;349;;;;;:::i;:::-;;117:839:2;349:4:0;117:839:2;349:4:0;;117:839:2;349:4:0:o;405:4721::-;;;;117:839:2;613:17:0;;752:12;855:17;;;:::i;:::-;985:22;117:839:2;1081:21:0;;1191:9;;;1206:2;1202:6;;;;;;;1238:10;;;216:4;1267:22;;1263:101;;513:4:1;1381:25:0;;:30;513:4:1;;259::0;1435:20;;259:4;;117:839:2;;;1483:21:0;1479:105;;1431:712;117:839:2;349:4:0;117:839:2;;;349:4:0;1431:712;;349:4;;;1191:9;;;;1479:105;117:839:2;;349:4:0;117:839:2;;;1544:17:0;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;1479:105;;;;;;1431:712;1717:22;;;;;;;;;304:4;1717:22;;304:4;;1796:63;;349:4;1796:63;;;;;;;;:::i;:::-;1763:96;;;;;;;;1713:430;1431:712;;1713:430;349:4;1888:22;;349:4;;1967:63;;349:4;1967:63;;;;;;;;:::i;1884:259::-;2085:39;;349:4;2085:39;;;;;;;;;:::i;:::-;1884:259;1431:712;;1377:865;2189:38;;349:4;2189:38;;;;:::i;1263:101::-;-1:-1:-1;1309:17:0;;-1:-1:-1;1309:17:0;;;;;;-1:-1:-1;2376:20:0;;2386:9;;-1:-1:-1;2386:9:0;:::i;:::-;2376:20;:::i;:::-;1206:2;;2406:63;;;;;117:839:2;2497:13:0;;2525:9;;2520:2600;2536:17;;;;;;405:4721;;;;;;;;;;:::o;2525:9::-;2583:10;;;;;;;;2525:9;2583:10;;;;513:4:1;2612:25:0;;:30;513:4:1;;259::0;2666:20;;259:4;;2710:95;;2826:59;2710:95;349:4;2710:95;;;;349:4;2710:95;;;;2853:8;;;:::i;:::-;2863:21;117:839:2;;2863:21:0;:::i;:::-;2826:59;;;:::i;:::-;117:839:2;;349:4:0;;;;2662:1995;;349:4;2525:9;;;;2662:1995;3060:22;;;;;304:4;3060:22;;304:4;;3180:95;;349:4;3180:95;;;;;;;;;3321:68;3180:95;;;;3321:68;:::i;:::-;3296:93;;;;;;;349:4;;3056:1601;2662:1995;;3056:1601;349:4;3509:22;;349:4;;3629:95;;349:4;3629:95;;;;;;;;;3770:68;3629:95;;;;3770:68;:::i;3505:1152::-;4043:20;4304:203;4043:20;4188:95;4043:20;4336:27;4043:20;;;;;;4037:27;171:4;349;4043:20;;4037:27;;;:::i;:::-;;117:839:2;4188:95:0;;;;;;;4336:27;;:::i;:::-;;4445:8;;;;:::i;:::-;4304:203;;:::i;:::-;349:4;;;3505:1152;2662:1995;;2608:2443;4762:20;4851:107;4762:20;;4756:27;171:4;349;4762:20;;;;;4756:27;;:::i;:::-;;4851:107;;;;;;349:4;2608:2443;;;2583:10;;;:::i;:::-;;;1202:6;;;2386:9;1202:6;;;2376:20;1202:6;;;;;2386:9;:::i;5132:361::-;5304:27;5132:361;171:4;5342:2;5132:361;;5310:20;5304:27;;:::i;:::-;;117:839:2;5304:40:0;117:839:2;;5342:2:0;349:4;5132:361;:::o;117:839:2:-;;;;;;;5342:2:0;117:839:2;;;;;;;;;;;;;;;;;;;;5499:535:0;171:4;5780:27;5499:535;;5786:20;5780:27;;:::i;:::-;;117:839:2;;;;;;349:4:0;5854:2;349:4;;5499:535::o;117:839:2:-;;;;;;;5854:2:0;117:839:2;;;;;;;;;;;;;;;;;;;;6040:667:0;;;;;;349:4;;6483:10;6441:2;6483:10;;;;;6040:667;6441:2;6525:27;171:4;6483:10;;;6531:20;6525:27;;:::i;:::-;;117:839:2;6525:40:0;117:839:2;;6441:2:0;6637:63;349:4;;6637:63;;:::i;:::-;6630:70;;;;;;6040:667::o;117:839:2:-;;;;;;;6441:2:0;117:839:2;;;;;;;;;;;;;;;6483:10:0;;;:::i;:::-;;;6713:1556;;;;;;117:839:2;349:4:0;;;;;;;;;7231:2;;349:4;;;7253:959;7260:6;;;;;;8221:41;;;;;;;;;6713:1556;:::o;7253:959::-;7294:10;;;513:4:1;7323:25:0;;:30;513:4:1;;394::0;7377:22;;394:4;;7423:27;;;;;;;;;:::i;:::-;394:4;7502:41;;;;:::o;7373:641::-;7572:22;;;;;304:4;7572:22;;;;;;;;;;;7568:446;304:4;;;7655:67;;;;;;;;;:::i;:::-;7618:104;;;;;;;;;;7568:446;;349:4;;;7253:959;;;;;;7568:446;349:4;7751:22;;;;;;;;;;;;7747:267;349:4;;;7834:67;;;;;;;;;;;;;:::i;:::-;7797:104;;;;;;;;;;7747:267;7568:446;;7747:267;7956:39;;;;;;;;;;;;;;;;:::i;:::-;7747:267;7568:446;;7319:794;8060:38;;;;;;;;;;;;;:::i;8275:951::-;;;;;8704:10;349:4;8994:68;8275:951;349:4;8704:10;;;;;;;8275:951;8704:10;8749:27;171:4;8704:10;;;8755:20;8749:27;;:::i;:::-;;8786:90;;;;;;;;349:4;8994:68;;:::i;:::-;;;;;8704:10;349:4;;;;8275:951::o;8704:10::-;;;:::i;:::-;;;9232:3531;;;;;;;;;117:839:2;9617:18:0;;;;;:::i;:::-;117:839:2;9676:24:0;349:4;9676:24;;;349:4;;;;;9950:2760;;9961:2;9957:6;;;;;;;9991:10;;;513:4:1;10020:25:0;;:30;513:4:1;;394::0;10074:22;;394:4;;10120:37;;;;;;;;;;;;:::o;10070:2151::-;10186:22;;;;;;;304:4;10186:22;;;;;;;;;;;;10182:2039;304:4;;;10306:97;;;;;10493:70;10306:97;;;;;10493:70;;;;;:::i;:::-;;;349:4;;;;;;;10493:70;;349:4;;;;;;;;10182:2039;349:4;9950:2760;;;;;;;;10182:2039;10792:22;;;;;;;;;349:4;10792:22;;10788:1433;349:4;;;10912:97;;11099:70;10912:97;;;;;;;;;;;;11099:70;;;;;:::i;:::-;;;349:4;;;;;;;11099:70;;349:4;;;;;;;;10182:2039;;10788:1433;11484:20;;11637:97;11484:20;;;;;;11755:205;11484:20;11787:27;11484:20;171:4;349;11484:20;;;;;;11478:27;;;;;:::i;:::-;;117:839:2;11637:97:0;;;;;;;;;;11787:27;:::i;:::-;;11896:10;;;;:::i;11755:205::-;349:4;;;;;;;;10788:1433;10182:2039;;10016:2625;12326:20;;;;;;;12409:106;12326:20;12320:27;12326:20;;;171:4;349;12326:20;;;;12320:27;;:::i;:::-;;12409:106;;;;;;;349:4;;;10016:2625;;;9957:6;;;;;;;;12719:37;;;9232:3531;:::o;117:839:2:-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;12769:1517:0;;;117:839:2;;;;12967:22:0;;12963:40;;513:4:1;13018:25:0;;:30;513:4:1;;259::0;13068:20;259:4;;117:839:2;13116:29:0;117:839:2;;13116:29:0;117:839:2;;;13116:29:0;;;;;;:::i;13064:956::-;13552:454;13310:81;;13552:454;13310:81;;;;13408:125;13310:81;;;13437:12;13408:125;:::i;:::-;13552:454;;;;;;;;;;;171:4;:::o;13014:1243::-;117:839:2;;;171:4:0;117:839:2;14077:118:0;14119:2;14210:36;117:839:2;;14102:19:0;14077:118;:::i;:::-;14216:20;14210:36;;;;;:::i;:::-;;;;:::i;:::-;;12769:1517;:::o;12963:40::-;12991:12;;;;:::o;14292:437::-;;117:839:2;;14463:22:0;117:839:2;14463:22:0;;14459:35;;14564:2;117:839:2;14525:42:0;117:839:2;14538:29:0;117:839:2;;349:4:0;;;;;;;;14538:29;:::i;:::-;14525:42;;;;:::i;:::-;;;:::i;:::-;;117:839:2;;;14904:292:0;;;;;;;;;;;14630:93;14904:292;;14630:93;14292:437::o;349:4::-;;;:::i;14459:35::-;14487:7;;;:::o;14735:467::-;;14904:292;14735:467;;;;14904:292;;;;;;;;14735:467::o;:::-;14904:292;;1206:2;14904:292;;14735:467;;14904:292;;;;;;14735:467::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1170000",
            "executionCost": "1223",
            "totalCost": "1171223"
          },
          "external": {
            "caller()": "2340",
            "execute(bytes32[],bytes[])": "infinite",
            "initialize(address,bytes32[],bytes[])": "infinite",
            "initialized()": "2265"
          }
        },
        "methodIdentifiers": {
          "caller()": "fc9c8d39",
          "execute(bytes32[],bytes[])": "de792d5f",
          "initialize(address,bytes32[],bytes[])": "87258e8e",
          "initialized()": "158ef93e"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"command_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ExecutionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"caller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnsoWallet.sol\":\"EnsoWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@ensofinance/weiroll/contracts/CommandBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary CommandBuilder {\\n    uint256 constant IDX_VARIABLE_LENGTH = 0x80;\\n    uint256 constant IDX_VALUE_MASK = 0x7f;\\n    uint256 constant IDX_END_OF_ARGS = 0xff;\\n    uint256 constant IDX_USE_STATE = 0xfe;\\n    uint256 constant IDX_ARRAY_START = 0xfd;\\n    uint256 constant IDX_TUPLE_START = 0xfc;\\n    uint256 constant IDX_DYNAMIC_END = 0xfb;\\n\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices\\n    ) internal view returns (bytes memory ret) {\\n        uint256 idx; // The current command index\\n        uint256 offsetIdx; // The index of the current free offset\\n\\n        uint256 count; // Number of bytes in whole ABI encoded message\\n        uint256 free; // Pointer to first free byte in tail part of message\\n        uint256[] memory offsets = new uint256[](10); // Optionally store the length of all dynamic types (a command cannot fit more than 10 dynamic types)\\n\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n\\n        uint256 indicesLength; // Number of indices\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i; i < 32; ) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) {\\n                indicesLength = i;\\n                break;\\n            }\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    unchecked {\\n                        count += stateData.length;\\n                    }\\n                } else if (idx == IDX_ARRAY_START) {\\n                    (offsets, offsetIdx, count, i) = setupDynamicArray(state, indices, offsets, offsetIdx, count, i);\\n                } else if (idx == IDX_TUPLE_START) {\\n                    (offsets, offsetIdx, count, i) = setupDynamicTuple(state, indices, offsets, offsetIdx, count, i);\\n                } else {\\n                    count = setupDynamicVariable(state, count, idx);\\n                }\\n            } else {\\n                count = setupStaticVariable(state, count, idx);\\n            }\\n            unchecked {\\n                free += 32;\\n                ++i;\\n            }\\n        }\\n\\n        // Encode it\\n        ret = new bytes(count + 4);\\n        assembly {\\n            mstore(add(ret, 32), selector)\\n        }\\n        count = 0;\\n        offsetIdx = 0;\\n        for (uint256 i; i < indicesLength; ) {\\n            idx = uint8(indices[i]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    unchecked {\\n                        free += stateData.length - 32;\\n                        count += 32;\\n                    }\\n                } else if (idx == IDX_ARRAY_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    (offsetIdx, free, , i) = encodeDynamicArray(ret, state, indices, offsets, offsetIdx, free, i);\\n                    unchecked {\\n                        count += 32;\\n                    }\\n                } else if (idx == IDX_TUPLE_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    (offsetIdx, free, , i) = encodeDynamicTuple(ret, state, indices, offsets, offsetIdx, free, i);\\n                    unchecked {\\n                        count += 32;\\n                    }\\n                } else {\\n                    // Variable length data\\n                    uint256 argLen = state[idx & IDX_VALUE_MASK].length;\\n                    // Put a pointer in the current slot and write the data to first free slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        free + 4,\\n                        argLen\\n                    );\\n                    unchecked {\\n                        free += argLen;\\n                        count += 32;\\n                    }\\n                }\\n            } else {\\n                // Fixed length data\\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n                // Write the data to current slot\\n                assembly {\\n                    mstore(add(add(ret, 36), count), mload(add(stateVar, 32)))\\n                }\\n                unchecked {\\n                    count += 32;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function setupStaticVariable(\\n        bytes[] memory state,\\n        uint256 count,\\n        uint256 idx\\n    ) internal pure returns (uint256) {\\n        require(\\n            state[idx & IDX_VALUE_MASK].length == 32,\\n            \\\"Static state variables must be 32 bytes\\\"\\n        );\\n        unchecked {\\n            count += 32;\\n        }\\n        return count;\\n    }\\n\\n    function setupDynamicVariable(\\n        bytes[] memory state,\\n        uint256 count,\\n        uint256 idx\\n    ) internal pure returns (uint256) {\\n        // Add the length of the value, rounded up to the next word boundary, plus space for pointer and length\\n        uint256 argLen = state[idx & IDX_VALUE_MASK].length;\\n        require(\\n            argLen % 32 == 0,\\n            \\\"Dynamic state variables must be a multiple of 32 bytes\\\"\\n        );\\n        unchecked {\\n            count += argLen + 32;\\n        }\\n        return count;\\n    }\\n\\n    function setupDynamicArray(\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory offsets,\\n        uint256 offsetIdx,\\n        uint256 count,\\n        uint256 i\\n    ) internal view returns (uint256[] memory, uint256, uint256, uint256) {\\n        // Current idx is IDX_ARRAY_START, next idx will contain the array length\\n        unchecked {\\n            ++i;\\n            count += 32;\\n        }\\n        uint256 idx = uint8(indices[i]);\\n        require(\\n            state[idx & IDX_VALUE_MASK].length == 32,\\n            \\\"Array length must be 32 bytes\\\"\\n        );\\n        return setupDynamicTuple(state, indices, offsets, offsetIdx, count, i);\\n    }\\n\\n    function setupDynamicTuple(\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory offsets,\\n        uint256 offsetIdx,\\n        uint256 count,\\n        uint256 i\\n    ) internal view returns (uint256[] memory, uint256, uint256, uint256) {\\n        uint256 idx;\\n        uint256 offset;\\n        uint256 nextOffsetIdx;\\n        // Progress to first index of the data and progress the next offset idx\\n        unchecked {\\n            ++i;\\n            nextOffsetIdx = offsetIdx + 1;\\n            count += 32;\\n        }\\n        while (i < 32) {\\n            idx = uint8(indices[i]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_DYNAMIC_END) {\\n                    offsets[offsetIdx] = offset;\\n                    // Return\\n                    return (offsets, nextOffsetIdx, count, i);\\n                } else if (idx == IDX_ARRAY_START) {\\n                    (offsets, nextOffsetIdx, count, i) = setupDynamicArray(state, indices, offsets, nextOffsetIdx, count, i);\\n                } else if (idx == IDX_TUPLE_START) {\\n                    (offsets, nextOffsetIdx, count, i) = setupDynamicTuple(state, indices, offsets, nextOffsetIdx, count, i);\\n                } else {\\n                    count = setupDynamicVariable(state, count, idx);\\n                }\\n            } else {\\n                count = setupStaticVariable(state, count, idx);\\n            }\\n            unchecked {\\n                offset += 32;\\n                ++i;\\n            }\\n        }\\n        return (offsets, nextOffsetIdx, count, i);\\n    }\\n\\n    function encodeDynamicArray(\\n        bytes memory ret,\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory offsets,\\n        uint256 offsetIdx,\\n        uint256 free,\\n        uint256 i\\n    ) internal view returns (uint256, uint256, uint256, uint256) {\\n        // Progress to array length metadata\\n        unchecked {\\n            ++i;\\n        }\\n        // Encode array length\\n        uint256 idx = uint8(indices[i]);\\n        bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n        assembly {\\n            mstore(add(add(ret, 36), free), mload(add(stateVar, 32)))\\n        }\\n        unchecked {\\n            free += 32;\\n        }\\n        uint256 length;\\n        (offsetIdx, free, length, i) = encodeDynamicTuple(ret, state, indices, offsets, offsetIdx, free, i);\\n        unchecked {\\n            length += 32; // Increase length to account for array length metadata\\n        }\\n        return (offsetIdx, free, length, i);\\n    }\\n\\n    function encodeDynamicTuple(\\n        bytes memory ret,\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory offsets,\\n        uint256 offsetIdx,\\n        uint256 free,\\n        uint256 i\\n    ) internal view returns (uint256, uint256, uint256, uint256) {\\n        uint256 idx;\\n        uint256 length; // The number of bytes in this tuple\\n        uint256 offset = offsets[offsetIdx]; // The current offset location\\n        uint256 pointer = offset; // The current pointer for dynamic types\\n        unchecked {\\n            offset += free; // Update the offset location\\n            ++offsetIdx; // Progress to next offsetIdx\\n            ++i; // Progress to first index of the data\\n        }\\n        while (i < 32) {\\n            idx = uint8(indices[i]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_DYNAMIC_END) {\\n                    return (offsetIdx, offset, length, i);\\n                } else if (idx == IDX_ARRAY_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), free), pointer)\\n                    }\\n                    uint256 argLen;\\n                    (offsetIdx, offset, argLen, i) = encodeDynamicArray(ret, state, indices, offsets, offsetIdx, offset, i);\\n                    unchecked {\\n                        pointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                        free += 32;\\n                    }\\n                } else if (idx == IDX_TUPLE_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), free), pointer)\\n                    }\\n                    uint256 argLen;\\n                    (offsetIdx, offset, argLen, i) = encodeDynamicTuple(ret, state, indices, offsets, offsetIdx, offset, i);\\n                    unchecked {\\n                        pointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                        free += 32;\\n                    }\\n                } else  {\\n                    // Variable length data\\n                    uint256 argLen = state[idx & IDX_VALUE_MASK].length;\\n                    // Put a pointer in the first free slot and write the data to the offset free slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), free), pointer)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        offset + 4,\\n                        argLen\\n                    );\\n                    unchecked {\\n                        offset += argLen;\\n                        pointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                        free += 32;\\n                    }\\n                }\\n            } else {\\n                // Fixed length data\\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n                // Write to first free slot\\n                assembly {\\n                    mstore(add(add(ret, 36), free), mload(add(stateVar, 32)))\\n                }\\n                unchecked {\\n                    length += 32;\\n                    free += 32;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return (offsetIdx, offset, length, i);\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal pure returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argPtr;\\n                assembly {\\n                    argPtr := mload(add(output, 32))\\n                }\\n                require(\\n                    argPtr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            // Single word\\n            require(\\n                output.length == 32,\\n                \\\"Only one return value permitted (static)\\\"\\n            );\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcIdx,\\n        bytes memory dest,\\n        uint256 destIdx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcIdx),\\n                    len,\\n                    add(add(dest, 32), destIdx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x703fbd8a7a4b68f7e240f68a7153c91ae2b8f5517741487a4282a501131f03a8\",\"license\":\"MIT\"},\"@ensofinance/weiroll/contracts/VM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\nabstract contract VM {\\n    using CommandBuilder for bytes[];\\n\\n    uint256 constant FLAG_CT_DELEGATECALL = 0x00;\\n    uint256 constant FLAG_CT_CALL = 0x01;\\n    uint256 constant FLAG_CT_STATICCALL = 0x02;\\n    uint256 constant FLAG_CT_VALUECALL = 0x03;\\n    uint256 constant FLAG_CT_MASK = 0x03;\\n    uint256 constant FLAG_DATA = 0x20;\\n    uint256 constant FLAG_EXTENDED_COMMAND = 0x40;\\n    uint256 constant FLAG_TUPLE_RETURN = 0x80;\\n\\n    uint256 constant SHORT_COMMAND_FILL =\\n        0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    error ExecutionFailed(\\n        uint256 command_index,\\n        address target,\\n        string message\\n    );\\n\\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\\n        internal\\n        returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outData;\\n\\n        uint256 commandsLength = commands.length;\\n        for (uint256 i; i < commandsLength; i = _uncheckedIncrement(i)) {\\n            command = commands[i];\\n            flags = uint256(uint8(bytes1(command << 32)));\\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                i = _uncheckedIncrement(i);\\n                indices = commands[i];\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\\n                (success, outData) = address(uint160(uint256(command))) // target\\n                    .delegatecall(\\n                        // inputs\\n                        flags & FLAG_DATA == 0\\n                            ? state.buildInputs(\\n                                bytes4(command), // selector\\n                                indices\\n                            )\\n                            : state[\\n                                uint8(bytes1(indices)) &\\n                                CommandBuilder.IDX_VALUE_MASK\\n                            ]\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                (success, outData) = address(uint160(uint256(command))).call( // target\\n                    // inputs\\n                    flags & FLAG_DATA == 0\\n                        ? state.buildInputs(\\n                            bytes4(command), // selector\\n                            indices\\n                        )\\n                        : state[\\n                            uint8(bytes1(indices)) &\\n                            CommandBuilder.IDX_VALUE_MASK\\n                        ]\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outData) = address(uint160(uint256(command))) // target\\n                    .staticcall(\\n                        // inputs\\n                        flags & FLAG_DATA == 0\\n                            ? state.buildInputs(\\n                                bytes4(command), // selector\\n                                indices\\n                            )\\n                            : state[\\n                                uint8(bytes1(indices)) &\\n                                CommandBuilder.IDX_VALUE_MASK\\n                            ]\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                uint256 callEth;\\n                bytes memory v = state[uint8(bytes1(indices))];\\n                assembly {\\n                    callEth := mload(add(v, 0x20))\\n                }\\n                (success, outData) = address(uint160(uint256(command))).call{ // target\\n                    value: callEth\\n                }(\\n                    // inputs\\n                    flags & FLAG_DATA == 0\\n                        ? state.buildInputs(\\n                            bytes4(command), // selector\\n                            indices << 8 // skip value input\\n                        )\\n                        : state[\\n                            uint8(\\n                                bytes1(indices << 8) // first byte after value input\\n                            ) & CommandBuilder.IDX_VALUE_MASK\\n                        ]\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            if (!success) {\\n                if (outData.length > 0) {\\n                    assembly {\\n                        outData := add(outData, 68)\\n                    }\\n                }\\n                revert ExecutionFailed({\\n                    command_index: flags & FLAG_EXTENDED_COMMAND == 0\\n                        ? i\\n                        : i - 1,\\n                    target: address(uint160(uint256(command))),\\n                    message: outData.length > 0 ? string(outData) : \\\"Unknown\\\"\\n                });\\n            }\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outData);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outData);\\n            }\\n        }\\n        return state;\\n    }\\n\\n    function _uncheckedIncrement(uint256 i) private pure returns (uint256) {\\n        unchecked {\\n            ++i;\\n        }\\n        return i;\\n    }\\n}\\n\",\"keccak256\":\"0x5b46e72687038c670dd8ae2a35a5082dbaeb64e9b44b446bde03a8ebd75fd046\",\"license\":\"MIT\"},\"contracts/EnsoWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {VM} from \\\"@ensofinance/weiroll/contracts/VM.sol\\\";\\n\\ncontract EnsoWallet is VM {\\n    address public caller;\\n    bool public initialized;\\n\\n    // Already initialized\\n    error AlreadyInit();\\n    // Not caller\\n    error NotCaller();\\n    // Invalid address\\n    error InvalidAddress();\\n\\n    function initialize(\\n        address caller_,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) external payable {\\n        if (initialized) revert AlreadyInit();\\n        caller = caller_;\\n        if (commands.length != 0) {\\n            _execute(commands, state);\\n        }\\n    }\\n\\n    function execute(bytes32[] calldata commands, bytes[] calldata state)\\n        external\\n        payable\\n        returns (bytes[] memory returnData)\\n    {\\n        if (msg.sender != caller) revert NotCaller();\\n        returnData = _execute(commands, state);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x4fe83f88597abfae41c69374f58c32a76dba062726cd6f7565bfa6d135fda4b8\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 1609,
            "contract": "contracts/EnsoWallet.sol:EnsoWallet",
            "label": "caller",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1611,
            "contract": "contracts/EnsoWallet.sol:EnsoWallet",
            "label": "initialized",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@ensofinance/weiroll/contracts/CommandBuilder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary CommandBuilder {\\n    uint256 constant IDX_VARIABLE_LENGTH = 0x80;\\n    uint256 constant IDX_VALUE_MASK = 0x7f;\\n    uint256 constant IDX_END_OF_ARGS = 0xff;\\n    uint256 constant IDX_USE_STATE = 0xfe;\\n    uint256 constant IDX_ARRAY_START = 0xfd;\\n    uint256 constant IDX_TUPLE_START = 0xfc;\\n    uint256 constant IDX_DYNAMIC_END = 0xfb;\\n\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices\\n    ) internal view returns (bytes memory ret) {\\n        uint256 idx; // The current command index\\n        uint256 offsetIdx; // The index of the current free offset\\n\\n        uint256 count; // Number of bytes in whole ABI encoded message\\n        uint256 free; // Pointer to first free byte in tail part of message\\n        uint256[] memory offsets = new uint256[](10); // Optionally store the length of all dynamic types (a command cannot fit more than 10 dynamic types)\\n\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n\\n        uint256 indicesLength; // Number of indices\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i; i < 32; ) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) {\\n                indicesLength = i;\\n                break;\\n            }\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    unchecked {\\n                        count += stateData.length;\\n                    }\\n                } else if (idx == IDX_ARRAY_START) {\\n                    (offsets, offsetIdx, count, i) = setupDynamicArray(state, indices, offsets, offsetIdx, count, i);\\n                } else if (idx == IDX_TUPLE_START) {\\n                    (offsets, offsetIdx, count, i) = setupDynamicTuple(state, indices, offsets, offsetIdx, count, i);\\n                } else {\\n                    count = setupDynamicVariable(state, count, idx);\\n                }\\n            } else {\\n                count = setupStaticVariable(state, count, idx);\\n            }\\n            unchecked {\\n                free += 32;\\n                ++i;\\n            }\\n        }\\n\\n        // Encode it\\n        ret = new bytes(count + 4);\\n        assembly {\\n            mstore(add(ret, 32), selector)\\n        }\\n        count = 0;\\n        offsetIdx = 0;\\n        for (uint256 i; i < indicesLength; ) {\\n            idx = uint8(indices[i]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    unchecked {\\n                        free += stateData.length - 32;\\n                        count += 32;\\n                    }\\n                } else if (idx == IDX_ARRAY_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    (offsetIdx, free, , i) = encodeDynamicArray(ret, state, indices, offsets, offsetIdx, free, i);\\n                    unchecked {\\n                        count += 32;\\n                    }\\n                } else if (idx == IDX_TUPLE_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    (offsetIdx, free, , i) = encodeDynamicTuple(ret, state, indices, offsets, offsetIdx, free, i);\\n                    unchecked {\\n                        count += 32;\\n                    }\\n                } else {\\n                    // Variable length data\\n                    uint256 argLen = state[idx & IDX_VALUE_MASK].length;\\n                    // Put a pointer in the current slot and write the data to first free slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        free + 4,\\n                        argLen\\n                    );\\n                    unchecked {\\n                        free += argLen;\\n                        count += 32;\\n                    }\\n                }\\n            } else {\\n                // Fixed length data\\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n                // Write the data to current slot\\n                assembly {\\n                    mstore(add(add(ret, 36), count), mload(add(stateVar, 32)))\\n                }\\n                unchecked {\\n                    count += 32;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function setupStaticVariable(\\n        bytes[] memory state,\\n        uint256 count,\\n        uint256 idx\\n    ) internal pure returns (uint256) {\\n        require(\\n            state[idx & IDX_VALUE_MASK].length == 32,\\n            \\\"Static state variables must be 32 bytes\\\"\\n        );\\n        unchecked {\\n            count += 32;\\n        }\\n        return count;\\n    }\\n\\n    function setupDynamicVariable(\\n        bytes[] memory state,\\n        uint256 count,\\n        uint256 idx\\n    ) internal pure returns (uint256) {\\n        // Add the length of the value, rounded up to the next word boundary, plus space for pointer and length\\n        uint256 argLen = state[idx & IDX_VALUE_MASK].length;\\n        require(\\n            argLen % 32 == 0,\\n            \\\"Dynamic state variables must be a multiple of 32 bytes\\\"\\n        );\\n        unchecked {\\n            count += argLen + 32;\\n        }\\n        return count;\\n    }\\n\\n    function setupDynamicArray(\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory offsets,\\n        uint256 offsetIdx,\\n        uint256 count,\\n        uint256 i\\n    ) internal view returns (uint256[] memory, uint256, uint256, uint256) {\\n        // Current idx is IDX_ARRAY_START, next idx will contain the array length\\n        unchecked {\\n            ++i;\\n            count += 32;\\n        }\\n        uint256 idx = uint8(indices[i]);\\n        require(\\n            state[idx & IDX_VALUE_MASK].length == 32,\\n            \\\"Array length must be 32 bytes\\\"\\n        );\\n        return setupDynamicTuple(state, indices, offsets, offsetIdx, count, i);\\n    }\\n\\n    function setupDynamicTuple(\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory offsets,\\n        uint256 offsetIdx,\\n        uint256 count,\\n        uint256 i\\n    ) internal view returns (uint256[] memory, uint256, uint256, uint256) {\\n        uint256 idx;\\n        uint256 offset;\\n        uint256 nextOffsetIdx;\\n        // Progress to first index of the data and progress the next offset idx\\n        unchecked {\\n            ++i;\\n            nextOffsetIdx = offsetIdx + 1;\\n            count += 32;\\n        }\\n        while (i < 32) {\\n            idx = uint8(indices[i]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_DYNAMIC_END) {\\n                    offsets[offsetIdx] = offset;\\n                    // Return\\n                    return (offsets, nextOffsetIdx, count, i);\\n                } else if (idx == IDX_ARRAY_START) {\\n                    (offsets, nextOffsetIdx, count, i) = setupDynamicArray(state, indices, offsets, nextOffsetIdx, count, i);\\n                } else if (idx == IDX_TUPLE_START) {\\n                    (offsets, nextOffsetIdx, count, i) = setupDynamicTuple(state, indices, offsets, nextOffsetIdx, count, i);\\n                } else {\\n                    count = setupDynamicVariable(state, count, idx);\\n                }\\n            } else {\\n                count = setupStaticVariable(state, count, idx);\\n            }\\n            unchecked {\\n                offset += 32;\\n                ++i;\\n            }\\n        }\\n        return (offsets, nextOffsetIdx, count, i);\\n    }\\n\\n    function encodeDynamicArray(\\n        bytes memory ret,\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory offsets,\\n        uint256 offsetIdx,\\n        uint256 free,\\n        uint256 i\\n    ) internal view returns (uint256, uint256, uint256, uint256) {\\n        // Progress to array length metadata\\n        unchecked {\\n            ++i;\\n        }\\n        // Encode array length\\n        uint256 idx = uint8(indices[i]);\\n        bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n        assembly {\\n            mstore(add(add(ret, 36), free), mload(add(stateVar, 32)))\\n        }\\n        unchecked {\\n            free += 32;\\n        }\\n        uint256 length;\\n        (offsetIdx, free, length, i) = encodeDynamicTuple(ret, state, indices, offsets, offsetIdx, free, i);\\n        unchecked {\\n            length += 32; // Increase length to account for array length metadata\\n        }\\n        return (offsetIdx, free, length, i);\\n    }\\n\\n    function encodeDynamicTuple(\\n        bytes memory ret,\\n        bytes[] memory state,\\n        bytes32 indices,\\n        uint256[] memory offsets,\\n        uint256 offsetIdx,\\n        uint256 free,\\n        uint256 i\\n    ) internal view returns (uint256, uint256, uint256, uint256) {\\n        uint256 idx;\\n        uint256 length; // The number of bytes in this tuple\\n        uint256 offset = offsets[offsetIdx]; // The current offset location\\n        uint256 pointer = offset; // The current pointer for dynamic types\\n        unchecked {\\n            offset += free; // Update the offset location\\n            ++offsetIdx; // Progress to next offsetIdx\\n            ++i; // Progress to first index of the data\\n        }\\n        while (i < 32) {\\n            idx = uint8(indices[i]);\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_DYNAMIC_END) {\\n                    return (offsetIdx, offset, length, i);\\n                } else if (idx == IDX_ARRAY_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), free), pointer)\\n                    }\\n                    uint256 argLen;\\n                    (offsetIdx, offset, argLen, i) = encodeDynamicArray(ret, state, indices, offsets, offsetIdx, offset, i);\\n                    unchecked {\\n                        pointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                        free += 32;\\n                    }\\n                } else if (idx == IDX_TUPLE_START) {\\n                    // Start of dynamic type, put pointer in current slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), free), pointer)\\n                    }\\n                    uint256 argLen;\\n                    (offsetIdx, offset, argLen, i) = encodeDynamicTuple(ret, state, indices, offsets, offsetIdx, offset, i);\\n                    unchecked {\\n                        pointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                        free += 32;\\n                    }\\n                } else  {\\n                    // Variable length data\\n                    uint256 argLen = state[idx & IDX_VALUE_MASK].length;\\n                    // Put a pointer in the first free slot and write the data to the offset free slot\\n                    assembly {\\n                        mstore(add(add(ret, 36), free), pointer)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        offset + 4,\\n                        argLen\\n                    );\\n                    unchecked {\\n                        offset += argLen;\\n                        pointer += argLen;\\n                        length += (argLen + 32); // data + pointer\\n                        free += 32;\\n                    }\\n                }\\n            } else {\\n                // Fixed length data\\n                bytes memory stateVar = state[idx & IDX_VALUE_MASK];\\n                // Write to first free slot\\n                assembly {\\n                    mstore(add(add(ret, 36), free), mload(add(stateVar, 32)))\\n                }\\n                unchecked {\\n                    length += 32;\\n                    free += 32;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return (offsetIdx, offset, length, i);\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal pure returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argPtr;\\n                assembly {\\n                    argPtr := mload(add(output, 32))\\n                }\\n                require(\\n                    argPtr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            // Single word\\n            require(\\n                output.length == 32,\\n                \\\"Only one return value permitted (static)\\\"\\n            );\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcIdx,\\n        bytes memory dest,\\n        uint256 destIdx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcIdx),\\n                    len,\\n                    add(add(dest, 32), destIdx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n}\\n\"\n    },\n    \"@ensofinance/weiroll/contracts/VM.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\nabstract contract VM {\\n    using CommandBuilder for bytes[];\\n\\n    uint256 constant FLAG_CT_DELEGATECALL = 0x00;\\n    uint256 constant FLAG_CT_CALL = 0x01;\\n    uint256 constant FLAG_CT_STATICCALL = 0x02;\\n    uint256 constant FLAG_CT_VALUECALL = 0x03;\\n    uint256 constant FLAG_CT_MASK = 0x03;\\n    uint256 constant FLAG_DATA = 0x20;\\n    uint256 constant FLAG_EXTENDED_COMMAND = 0x40;\\n    uint256 constant FLAG_TUPLE_RETURN = 0x80;\\n\\n    uint256 constant SHORT_COMMAND_FILL =\\n        0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    error ExecutionFailed(\\n        uint256 command_index,\\n        address target,\\n        string message\\n    );\\n\\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\\n        internal\\n        returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outData;\\n\\n        uint256 commandsLength = commands.length;\\n        for (uint256 i; i < commandsLength; i = _uncheckedIncrement(i)) {\\n            command = commands[i];\\n            flags = uint256(uint8(bytes1(command << 32)));\\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                i = _uncheckedIncrement(i);\\n                indices = commands[i];\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\\n                (success, outData) = address(uint160(uint256(command))) // target\\n                    .delegatecall(\\n                        // inputs\\n                        flags & FLAG_DATA == 0\\n                            ? state.buildInputs(\\n                                bytes4(command), // selector\\n                                indices\\n                            )\\n                            : state[\\n                                uint8(bytes1(indices)) &\\n                                CommandBuilder.IDX_VALUE_MASK\\n                            ]\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                (success, outData) = address(uint160(uint256(command))).call( // target\\n                    // inputs\\n                    flags & FLAG_DATA == 0\\n                        ? state.buildInputs(\\n                            bytes4(command), // selector\\n                            indices\\n                        )\\n                        : state[\\n                            uint8(bytes1(indices)) &\\n                            CommandBuilder.IDX_VALUE_MASK\\n                        ]\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outData) = address(uint160(uint256(command))) // target\\n                    .staticcall(\\n                        // inputs\\n                        flags & FLAG_DATA == 0\\n                            ? state.buildInputs(\\n                                bytes4(command), // selector\\n                                indices\\n                            )\\n                            : state[\\n                                uint8(bytes1(indices)) &\\n                                CommandBuilder.IDX_VALUE_MASK\\n                            ]\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                uint256 callEth;\\n                bytes memory v = state[uint8(bytes1(indices))];\\n                assembly {\\n                    callEth := mload(add(v, 0x20))\\n                }\\n                (success, outData) = address(uint160(uint256(command))).call{ // target\\n                    value: callEth\\n                }(\\n                    // inputs\\n                    flags & FLAG_DATA == 0\\n                        ? state.buildInputs(\\n                            bytes4(command), // selector\\n                            indices << 8 // skip value input\\n                        )\\n                        : state[\\n                            uint8(\\n                                bytes1(indices << 8) // first byte after value input\\n                            ) & CommandBuilder.IDX_VALUE_MASK\\n                        ]\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            if (!success) {\\n                if (outData.length > 0) {\\n                    assembly {\\n                        outData := add(outData, 68)\\n                    }\\n                }\\n                revert ExecutionFailed({\\n                    command_index: flags & FLAG_EXTENDED_COMMAND == 0\\n                        ? i\\n                        : i - 1,\\n                    target: address(uint160(uint256(command))),\\n                    message: outData.length > 0 ? string(outData) : \\\"Unknown\\\"\\n                });\\n            }\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outData);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outData);\\n            }\\n        }\\n        return state;\\n    }\\n\\n    function _uncheckedIncrement(uint256 i) private pure returns (uint256) {\\n        unchecked {\\n            ++i;\\n        }\\n        return i;\\n    }\\n}\\n\"\n    },\n    \"contracts/EnsoWallet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport {VM} from \\\"@ensofinance/weiroll/contracts/VM.sol\\\";\\n\\ncontract EnsoWallet is VM {\\n    address public caller;\\n    bool public initialized;\\n\\n    // Already initialized\\n    error AlreadyInit();\\n    // Not caller\\n    error NotCaller();\\n    // Invalid address\\n    error InvalidAddress();\\n\\n    function initialize(\\n        address caller_,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) external payable {\\n        if (initialized) revert AlreadyInit();\\n        caller = caller_;\\n        if (commands.length != 0) {\\n            _execute(commands, state);\\n        }\\n    }\\n\\n    function execute(bytes32[] calldata commands, bytes[] calldata state)\\n        external\\n        payable\\n        returns (bytes[] memory returnData)\\n    {\\n        if (msg.sender != caller) revert NotCaller();\\n        returnData = _execute(commands, state);\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\n    },\n    \"contracts/EnsoWalletFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"./EnsoWallet.sol\\\";\\nimport {Clones} from \\\"./Libraries/Clones.sol\\\";\\n\\ncontract EnsoWalletFactory {\\n    using Clones for address;\\n\\n    address public immutable ensoWallet;\\n\\n    event Deployed(EnsoWallet instance);\\n\\n    constructor(address EnsoWallet_) {\\n        ensoWallet = EnsoWallet_;\\n    }\\n\\n    function deploy(bytes32[] calldata commands, bytes[] calldata state) public payable returns (EnsoWallet instance) {\\n        instance = EnsoWallet(payable(ensoWallet.cloneDeterministic(msg.sender)));\\n        instance.initialize{value: msg.value}(msg.sender, commands, state);\\n\\n        emit Deployed(instance);\\n    }\\n\\n    function getAddress() public view returns (address payable) {\\n        return payable(ensoWallet.predictDeterministicAddress(msg.sender, address(this)));\\n    }\\n}\\n\"\n    },\n    \"contracts/helpers/EnsoShortcutsHelpers.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @dev SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet.\\n *\\n * This contract functions allow to dynamically get the data during Shortcut transaction execution\\n * that usually would be read between transactions\\n */\\ncontract EnsoShortcutsHelpers {\\n    uint256 public constant VERSION = 2;\\n\\n    /**\\n     * @dev Returns the ether balance of given `balanceAdderess`.\\n     */\\n    function getBalance(address balanceAddress) external view returns (uint256 balance) {\\n        return address(balanceAddress).balance;\\n    }\\n\\n    /**\\n     * @dev Returns the current block timestamp.\\n     */\\n    function getBlockTimestamp() external view returns (uint256 timestamp) {\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Returns a value depending on a truth condition\\n     */\\n    function toggle(bool condition, uint256 a, uint256 b) external pure returns (uint256) {\\n        if (condition) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the inverse bool\\n     */\\n    function not(bool condition) external pure returns (bool) {\\n        return !condition;\\n    }\\n\\n    /**\\n     * @dev Returns bool for a == b\\n     */\\n    function isEqual(uint256 a, uint256 b) external pure returns (bool) {\\n        return a == b;\\n    }\\n\\n    /**\\n     * @dev Returns bool for a < b\\n     */\\n    function isLessThan(uint256 a, uint256 b) external pure returns (bool) {\\n        return a < b;\\n    }\\n\\n    /**\\n     * @dev Returns bool for a <= b\\n     */\\n    function isEqualOrLessThan(uint256 a, uint256 b) external pure returns (bool) {\\n        return a <= b;\\n    }\\n\\n    /**\\n     * @dev Returns bool for a > b\\n     */\\n    function isGreaterThan(uint256 a, uint256 b) external pure returns (bool) {\\n        return a > b;\\n    }\\n\\n    /**\\n     * @dev Returns bool for a >= b\\n     */\\n    function isEqualOrGreaterThan(uint256 a, uint256 b) external pure returns (bool) {\\n        return a >= b;\\n    }\\n\\n    /**\\n     * @dev Returns bool for a == b\\n     */\\n    function isAddressEqual(address a, address b) external pure returns (bool) {\\n        return a == b;\\n    }\\n\\n    /**\\n     * @dev Returns `input` bytes as string.\\n     */\\n    function bytesToString(bytes calldata input) external pure returns (string memory) {\\n        return string(abi.encodePacked(input));\\n    }\\n\\n    /**\\n     * @dev Returns `input` bytes32 as uint256.\\n     */\\n    function bytes32ToUint256(bytes32 input) external pure returns (uint256) {\\n        return uint256(input);\\n    }\\n\\n    /**\\n     * @dev Returns `input` bytes32 as address.\\n     */\\n    function bytes32ToAddress(bytes32 input) external pure returns (address) {\\n        return address(uint160(uint256(input)));\\n    }\\n\\n    /**\\n     * @dev Returns uint256 `value` as int256.\\n     */\\n    function uint256ToInt256(uint256 value) public pure returns (int256) {\\n        require(value <= uint256(type(int256).max), \\\"Value does not fit in an int256\\\");\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Returns int256 `value` as uint256.\\n     */\\n    function int256ToUint256(int256 value) public pure returns (uint256) {\\n        require(value >= 0, \\\"Value must be positive\\\");\\n        return uint256(value);\\n    }\\n}\\n\"\n    },\n    \"contracts/helpers/MathHelpers.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @dev MathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet\\n *\\n * Based on OpenZepplin Contracts v4.7.3:\\n * - utils/math/Math.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol)\\n * - utils/math/SafeMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol)\\n */\\ncontract MathHelpers {\\n    uint256 public constant VERSION = 1;\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) external pure returns (uint256) {\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) external pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the results a math operation if a condition is met. Otherwise returns the 'a' value without any modification.\\n     */\\n    function conditional(bool condition, bytes4 method, uint256 a, uint256 b) external view returns (uint256) {\\n        if (condition) {\\n            (bool success, bytes memory n) = address(this).staticcall(abi.encodeWithSelector(method, a, b));\\n            if (success) return abi.decode(n, (uint256));\\n        }\\n        return a;\\n    }\\n}\\n\"\n    },\n    \"contracts/helpers/SignedMathHelpers.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n * @dev SignedMathHelpers contract is recommended to use only in Shortcuts passed to EnsoWallet\\n *\\n * Based on OpenZepplin Contracts 4.7.3:\\n * - utils/math/SignedMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedMath.sol)\\n * - utils/math/SignedSafeMath.sol (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SignedSafeMath.sol)\\n */\\ncontract SignedMathHelpers {\\n    uint256 public constant VERSION = 1;\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) external pure returns (int256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * underflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) external pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) external pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) external pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) external pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) external pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) external pure returns (int256) {\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) external pure returns (uint256) {\\n        unchecked {\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the results a math operation if a condition is met. Otherwise returns the 'a' value without any modification.\\n     */\\n    function conditional(bool condition, bytes4 method, int256 a, int256 b) external view returns (int256) {\\n        if (condition) {\\n          (bool success, bytes memory n) = address(this).staticcall(abi.encodeWithSelector(method, a, b));\\n          if (success) return abi.decode(n, (int256));\\n        }\\n        return a;\\n    }\\n}\\n\"\n    },\n    \"contracts/helpers/TupleHelpers.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/**\\n  * @notice Helper contract to extract a variety of types from a tuple within the context of a weiroll script\\n  */\\ncontract TupleHelpers {\\n\\n    /**\\n      * @notice Extract a bytes32 encoded static type from a tuple\\n      * @dev Use with .rawValue() in the weiroll planner\\n      * @param tuple The bytes encoded tuple\\n      * @param index The index of the value to be extracted\\n      */\\n    function extractElement(bytes memory tuple, uint256 index) public pure returns (bytes32) {\\n        assembly {\\n            // let offset := mul(add(index, 1), 32)\\n            // return(add(tuple, offset), 32)\\n            return(add(tuple, mul(add(index, 1), 32)), 32)\\n        }\\n    }\\n\\n    /**\\n      * @notice Extract a bytes encoded dynamic type from a tuple\\n      * @dev Use with .rawValue() in the weiroll planner\\n      * @param tuple The bytes encoded tuple\\n      * @param index The index of the string or bytes to be extracted\\n      */\\n    function extractDynamicElement(bytes memory tuple, uint256 index) public pure returns (bytes32) {\\n        assembly {\\n            let offset := add(mload(add(tuple, mul(add(index, 1), 32))), 32)\\n            let length := mload(add(tuple, offset))\\n            if gt(mod(length, 32), 0) {\\n              length := mul(add(div(length, 32), 1), 32)\\n            }\\n            return(add(tuple, add(offset, 32)), length)\\n        }\\n    }\\n\\n    /**\\n      * @notice Extract a bytes encoded tuple from another tuple\\n      * @dev Use with .rawValue() in the weiroll planner\\n      * @param tuple The bytes encoded parent tuple\\n      * @param index The index of the tuple to be extracted\\n      * @param isDynamicTypeFormat Boolean to define whether the child tuple is dynamically sized. If the child tuple contains bytes or string variables, set to \\\"true\\\"\\n      */\\n    function extractTuple(\\n        bytes memory tuple,\\n        uint256 index,\\n        bool[] memory isDynamicTypeFormat\\n    ) public pure returns (bytes32) {\\n        uint256 offset;\\n        uint256 length;\\n        assembly {\\n            offset := add(mload(add(tuple, mul(add(index, 1), 32))), 32)\\n        }\\n        for (uint256 i = 0; i < isDynamicTypeFormat.length; i++) {\\n            length += 32;\\n            if (isDynamicTypeFormat[i]) {\\n                assembly {\\n                    let paramOffset := add(offset, mload(add(tuple, add(offset, mul(i, 32)))))\\n                    let paramLength := add(mload(add(tuple, paramOffset)), 32)\\n                    if gt(mod(paramLength, 32), 0) {\\n                      paramLength := mul(add(div(paramLength, 32), 1), 32)\\n                    }\\n                    length := add(length, paramLength)\\n                }\\n            }\\n        }\\n        assembly {\\n            return(add(tuple, add(mload(add(tuple, mul(add(index, 1), 32))), 32)), length)\\n        }\\n    }\\n\\n    /**\\n      * @notice Extract a bytes encoded static array from a tuple\\n      * @dev Use with .rawValue() in the weiroll planner\\n      * @param tuple The bytes encoded array\\n      * @param index The index of the array to be extracted\\n      */\\n    function extractArray(bytes memory tuple, uint256 index) public pure returns (bytes32) {\\n        assembly {\\n            // let offset := add(mload(add(tuple, mul(add(index, 1), 32))), 32)\\n            // let numberOfElements := mload(add(tuple, offset))\\n            // return(add(tuple, add(offset, 32)), mul(numberOfElements, 32))\\n            return(add(tuple, add(add(mload(add(tuple, mul(add(index, 1), 32))), 32), 32)), mul(mload(add(tuple, add(mload(add(tuple, mul(add(index, 1), 32))), 32))), 32))\\n        }\\n    }\\n\\n    /**\\n      * @notice Extract a bytes encoded dynamic array from a tuple\\n      * @dev Use with .rawValue() in the weiroll planner\\n      * @param tuple The bytes encoded tuple\\n      * @param index The index of the dynamic array to be extracted\\n      */\\n    function extractDynamicArray(bytes memory tuple, uint256 index) public pure returns (bytes32) {\\n        uint256 numberOfElements;\\n        uint256 offset;\\n        assembly {\\n            offset := add(mload(add(tuple, mul(add(index, 1), 32))), 32)\\n            numberOfElements := mload(add(tuple, offset))\\n            //numberOfElements := mload(add(tuple, add(mload(add(tuple, mul(add(index, 1), 32))), 32)))\\n        }\\n\\n        uint256 length;\\n        for (uint256 i = 1; i <= numberOfElements; i++) {\\n            assembly {\\n                let paramOffset := add(offset, mul(add(i, 1), 32))\\n                let paramLength := mload(add(tuple, paramOffset))\\n                if gt(mod(paramLength, 32), 0) {\\n                  paramLength := mul(add(div(paramLength, 32), 1), 32)\\n                }\\n                length := add(length, paramLength)\\n                //length := add(length, mload(add(tuple, add(add(mload(add(tuple, mul(add(index, 1), 32))), 32), mul(add(i, 1), 32)))))\\n            }\\n        }\\n        assembly {\\n            // return(add(tuple, add(offset, 32)), add(length, 32))\\n            return(add(tuple, add(add(mload(add(tuple, mul(add(index, 1), 32))), 32), 32)), add(length, 32))\\n        }\\n    }\\n\\n    /**\\n      * @notice Extract a bytes encoded array of tuples from a tuple\\n      * @dev Use with .rawValue() in the weiroll planner\\n      * @param tuple The bytes encoded tuple\\n      * @param index The index of the tuple array to be extracted\\n      * @param isDynamicTypeFormat Boolean to define whether the tuples in the array are dynamically sized. If the array tuple contains bytes or string variables, set to \\\"true\\\"\\n      */\\n    function extractTupleArray(\\n        bytes memory tuple,\\n        uint256 index,\\n        bool[] memory isDynamicTypeFormat\\n    ) public pure returns (bytes32) {\\n        uint256 numberOfElements;\\n        assembly {\\n            // let offset := add(mload(add(tuple, mul(add(index, 1), 32))), 32)\\n            // numberOfElements := mload(add(tuple, offset))\\n            numberOfElements := mload(add(tuple, add(mload(add(tuple, mul(add(index, 1), 32))), 32)))\\n        }\\n        uint256 length = numberOfElements * 32;\\n        for (uint256 i = 1; i <= numberOfElements; i++) {\\n            for (uint256 j = 0; j < isDynamicTypeFormat.length; j++) {\\n                length += 32;\\n                if (isDynamicTypeFormat[j]) {\\n                    assembly {\\n                        // let tupleOffset := add(offset,mload(add(tuple, add(offset, mul(i, 32)))))\\n                        // let paramOffset := add(tupleOffset, mload(add(tuple, add(tupleOffset, mul(add(j,1), 32)))))\\n                        // let paramLength := add(mload(add(tuple, paramOffset)),32)\\n                        // length := add(length, paramLength)\\n                        length := add(length, add(mload(add(tuple, add(add(add(mload(add(tuple, mul(add(index, 1), 32))), 32),mload(add(tuple, add(add(mload(add(tuple, mul(add(index, 1), 32))), 32), mul(i, 32))))), mload(add(tuple, add(add(add(mload(add(tuple, mul(add(index, 1), 32))), 32),mload(add(tuple, add(add(mload(add(tuple, mul(add(index, 1), 32))), 32), mul(i, 32))))), mul(add(j,1), 32))))))),32))\\n                    }\\n                }\\n            }\\n        }\\n        assembly {\\n            // return(add(tuple, add(offset,32)), length)\\n            return(add(tuple, add(add(mload(add(tuple, mul(add(index, 1), 32))), 32),32)), length)\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IVM.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IVM {\\n    function execute(bytes32[] calldata commands, bytes[] calldata state) external payable returns (bytes[] memory);\\n}\\n\"\n    },\n    \"contracts/Libraries/Clones.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n// Modified from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Clones.sol\\n\\npragma solidity ^0.8.16;\\n\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, address salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        address salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/test/DestructEnsoWallet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ncontract Destroyer {\\n    function kill() public returns (bytes[] memory data) {\\n        selfdestruct(payable(msg.sender));\\n        return data;\\n    }\\n}\\n\\ncontract DestructEnsoWallet {\\n    address public caller;\\n    bool public init;\\n\\n    event DelegateCallReturn(bool success, bytes ret);\\n\\n    error AlreadyInit();\\n    error NotCaller();\\n\\n    function initialize(\\n        address caller_,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) external payable {\\n        if (init) revert AlreadyInit();\\n        caller = caller_;\\n        init = true;\\n        if (commands.length != 0) {\\n            execute(commands, state);\\n        }\\n    }\\n\\n    function execute(bytes32[] calldata commands, bytes[] calldata state) public returns (bytes[] memory data) {\\n        if (msg.sender != caller) revert NotCaller();\\n        Destroyer destroyer = new Destroyer();\\n        (bool success, bytes memory ret) = address(destroyer).delegatecall(\\n            abi.encodeWithSelector(destroyer.kill.selector, commands, state)\\n        );\\n        emit DelegateCallReturn(success, ret);\\n        return data;\\n    }\\n}\\n\"\n    },\n    \"contracts/test/DumbEnsoWallet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ncontract DumbEnsoWallet {\\n    address public caller;\\n\\n    event VMData(bytes32[] commands, bytes[] state);\\n    event SenderData(address sender, uint256 value);\\n\\n    // Already initialized\\n    error AlreadyInit();\\n    // Not caller\\n    error NotCaller();\\n    // Invalid address\\n    error InvalidAddress();\\n\\n    function initialize(\\n        address caller_,\\n        bytes32[] calldata commands,\\n        bytes[] calldata state\\n    ) external payable {\\n        if (caller != address(0)) revert AlreadyInit();\\n        caller = caller_;\\n        if (commands.length != 0) {\\n            execute(commands, state);\\n        }\\n    }\\n\\n    function execute(bytes32[] calldata commands, bytes[] calldata state) public payable returns (bytes[] memory) {\\n        return _execute(commands, state);\\n    }\\n\\n    function _execute(bytes32[] calldata commands, bytes[] memory state) internal returns (bytes[] memory) {\\n        emit VMData(commands, state);\\n        emit SenderData(msg.sender, msg.value);\\n        // TODO: foundry bug?\\n        //      comparing to address(this) / msg.sender doesn't return the address alone\\n        //           ie.\\n        //           val: EnsoWalletFactoryTest: [0xb4c79dab8f259c7aee6e5b2aa729821864227e84])\\n        //           val: 0xb42486fb2979f5f97072f2f4af6673782f846963)\\n        // if (msg.sender != caller) revert NotCaller();\\n        return state;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\n    },\n    \"contracts/test/Events.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ncontract Events {\\n    event LogBytes(bytes message);\\n    event LogString(string message);\\n    event LogBytes32(bytes32 message);\\n    event LogUint(uint256 message);\\n\\n    function logBytes(bytes calldata message) external {\\n        emit LogBytes(message);\\n    }\\n\\n    function logString(string calldata message) external {\\n        emit LogString(message);\\n    }\\n\\n    function logBytes32(bytes32 message) external {\\n        emit LogBytes32(message);\\n    }\\n\\n    function logUint(uint256 message) external {\\n        emit LogUint(message);\\n    }\\n}\\n\"\n    },\n    \"contracts/test/PayableEvents.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ncontract PayableEvents {\\n    event LogBytes(bytes message);\\n    event LogString(string message);\\n    event LogBytes32(bytes32 message);\\n    event LogUint(uint256 message);\\n\\n    function logBytes(bytes calldata message) external payable {\\n        emit LogBytes(message);\\n    }\\n\\n    function logString(string calldata message) external payable {\\n        emit LogString(message);\\n    }\\n\\n    function logBytes32(bytes32 message) external payable {\\n        emit LogBytes32(message);\\n    }\\n\\n    function logUint(uint256 message) external payable {\\n        emit LogUint(message);\\n    }\\n\\n    function logValue() external payable {\\n        emit LogUint(msg.value);\\n    }\\n}\\n\"\n    },\n    \"contracts/test/TupleFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nstruct Example {\\n    uint256 a;\\n    string b;\\n}\\n\\ncontract TupleFactory {\\n    uint256 exampleInt1 = 0xcafe;\\n    uint256 exampleInt2 = 0xdead;\\n    uint256 exampleInt3 = 0xbeef;\\n    string exampleString = \\\"Hello World!Hello World!Hello World!Hello World!Hello World!\\\"; // 5x \\\"Hello World!\\\"\\n    Example exampleStruct = Example(exampleInt1, exampleString);\\n\\n    string[] exampleStringArray;\\n    uint256[] exampleIntArray;\\n    Example[] exampleStructArray;\\n    bytes10 exampleBytes;\\n\\n    constructor() {\\n        exampleStringArray.push(exampleString);\\n        exampleStringArray.push(exampleString);\\n\\n        exampleIntArray.push(exampleInt1);\\n        exampleIntArray.push(exampleInt2);\\n        exampleIntArray.push(exampleInt3);\\n\\n        exampleStructArray.push(Example(exampleInt1, exampleString));\\n        exampleStructArray.push(Example(exampleInt2, exampleString));\\n        exampleStructArray.push(Example(exampleInt3, exampleString));\\n\\n        assembly {\\n            sstore(exampleBytes.slot, sload(exampleString.slot))\\n        }\\n    }\\n\\n    function allTypesTuple()\\n        public\\n        view\\n        returns (\\n            uint256,\\n            string memory,\\n            uint256[] memory,\\n            string[] memory,\\n            Example memory,\\n            Example[] memory\\n        )\\n    {\\n        return (exampleInt1, exampleString, exampleIntArray, exampleStringArray, exampleStruct, exampleStructArray);\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"viaIR\": true,\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 100000\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "c5bd95db501c40a4c333b1143683ebdd",
      "transactionHash": "0xe1e333961bce7a18f863ad9a702e397e35a52b0f63dfd20cdc8316c7e35455e2",
      "args": []
    },
    "decoded": {
      "from": "0xf754916D90B109AE8E405FD34064cF6Df23947eb",
      "gasPrice": "35108458418",
      "gasLimit": "1330468",
      "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
      "value": "0",
      "nonce": 14,
      "data": "0x000000000000000000000000000000000000000000000000000000000000000060808060405234610016576116da908161001c8239f35b600080fdfe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c908163158ef93e1461006e5750806387258e8e14610065578063de792d5f1461005c5763fc9c8d390361000e576100576103c9565b61000e565b506100576102f5565b506100576100e8565b346100af57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100af5760ff905460a01c16151560805260206080f35b80fd5b9181601f840112156100e35782359167ffffffffffffffff83116100e3576020808501948460051b0101116100e357565b600080fd5b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e35760043573ffffffffffffffffffffffffffffffffffffffff811681036100e35767ffffffffffffffff6024358181116100e3576101549036906004016100b2565b90916044359081116100e35761016e9036906004016100b2565b909361018060005460ff9060a01c1690565b6101e5576101c99073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff00000000000000000000000000000000000000006000541617600055565b816101d057005b610019936101df91369161050a565b9161076e565b60046040517fef34ca5c000000000000000000000000000000000000000000000000000000008152fd5b60005b8381106102225750506000910152565b8181015183820152602001610212565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361026e8151809281875287808801910161020f565b0116010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106102a95750505050505090565b90919293949584806102e5837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a51610232565b9801930193019194939290610299565b5060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e35767ffffffffffffffff6004358181116100e3576103419036906004016100b2565b90916024359081116100e35761035b9036906004016100b2565b92909173ffffffffffffffffffffffffffffffffffffffff60005416330361039f576101df61038f9361039b95369161050a565b60405191829182610275565b0390f35b60046040517f16c618d8000000000000000000000000000000000000000000000000000000008152fd5b50346100e35760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100e357602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761048d57604052565b61049561041c565b604052565b60209067ffffffffffffffff81116104b4575b60051b0190565b6104bc61041c565b6104ad565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff81116104fd575b01160190565b61050561041c565b6104f7565b929190926105178461049a565b916040946105278651948561044c565b839581855260208095019160051b8401938385116100e35780925b8584106105525750505050505050565b833567ffffffffffffffff81116100e357820185601f820112156100e35780359161057c836104c1565b6105888651918261044c565b838152878a85850101116100e35760008a858196828097018386013783010152815201930192610542565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91908110156105f35760051b0190565b6104bc6105b3565b6020918151811015610610575b60051b010190565b6106186105b3565b610608565b3d15610648573d9061062e826104c1565b9161063c604051938461044c565b82523d6000602084013e565b606090565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82019182116106aa57565b6106b261064d565b565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082019182116106aa57565b604051906040820182811067ffffffffffffffff82111761072c575b604052600782527f556e6b6e6f776e000000000000000000000000000000000000000000000000006020830152565b61073461041c565b6106fd565b73ffffffffffffffffffffffffffffffffffffffff61076b949360609383521660208201528160408201520190610232565b90565b9060005b81811061077f5750505090565b61078a8183856105e3565b604091903560d881901c838116159283610b5a57600101936107ad8587896105e3565b355b60038381168061094e57505060008091602090818616158314610937576107f9907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165af49361082161061d565b945b156108a55750506080161561086b57600192917fff000000000000000000000000000000000000000000000000000000000000006108659260581b1687611624565b01610772565b90600192957fff0000000000000000000000000000000000000000000000000000000000000061089f9360581b1690611578565b93610865565b61090b9250938573ffffffffffffffffffffffffffffffffffffffff95825161092d575b1561091e57905b80511561090f57915b519485947fef3dcb2f000000000000000000000000000000000000000000000000000000008652169060048501610739565b0390fd5b506109186106e1565b916108d9565b6109279061067d565b906108d0565b91604401916108c9565b607f6109479160f81c168c6105fb565b51906107fb565b600181036109dc575050600080916020908186161583146109c557610996907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b815191018273ffffffffffffffffffffffffffffffffffffffff88165af1936109bf61061d565b94610823565b607f6109d59160f81c168c6105fb565b5190610998565b60028103610a6357505060008091602090818616158314610a4c57610a24907fffffffff0000000000000000000000000000000000000000000000000000000088168d610c19565b905b8151910173ffffffffffffffffffffffffffffffffffffffff87165afa936109bf61061d565b607f610a5c9160f81c168c6105fb565b5190610a26565b03610afc576000809160209081610a7e8d8360f81c906105fb565b51015190828716158414610ae557610abc9060081b7fffffffff0000000000000000000000000000000000000000000000000000000089168e610c19565b915b825192019073ffffffffffffffffffffffffffffffffffffffff88165af1936109bf61061d565b607f610af59160f01c168d6105fb565b5191610abe565b50517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c69642063616c6c74797065000000000000000000000000000000006044820152606490fd5b9379ffffffffffffffffffffffffffffffffffffffffffffffffffff8360281b176107af565b60405190610160820182811067ffffffffffffffff821117610baf575b604052600a8252610140366020840137565b610bb761041c565b610b9d565b90600482018092116106aa57565b90610bd4826104c1565b610be1604051918261044c565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610c0f82946104c1565b0190602036910137565b929192600090818291610c2a610b80565b916060928596865b60209081891015610ec5578b891a60ff8114610d34576080811615610d265760fe8103610cc25750865115610c75575b90600191875101975b0197019695610c32565b9550600190604051610cb981610c8d89858301610275565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261044c565b96909150610c62565b92989197949193909260fd8103610cf35750916001949391610ce5938d8861101f565b989294919790979493610c6b565b60fc8103610d0d5750916001949391610ce5938d886110ca565b610d2090600193969992959a9488610f7c565b97610c6b565b610d20906001939288610eda565b5097985090969194939250610d5291610d4d9150610bbc565b610bca565b97602095868a0152600093849185965b898810610d755750505050505050505050565b889081891015610eb8575b8c838a1a6080811615610e935760fe8103610df1575081610de1826001959460248d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe096010152610dd083610bbc565b610dda8c516106b4565b918c611692565b885101019701975b019695610d62565b929895919260fd8103610e2757509160019991858589868560248c610e189a0101526111c7565b90509891979097940197610de9565b60fc8103610e4957509160019991858589868560248c610e189a010152611218565b92610e8a87602493610e798b859b9e979b610e6a607f60019b1680936105fb565b5151978895850101528c6105fb565b5190610e8485610bbc565b91611680565b01970197610de9565b9060248a85610eaa607f600198979e96168c6105fb565b510151920101520197610de9565b610ec06105b3565b610d80565b9050610d4d919750610d529295949350610bbc565b610eeb90607f6020939416906105fb565b515103610ef85760200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f537461746963207374617465207661726961626c6573206d757374206265203360448201527f32206279746573000000000000000000000000000000000000000000000000006064820152fd5b607f610f8a929316906105fb565b5151601f8116610f9b570160200190565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f44796e616d6963207374617465207661726961626c6573206d7573742062652060448201527f61206d756c7469706c65206f66203332206279746573000000000000000000006064820152fd5b92919093946001019360208510156110bd575b6020611043607f83881a16866105fb565b51510361105f5760206110579601936110ca565b929391929091565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4172726179206c656e677468206d7573742062652033322062797465730000006044820152fd5b6110c56105b3565b611032565b9493909592600091600180960195808301986020809301985b8389106110f65750505050505093929190565b81891a60808116156111b45760fb810361112057505050505061111990836105fb565b5293929190565b9a849b978860fd869d949697999a9c959c146000146111605750906111489392918b8661101f565b9b929b9a919a96909a9b975b019501979092916110e3565b60fc9193959798508092949650146000146111985750928492611188928b958b8e99986110ca565b9b929b9a919a96909a9b97611154565b9a6111ae81939c87958d9799989d949a9d610f7c565b9a611154565b936111ae849582949b989c849694610eda565b93929190602060016111ff9801968188101561120b575b816111ee607f868b1a16856105fb565b510151602482890101520194611218565b92939192602090910191565b6112136105b3565b6111de565b949095929196939660009661122d89856105fb565b51906001808584019b019601975b602095868a101561138457848a1a60808116156113555760fb810361126857505050505050505093929190565b9b8498889d958660fd8a9f9b989e9596979a999e146000146112bc5750602486979861129b9697010152848c89886111c7565b919c9781019095019a91979094019501926001905b0197929390949161123b565b92949650509193955060fc81146000146113045750916112eb918594938960248f988f010152848c8988611218565b919c9781019095019a91979094019501926001906112b0565b9b8860248d83949b9f956113478a61133c8d607f60019b9e9d9c9e169061132b82826105fb565b5151988998899889960101526105fb565b518b610e8485610bbc565b019e019801019a01936112b0565b96869b81929497602483611373999e99607f6001989a9d168c6105fb565b5101519188010152019a01936112b0565b5050505050505093929190565b1561139857565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f28737461746963290000000000000000000000000000000000000000000000006064820152fd5b1561142357565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060448201527f287661726961626c6529000000000000000000000000000000000000000000006064820152fd5b60209081818403126100e357805167ffffffffffffffff918282116100e357019083601f830112156100e35781516114de8161049a565b946040926114ee8451978861044c565b828752858088019360051b860101948286116100e357868101935b86851061151b57505050505050505090565b84518381116100e35782019084603f830112156100e3578882015190611540826104c1565b61154c8951918261044c565b828152868984860101116100e35761156d8b949385948b868501910161020f565b815201940193611509565b91908060f81c60ff811461161e5760808116156115f15760fe036115ab575061076b9150602080825183010191016114a7565b610fe06020917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838501946115e28587511461141c565b5101845260f31c168301015290565b829150607f90611607602061161a955114611391565b169061161382856105fb565b52826105fb565b5090565b50505090565b9060f81c9060ff821461167b5760209161165c9161164c855185810180911161167357610bca565b61165683836105fb565b526105fb565b51918051604084018184840160045afa5051910152565b610d4d61064d565b505050565b916020809185930101920160045afa50565b910160200190829060400160045afa5056fea26469706673582212202d16beb5a60d0239735f2ab06959bf3b6baecba90639ee8fe0fe0ae82c084a4964736f6c63430008100033",
      "r": "0x155bf8c8832ff7ea153aabc3d135ede2bdea2dc25feb2a1647326fdf91261d0a",
      "s": "0x71ccc9d290a55e70de262ec8e2bfad8684af5d25c0969a645926561c3e782ada",
      "v": 310,
      "chainId": 137
    }
  }
}