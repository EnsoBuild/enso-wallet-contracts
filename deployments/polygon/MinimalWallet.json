{
  "address": "0xb8c70beFAd54641951FC43604d5e0CEFeE5F0565",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EXECUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum MinimalWallet.Protocol",
              "name": "protocol",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "operators",
              "type": "address[]"
            }
          ],
          "internalType": "struct MinimalWallet.ApprovalNote[]",
          "name": "notes",
          "type": "tuple[]"
        }
      ],
      "name": "revokeApprovals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "revokeERC1155Approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "erc20",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "revokeERC20Approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "erc721",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "revokeERC721Approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum MinimalWallet.Protocol",
              "name": "protocol",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct MinimalWallet.TransferNote[]",
          "name": "notes",
          "type": "tuple[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC1155s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "erc20s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC20s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "erc721",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC721s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x31e69034816a9423f7df8fc1420d421abf92066c3f5cc61a2ad03300978d9a0f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf754916D90B109AE8E405FD34064cF6Df23947eb",
    "contractAddress": null,
    "transactionIndex": 102,
    "gasUsed": "1409402",
    "logsBloom": "0x
    "blockHash": "0xb182deb92cffe6e5979ee114aae0d7553460582ec2c4dc1e09e2fbb1ae92dbb7",
    "transactionHash": "0x31e69034816a9423f7df8fc1420d421abf92066c3f5cc61a2ad03300978d9a0f",
    "logs": [
      {
        "transactionIndex": 102,
        "blockNumber": 36211195,
        "transactionHash": "0x31e69034816a9423f7df8fc1420d421abf92066c3f5cc61a2ad03300978d9a0f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f754916d90b109ae8e405fd34064cf6df23947eb",
          "0x00000000000000000000000098c27cc3f0301b6272049dc3f972e2f542780629"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000998f54c2e049400000000000000000000000000000000000000000000000053681c9b5dd1914460000000000000000000000000000000000000000000002d364e0ae2cdbc1b0a500000000000000000000000000000000000000000000000535e83a611a38cb060000000000000000000000000000000000000000000002d3657a3d819ea1f9e5",
        "logIndex": 437,
        "blockHash": "0xb182deb92cffe6e5979ee114aae0d7553460582ec2c4dc1e09e2fbb1ae92dbb7"
      }
    ],
    "blockNumber": 36211195,
    "cumulativeGasUsed": "19309632",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "57e8446a1a1beec4cd2f90e168165735",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MinimalWallet.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"internalType\":\"struct MinimalWallet.ApprovalNote[]\",\"name\":\"notes\",\"type\":\"tuple[]\"}],\"name\":\"revokeApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"revokeERC1155Approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"revokeERC20Approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"revokeERC721Approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MinimalWallet.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MinimalWallet.TransferNote[]\",\"name\":\"notes\",\"type\":\"tuple[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC1155s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"erc20s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wallet/MinimalWallet.sol\":\"MinimalWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access/ACL.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/StorageAPI.sol\\\";\\n\\nabstract contract ACL {\\n    using StorageAPI for bytes32;\\n\\n    error NotPermitted();\\n\\n    modifier isPermitted(bytes32 role) {\\n        bool permitted = _getPermission(role, msg.sender); // TODO: support GSN/Account abstraction\\n        if (!permitted) revert NotPermitted();\\n        _;\\n    }\\n\\n    function getPermission(\\n        bytes32 role,\\n        address account\\n    ) external view returns (bool) {\\n        return _getPermission(role, account);\\n    }\\n\\n    function _getPermission(\\n        bytes32 role,\\n        address account\\n    ) internal view returns (bool) {\\n        bytes32 key = _getKey(role, account);\\n        return key.getBool();\\n    }\\n\\n    function _getKey(\\n        bytes32 role,\\n        address account\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(role, account));\\n    }\\n}\\n\",\"keccak256\":\"0x71cb738a1f5821286d29a56b88ef6cb90e0c5b55a0f2dac4135270126ddfa5f4\",\"license\":\"Unlicense\"},\"contracts/access/Roles.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.16;\\n\\nabstract contract Roles {\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"enso.access.roles.owner\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"enso.access.roles.executor\\\");\\n}\\n\",\"keccak256\":\"0x65a81a27906c4fa89c2f8960acc198e0efabd40dc698080f2b75dc2651ef95bf\",\"license\":\"Unlicense\"},\"contracts/libraries/StorageAPI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nlibrary StorageAPI {\\n    function setBytes(bytes32 key, bytes memory data) internal {\\n        bytes32 slot = keccak256(abi.encodePacked(key));\\n        assembly {\\n            let length := mload(data)\\n            switch gt(length, 0x1F)\\n            case 0x00 {\\n                sstore(key, or(mload(add(data, 0x20)), mul(length, 2)))\\n            }\\n            case 0x01 {\\n                sstore(key, add(mul(length, 2), 1))\\n                for {let i:= 0} lt(mul(i, 0x20), length) {i := add(i, 0x01)} {\\n                    sstore(add(slot, i), mload(add(data, mul(add(i, 1), 0x20))))\\n                }\\n            }\\n        }\\n    }\\n\\n    function setBytes32(bytes32 key, bytes32 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setAddress(bytes32 key, address a) internal {\\n        assembly {\\n            sstore(key, a)\\n        }\\n    }\\n\\n    function setUint256(bytes32 key, uint256 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setInt256(bytes32 key, int256 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setBool(bytes32 key, bool val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function getBytes(bytes32 key) internal view returns (bytes memory data) {\\n        bytes32 slot = keccak256(abi.encodePacked(key));\\n        assembly {\\n            let length := sload(key)\\n            switch and(length, 0x01)\\n            case 0x00 {\\n                let decodedLength := div(and(length, 0xFF), 2)\\n                mstore(data, decodedLength)\\n                mstore(add(data, 0x20), and(length, not(0xFF)))\\n                mstore(0x40, add(data, 0x40))\\n            }\\n            case 0x01 {\\n                let decodedLength := div(length, 2)\\n                let i := 0\\n                mstore(data, decodedLength)\\n                for {} lt(mul(i, 0x20), decodedLength) {i := add(i, 0x01)} {\\n                    mstore(add(add(data, 0x20), mul(i, 0x20)), sload(add(slot, i)))\\n                }\\n                mstore(0x40, add(data, add(0x20, mul(i, 0x20))))\\n            }\\n        }\\n    }\\n\\n    function getBytes32(bytes32 key) internal view returns (bytes32 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getAddress(bytes32 key) internal view returns (address a) {\\n        assembly {\\n            a := sload(key)\\n        }\\n    }\\n\\n    function getUint256(bytes32 key) internal view returns (uint256 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getInt256(bytes32 key) internal view returns (int256 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getBool(bytes32 key) internal view returns (bool val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6980485003165b5a78a53d005d05e2e78e8c7727fb716c1d8f8426d97002469f\",\"license\":\"MIT\"},\"contracts/wallet/MinimalWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"../access/ACL.sol\\\";\\nimport \\\"../access/Roles.sol\\\";\\n\\ncontract MinimalWallet is ACL, Roles, ERC721Holder, ERC1155Holder {\\n    using SafeERC20 for IERC20;\\n\\n    enum Protocol {\\n        ETH,\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    struct TransferNote {\\n        Protocol protocol;\\n        address token;\\n        uint256[] ids;\\n        uint256[] amounts;\\n    }\\n\\n    struct ApprovalNote {\\n        Protocol protocol;\\n        address token;\\n        address[] operators;\\n    }\\n\\n    error WithdrawFailed();\\n    error InvalidArrayLength();\\n\\n    ////////////////////////////////////////////////////\\n    // External functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    function withdraw(TransferNote[] memory notes) external isPermitted(OWNER_ROLE) {\\n        TransferNote memory note;\\n        Protocol protocol;\\n        uint256[] memory ids;\\n        uint256[] memory amounts;\\n\\n        uint256 length = notes.length;\\n        for (uint256 i; i < length; ) {\\n            note = notes[i];\\n            protocol = note.protocol;\\n            if (protocol == Protocol.ETH) {\\n                amounts = note.amounts;\\n                if (amounts.length != 1) revert InvalidArrayLength();\\n                _withdrawETH(amounts[0]);\\n            } else if (protocol == Protocol.ERC20) {\\n                amounts = note.amounts;\\n                if (amounts.length != 1) revert InvalidArrayLength();\\n                _withdrawERC20(IERC20(note.token), amounts[0]);\\n            } else if (protocol == Protocol.ERC721) {\\n                ids = note.ids;\\n                _withdrawERC721s(IERC721(note.token), ids);\\n            } else if (protocol == Protocol.ERC1155) {\\n                ids = note.ids;\\n                amounts = note.amounts;\\n                _withdrawERC1155s(IERC1155(note.token), ids, amounts);\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function withdrawETH(uint256 amount) external isPermitted(OWNER_ROLE) {\\n        _withdrawETH(amount);\\n    }\\n\\n    function withdrawERC20s(\\n        IERC20[] memory erc20s,\\n        uint256[] memory amounts\\n    ) external isPermitted(OWNER_ROLE) {\\n        uint256 length = erc20s.length;\\n        if (amounts.length != length) revert InvalidArrayLength();\\n        for (uint256 i; i < length; ) {\\n            _withdrawERC20(erc20s[i], amounts[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function withdrawERC721s(\\n        IERC721 erc721,\\n        uint256[] memory ids\\n    ) external isPermitted(OWNER_ROLE) {\\n        _withdrawERC721s(erc721, ids);\\n    }\\n\\n    function withdrawERC1155s(\\n        IERC1155 erc1155,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) external isPermitted(OWNER_ROLE) {\\n        _withdrawERC1155s(erc1155, ids, amounts);\\n    }\\n\\n    function revokeApprovals(ApprovalNote[] memory notes) external isPermitted(OWNER_ROLE) {\\n        ApprovalNote memory note;\\n        Protocol protocol;\\n\\n        uint256 length = notes.length;\\n        for (uint256 i; i < length; ) {\\n            note = notes[i];\\n            protocol = note.protocol;\\n            if (protocol == Protocol.ERC20) {\\n                _revokeERC20Approvals(IERC20(note.token), note.operators);\\n            } else if (protocol == Protocol.ERC721) {\\n                _revokeERC721Approvals(IERC721(note.token), note.operators);\\n            } else if (protocol == Protocol.ERC1155) {\\n                _revokeERC1155Approvals(IERC1155(note.token), note.operators);\\n            }\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function revokeERC20Approvals(\\n        IERC20 erc20,\\n        address[] memory operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC20Approvals(erc20, operators);\\n    }\\n\\n    function revokeERC721Approvals(\\n        IERC721 erc721,\\n        address[] memory operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC721Approvals(erc721, operators);\\n    }\\n\\n    function revokeERC1155Approvals(\\n        IERC1155 erc1155,\\n        address[] memory operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC1155Approvals(erc1155, operators);\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    // Internal functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    function _withdrawETH(uint256 amount) internal {\\n        (bool success, ) = msg.sender.call{ value : amount }(\\\"\\\");\\n        if (!success) revert WithdrawFailed();\\n    }\\n\\n    function _withdrawERC20(\\n        IERC20 erc20,\\n        uint256 amount\\n    ) internal {\\n        erc20.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function _withdrawERC721s(\\n        IERC721 erc721,\\n        uint256[] memory ids\\n    ) internal {\\n        uint256 length = ids.length;\\n        for (uint256 i; i < length; ) {\\n            erc721.safeTransferFrom(address(this), msg.sender, ids[i]);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function _withdrawERC1155s(\\n        IERC1155 erc1155,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal {\\n        // safeBatchTransferFrom will validate the array lengths\\n        erc1155.safeBatchTransferFrom(address(this), msg.sender, ids, amounts, \\\"\\\");\\n    }\\n\\n    function _revokeERC20Approvals(\\n        IERC20 erc20,\\n        address[] memory operators\\n    ) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc20.safeApprove(operators[i], 0);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function _revokeERC721Approvals(\\n        IERC721 erc721,\\n        address[] memory operators\\n    ) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc721.setApprovalForAll(operators[i], false);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    function _revokeERC1155Approvals(\\n        IERC1155 erc1155,\\n        address[] memory operators\\n    ) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc1155.setApprovalForAll(operators[i], false);\\n            unchecked { ++i; }\\n        }\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    // Fallback functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x55e867ce6add024f2054e243631cf8f6489261e8f9bb3061c31fab4567c34924\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576118a8908161001c8239f35b600080fdfe6080604081815260049182361015610022575b505050361561002057600080fd5b005b600090813560e01c90816301ffc9a714610e825750806307bd026514610e295780630fe786e1146101e1578063150b7a0214610d9d57806331b455a514610d2b57806356255c5314610cb957806360d6c7cf14610c405780638a2685a914610acd578063a4508b1f14610a18578063bc197c811461095b578063dedd6524146105c8578063e1084a13146102db578063e58378bb1461027e578063e5cb3703146101e1578063f14210a6146101695763f23a6e610361001257346101665760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016657610112610f3f565b5061011b61103b565b506084359067ffffffffffffffff8211610166575060209261013f9136910161111f565b50517ff23a6e61000000000000000000000000000000000000000000000000000000008152f35b80fd5b5091346101dd5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd576101a3336111c4565b54156101b6576101b3903561129d565b51f35b90517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b5091346101dd57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd57610219610f3f565b60243567ffffffffffffffff811161027a57610238903690840161107f565b91610242336111c4565b54156102535750906101b3916117cb565b83517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b8480fd5b5090346102d757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d757602090517f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1c8152f35b5080fd5b5091346101dd576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105c45781359067ffffffffffffffff8083116105c057366023840112156105c057828401359061033982611023565b9361034687519586610fe2565b8285528385016024809460051b830101913683116105bc57848101915b8383106104ee5750505050610377336111c4565b54156104c657855190606082019081118282101761049b576060918791825288815288858201520152825192865b8481106103b157878751f35b6103bb8183611259565b51908151918783101561047057600192808403610400575085810151908901516103fa9173ffffffffffffffffffffffffffffffffffffffff16611740565b016103a5565b60028103610435575085810151908901516104309173ffffffffffffffffffffffffffffffffffffffff166117cb565b6103fa565b600314610443575b506103fa565b858101519089015161046a9173ffffffffffffffffffffffffffffffffffffffff166117cb565b3861043d565b848a60218a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b82886041887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8486517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b82358581116105b8578201606091827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc83360301126105b4578b5192830183811088821117610589578c52878201358b8110156105855783526105536044830161105e565b89840152606482013592878411610585576105768a94938a86953692010161107f565b8d820152815201920191610363565b8d80fd5b888e60418e7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8c80fd5b8b80fd5b8980fd5b8580fd5b8380fd5b5091346101dd57602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105c45780359167ffffffffffffffff908184116105c057366023850112156105c057838301359061062882611023565b9461063587519687610fe2565b8286528186016024809460051b830101913683116105bc57848101915b8383106108795750505050610666336111c4565b54156108515785519260808401908111848210176108265786528683528681840152606080848189819701520152845194875b8681106106a557888851f35b6106af8183611259565b518051878110156107fb57869190806107115750015160018151036106e957906106e36106dd60019361121d565b5161129d565b01610699565b8689517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b600192508281036107875750868101519182510361075f576001929161075373ffffffffffffffffffffffffffffffffffffffff8761075a940151169161121d565b51906112e3565b6106e3565b878a517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b6001939250600281036107bc57508073ffffffffffffffffffffffffffffffffffffffff868c61075a94015192015116611580565b6003146107ca575b506106e3565b808a6107f592015173ffffffffffffffffffffffffffffffffffffffff878a84015193015116611668565b386107c4565b858b60218a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b82886041877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8386517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b82358781116105b8578201608091827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc83360301126105b4578b519283018381108a821117610930578c52878201358a8110156105855783526108de6044830161105e565b878401526064820135898111610585576108fd90893691850101611166565b8c840152608482013592898411610585576109208894938a869536920101611166565b6060820152815201920191610652565b888e60418d7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50346101665760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016657610993610f3f565b5061099c61103b565b5067ffffffffffffffff906044358281116102d7576109be9036908601611166565b506064358281116102d7576109d69036908601611166565b5060843591821161016657506020926109f19136910161111f565b50517fbc197c81000000000000000000000000000000000000000000000000000000008152f35b5091346101dd5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd57610a51610f3f565b67ffffffffffffffff906024358281116105c057610a729036908501611166565b916044359081116105c057610a8a9036908501611166565b92610a94336111c4565b5415610aa65750906101b39291611668565b84517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b5091346101dd57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd57803567ffffffffffffffff80821161027a573660238301121561027a5781830135610b2781611023565b92610b3486519485610fe2565b81845260209160248386019160051b83010191368311610c3c57602401905b828210610c25575050505060243590811161027a57610b759036908401611166565b90610b7f336111c4565b5415610bfd5780519283835103610bd65750845b838110610b9f57858551f35b80610bd073ffffffffffffffffffffffffffffffffffffffff610bc460019486611259565b51166107538387611259565b01610b93565b84517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b8284517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b838091610c318461105e565b815201910190610b53565b8880fd5b5091346101dd57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd5760209250610c7c61103b565b73ffffffffffffffffffffffffffffffffffffffff835191858301933584521683820152828152610cac81610faa565b5190205490519015158152f35b5091346101dd57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd57610cf1610f3f565b60243567ffffffffffffffff811161027a57610d109036908401611166565b91610d1a336111c4565b54156102535750906101b391611580565b5091346101dd57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd57610d63610f3f565b60243567ffffffffffffffff811161027a57610d82903690840161107f565b91610d8c336111c4565b54156102535750906101b391611740565b50346101665760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016657610dd5610f3f565b50610dde61103b565b506064359067ffffffffffffffff82116101665750602092610e029136910161111f565b50517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b5090346102d757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d757602090517fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b55612080308152f35b905083346101dd5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd57357fffffffff0000000000000000000000000000000000000000000000000000000081168091036101dd57602092507f4e2312e0000000000000000000000000000000000000000000000000000000008114908115610f15575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483610f0e565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610f6257565b600080fd5b67ffffffffffffffff8111610f7b57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff821117610f7b57604052565b6080810190811067ffffffffffffffff821117610f7b57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610f7b57604052565b67ffffffffffffffff8111610f7b5760051b60200190565b6024359073ffffffffffffffffffffffffffffffffffffffff82168203610f6257565b359073ffffffffffffffffffffffffffffffffffffffff82168203610f6257565b81601f82011215610f625780359161109683611023565b926110a46040519485610fe2565b808452602092838086019260051b820101928311610f62578301905b8282106110ce575050505090565b8380916110da8461105e565b8152019101906110c0565b67ffffffffffffffff8111610f7b57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b81601f82011215610f6257803590611136826110e5565b926111446040519485610fe2565b82845260208383010111610f6257816000926020809301838601378301015290565b81601f82011215610f625780359161117d83611023565b9261118b6040519485610fe2565b808452602092838086019260051b820101928311610f62578301905b8282106111b5575050505090565b813581529083019083016111a7565b60405173ffffffffffffffffffffffffffffffffffffffff60208201927f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1c84521660408201526040815261121781610faa565b51902090565b80511561122a5760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805182101561122a5760209160051b010190565b3d15611298573d9061127e826110e5565b9161128c6040519384610fe2565b82523d6000602084013e565b606090565b600080809260405190335af16112b161126d565b50156112b957565b60046040517f750b219c000000000000000000000000000000000000000000000000000000008152fd5b9061132f91604051917fa9059cbb00000000000000000000000000000000000000000000000000000000602084015233602484015260448301526044825261132a82610fc6565b611331565b565b73ffffffffffffffffffffffffffffffffffffffff16906040516040810181811067ffffffffffffffff821117610f7b576040526020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484830152803b1561147257906113ba9160008481959282888195519301915af16113b461126d565b906114d0565b8051806113c8575b50505050565b818491810103126102d7578201519081159182150361016657506113ee578080806113c2565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b606484604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b909190156114dc575090565b8151156114ec5750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b848110611569575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201611528565b81519060005b8281106115935750505050565b73ffffffffffffffffffffffffffffffffffffffff82166115b48286611259565b51813b15610f6257600080926064604093845195869384927f42842e0e00000000000000000000000000000000000000000000000000000000845230600485015233602485015260448401525af190811561162a5750906001929161161b575b5001611586565b61162490610f67565b38611614565b513d6000823e3d90fd5b90815180825260208080930193019160005b828110611654575050505090565b835185529381019392810192600101611646565b73ffffffffffffffffffffffffffffffffffffffff1691823b15610f625761170e926000928360206116dd948260405198899788967f2eb2c2d600000000000000000000000000000000000000000000000000000000885230600489015233602489015260a0604489015260a4880190611634565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9384888303016064890152611634565b85810392830160848701525201925af180156117345761172b5750565b61132f90610f67565b6040513d6000823e3d90fd5b90805191600091825b848110611757575050505050565b806117c573ffffffffffffffffffffffffffffffffffffffff61177c60019486611259565b5116604051907f095ea7b300000000000000000000000000000000000000000000000000000000602083015260248201526044878183015281526117bf81610fc6565b85611331565b01611749565b81519060005b8281106117de5750505050565b73ffffffffffffffffffffffffffffffffffffffff808316906118018387611259565b5116813b15610f6257600080926044604093845195869384927fa22cb46500000000000000000000000000000000000000000000000000000000845260048401528160248401525af190811561162a57509060019291611863575b50016117d1565b61186c90610f67565b3861185c56fea2646970667358221220619d640fd27ffa14b999fec6eeee0f6426864aa81927e88eba4612e02884d1a464736f6c63430008100033",
  "deployedBytecode": "0x6080604081815260049182361015610022575b505050361561002057600080fd5b005b600090813560e01c90816301ffc9a714610e825750806307bd026514610e295780630fe786e1146101e1578063150b7a0214610d9d57806331b455a514610d2b57806356255c5314610cb957806360d6c7cf14610c405780638a2685a914610acd578063a4508b1f14610a18578063bc197c811461095b578063dedd6524146105c8578063e1084a13146102db578063e58378bb1461027e578063e5cb3703146101e1578063f14210a6146101695763f23a6e610361001257346101665760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016657610112610f3f565b5061011b61103b565b506084359067ffffffffffffffff8211610166575060209261013f9136910161111f565b50517ff23a6e61000000000000000000000000000000000000000000000000000000008152f35b80fd5b5091346101dd5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd576101a3336111c4565b54156101b6576101b3903561129d565b51f35b90517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b5091346101dd57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd57610219610f3f565b60243567ffffffffffffffff811161027a57610238903690840161107f565b91610242336111c4565b54156102535750906101b3916117cb565b83517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b8480fd5b5090346102d757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d757602090517f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1c8152f35b5080fd5b5091346101dd576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105c45781359067ffffffffffffffff8083116105c057366023840112156105c057828401359061033982611023565b9361034687519586610fe2565b8285528385016024809460051b830101913683116105bc57848101915b8383106104ee5750505050610377336111c4565b54156104c657855190606082019081118282101761049b576060918791825288815288858201520152825192865b8481106103b157878751f35b6103bb8183611259565b51908151918783101561047057600192808403610400575085810151908901516103fa9173ffffffffffffffffffffffffffffffffffffffff16611740565b016103a5565b60028103610435575085810151908901516104309173ffffffffffffffffffffffffffffffffffffffff166117cb565b6103fa565b600314610443575b506103fa565b858101519089015161046a9173ffffffffffffffffffffffffffffffffffffffff166117cb565b3861043d565b848a60218a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b82886041887f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8486517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b82358581116105b8578201606091827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc83360301126105b4578b5192830183811088821117610589578c52878201358b8110156105855783526105536044830161105e565b89840152606482013592878411610585576105768a94938a86953692010161107f565b8d820152815201920191610363565b8d80fd5b888e60418e7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8c80fd5b8b80fd5b8980fd5b8580fd5b8380fd5b5091346101dd57602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105c45780359167ffffffffffffffff908184116105c057366023850112156105c057838301359061062882611023565b9461063587519687610fe2565b8286528186016024809460051b830101913683116105bc57848101915b8383106108795750505050610666336111c4565b54156108515785519260808401908111848210176108265786528683528681840152606080848189819701520152845194875b8681106106a557888851f35b6106af8183611259565b518051878110156107fb57869190806107115750015160018151036106e957906106e36106dd60019361121d565b5161129d565b01610699565b8689517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b600192508281036107875750868101519182510361075f576001929161075373ffffffffffffffffffffffffffffffffffffffff8761075a940151169161121d565b51906112e3565b6106e3565b878a517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b6001939250600281036107bc57508073ffffffffffffffffffffffffffffffffffffffff868c61075a94015192015116611580565b6003146107ca575b506106e3565b808a6107f592015173ffffffffffffffffffffffffffffffffffffffff878a84015193015116611668565b386107c4565b858b60218a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b82886041877f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8386517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b82358781116105b8578201608091827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc83360301126105b4578b519283018381108a821117610930578c52878201358a8110156105855783526108de6044830161105e565b878401526064820135898111610585576108fd90893691850101611166565b8c840152608482013592898411610585576109208894938a869536920101611166565b6060820152815201920191610652565b888e60418d7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50346101665760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016657610993610f3f565b5061099c61103b565b5067ffffffffffffffff906044358281116102d7576109be9036908601611166565b506064358281116102d7576109d69036908601611166565b5060843591821161016657506020926109f19136910161111f565b50517fbc197c81000000000000000000000000000000000000000000000000000000008152f35b5091346101dd5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd57610a51610f3f565b67ffffffffffffffff906024358281116105c057610a729036908501611166565b916044359081116105c057610a8a9036908501611166565b92610a94336111c4565b5415610aa65750906101b39291611668565b84517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b5091346101dd57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd57803567ffffffffffffffff80821161027a573660238301121561027a5781830135610b2781611023565b92610b3486519485610fe2565b81845260209160248386019160051b83010191368311610c3c57602401905b828210610c25575050505060243590811161027a57610b759036908401611166565b90610b7f336111c4565b5415610bfd5780519283835103610bd65750845b838110610b9f57858551f35b80610bd073ffffffffffffffffffffffffffffffffffffffff610bc460019486611259565b51166107538387611259565b01610b93565b84517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b8284517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b838091610c318461105e565b815201910190610b53565b8880fd5b5091346101dd57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd5760209250610c7c61103b565b73ffffffffffffffffffffffffffffffffffffffff835191858301933584521683820152828152610cac81610faa565b5190205490519015158152f35b5091346101dd57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd57610cf1610f3f565b60243567ffffffffffffffff811161027a57610d109036908401611166565b91610d1a336111c4565b54156102535750906101b391611580565b5091346101dd57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd57610d63610f3f565b60243567ffffffffffffffff811161027a57610d82903690840161107f565b91610d8c336111c4565b54156102535750906101b391611740565b50346101665760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016657610dd5610f3f565b50610dde61103b565b506064359067ffffffffffffffff82116101665750602092610e029136910161111f565b50517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b5090346102d757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102d757602090517fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b55612080308152f35b905083346101dd5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101dd57357fffffffff0000000000000000000000000000000000000000000000000000000081168091036101dd57602092507f4e2312e0000000000000000000000000000000000000000000000000000000008114908115610f15575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483610f0e565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610f6257565b600080fd5b67ffffffffffffffff8111610f7b57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff821117610f7b57604052565b6080810190811067ffffffffffffffff821117610f7b57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610f7b57604052565b67ffffffffffffffff8111610f7b5760051b60200190565b6024359073ffffffffffffffffffffffffffffffffffffffff82168203610f6257565b359073ffffffffffffffffffffffffffffffffffffffff82168203610f6257565b81601f82011215610f625780359161109683611023565b926110a46040519485610fe2565b808452602092838086019260051b820101928311610f62578301905b8282106110ce575050505090565b8380916110da8461105e565b8152019101906110c0565b67ffffffffffffffff8111610f7b57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b81601f82011215610f6257803590611136826110e5565b926111446040519485610fe2565b82845260208383010111610f6257816000926020809301838601378301015290565b81601f82011215610f625780359161117d83611023565b9261118b6040519485610fe2565b808452602092838086019260051b820101928311610f62578301905b8282106111b5575050505090565b813581529083019083016111a7565b60405173ffffffffffffffffffffffffffffffffffffffff60208201927f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1c84521660408201526040815261121781610faa565b51902090565b80511561122a5760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805182101561122a5760209160051b010190565b3d15611298573d9061127e826110e5565b9161128c6040519384610fe2565b82523d6000602084013e565b606090565b600080809260405190335af16112b161126d565b50156112b957565b60046040517f750b219c000000000000000000000000000000000000000000000000000000008152fd5b9061132f91604051917fa9059cbb00000000000000000000000000000000000000000000000000000000602084015233602484015260448301526044825261132a82610fc6565b611331565b565b73ffffffffffffffffffffffffffffffffffffffff16906040516040810181811067ffffffffffffffff821117610f7b576040526020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484830152803b1561147257906113ba9160008481959282888195519301915af16113b461126d565b906114d0565b8051806113c8575b50505050565b818491810103126102d7578201519081159182150361016657506113ee578080806113c2565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b606484604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b909190156114dc575090565b8151156114ec5750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b848110611569575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b818101830151868201604401528593508201611528565b81519060005b8281106115935750505050565b73ffffffffffffffffffffffffffffffffffffffff82166115b48286611259565b51813b15610f6257600080926064604093845195869384927f42842e0e00000000000000000000000000000000000000000000000000000000845230600485015233602485015260448401525af190811561162a5750906001929161161b575b5001611586565b61162490610f67565b38611614565b513d6000823e3d90fd5b90815180825260208080930193019160005b828110611654575050505090565b835185529381019392810192600101611646565b73ffffffffffffffffffffffffffffffffffffffff1691823b15610f625761170e926000928360206116dd948260405198899788967f2eb2c2d600000000000000000000000000000000000000000000000000000000885230600489015233602489015260a0604489015260a4880190611634565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9384888303016064890152611634565b85810392830160848701525201925af180156117345761172b5750565b61132f90610f67565b6040513d6000823e3d90fd5b90805191600091825b848110611757575050505050565b806117c573ffffffffffffffffffffffffffffffffffffffff61177c60019486611259565b5116604051907f095ea7b300000000000000000000000000000000000000000000000000000000602083015260248201526044878183015281526117bf81610fc6565b85611331565b01611749565b81519060005b8281106117de5750505050565b73ffffffffffffffffffffffffffffffffffffffff808316906118018387611259565b5116813b15610f6257600080926044604093845195869384927fa22cb46500000000000000000000000000000000000000000000000000000000845260048401528160248401525af190811561162a57509060019291611863575b50016117d1565b61186c90610f67565b3861185c56fea2646970667358221220619d640fd27ffa14b999fec6eeee0f6426864aa81927e88eba4612e02884d1a464736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}