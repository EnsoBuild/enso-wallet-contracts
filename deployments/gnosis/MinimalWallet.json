{
  "address": "0xb8D76a79B60449deda533B9eeE68a1efcCc9a04C",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermitted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EXECUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MODULE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum MinimalWallet.Protocol",
              "name": "protocol",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "operators",
              "type": "address[]"
            }
          ],
          "internalType": "struct MinimalWallet.ApprovalNote[]",
          "name": "notes",
          "type": "tuple[]"
        }
      ],
      "name": "revokeApprovals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "revokeERC1155Approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "erc20",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "revokeERC20Approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "erc721",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "operators",
          "type": "address[]"
        }
      ],
      "name": "revokeERC721Approvals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum MinimalWallet.Protocol",
              "name": "protocol",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "ids",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct MinimalWallet.TransferNote[]",
          "name": "notes",
          "type": "tuple[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC1155",
          "name": "erc1155",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC1155s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "erc20s",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC20s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "erc721",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawERC721s",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd8856475b1c18e6126c37678a8d87f7c4d573743da02cd16943847414bd9705d",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x826e0BB2276271eFdF2a500597f37b94f6c153bA",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "1470303",
    "logsBloom": "0x
    "blockHash": "0x7f8ebb4f9e35e0c14a215f5b9dedfa625f9fdb1f82834e965124b6e26a933c4a",
    "transactionHash": "0xd8856475b1c18e6126c37678a8d87f7c4d573743da02cd16943847414bd9705d",
    "logs": [],
    "blockNumber": 26145446,
    "cumulativeGasUsed": "3885261",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6d09fa0e7c4fcae67eb2b5b0c23fbfcc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermitted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODULE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MinimalWallet.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"internalType\":\"struct MinimalWallet.ApprovalNote[]\",\"name\":\"notes\",\"type\":\"tuple[]\"}],\"name\":\"revokeApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"revokeERC1155Approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"revokeERC20Approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"}],\"name\":\"revokeERC721Approvals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum MinimalWallet.Protocol\",\"name\":\"protocol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MinimalWallet.TransferNote[]\",\"name\":\"notes\",\"type\":\"tuple[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"erc1155\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC1155s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"erc20s\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"withdrawERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wallet/MinimalWallet.sol\":\"MinimalWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/access/ACL.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nimport \\\"../libraries/StorageAPI.sol\\\";\\n\\nabstract contract ACL {\\n    using StorageAPI for bytes32;\\n\\n    error NotPermitted();\\n\\n    modifier isPermitted(bytes32 role) {\\n        bool permitted = _getPermission(role, msg.sender); // TODO: support GSN/Account abstraction\\n        if (!permitted) revert NotPermitted();\\n        _;\\n    }\\n\\n    // @notice Gets user permission for a role\\n    // @param role The bytes32 value of the role\\n    // @param account The address of the account\\n    // @return The permission status\\n    function getPermission(bytes32 role, address account) external view returns (bool) {\\n        return _getPermission(role, account);\\n    }\\n\\n    // @notice Internal function to get user permission for a role\\n    // @param role The bytes32 value of the role\\n    // @param account The address of the account\\n    // @return The permission status\\n    function _getPermission(bytes32 role, address account) internal view returns (bool) {\\n        bytes32 key = _getKey(role, account);\\n        return key.getBool();\\n    }\\n\\n    // @notice Internal function to get the key for the storage slot\\n    // @param role The bytes32 value of the role\\n    // @param account The address of the account\\n    // @return The bytes32 storage slot\\n    function _getKey(bytes32 role, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(role, account));\\n    }\\n}\\n\",\"keccak256\":\"0x50bc9b50157b89338a27043a7f24d9f6bc93bf624d93c9a4151d74c99340e6c1\",\"license\":\"GPL-3.0-only\"},\"contracts/access/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nabstract contract Roles {\\n    // Using same slot generation technique as eip-1967 -- https://eips.ethereum.org/EIPS/eip-1967\\n    bytes32 public constant OWNER_ROLE = bytes32(uint256(keccak256(\\\"enso.access.roles.owner\\\")) - 1);\\n    bytes32 public constant EXECUTOR_ROLE = bytes32(uint256(keccak256(\\\"enso.access.roles.executor\\\")) - 1);\\n    bytes32 public constant MODULE_ROLE = bytes32(uint256(keccak256(\\\"enso.access.roles.module\\\")) - 1);\\n}\",\"keccak256\":\"0x610f0e86412393a50368863c8c6276e42340535c14c80f9ec126e3c69efd4ad3\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/StorageAPI.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.16;\\n\\nlibrary StorageAPI {\\n    function setBytes(bytes32 key, bytes memory data) internal {\\n        bytes32 slot = keccak256(abi.encodePacked(key));\\n        assembly {\\n            let length := mload(data)\\n            switch gt(length, 0x1F)\\n            case 0x00 {\\n                sstore(key, or(mload(add(data, 0x20)), mul(length, 2)))\\n            }\\n            case 0x01 {\\n                sstore(key, add(mul(length, 2), 1))\\n                for {\\n                    let i := 0\\n                } lt(mul(i, 0x20), length) {\\n                    i := add(i, 0x01)\\n                } {\\n                    sstore(add(slot, i), mload(add(data, mul(add(i, 1), 0x20))))\\n                }\\n            }\\n        }\\n    }\\n\\n    function setBytes32(bytes32 key, bytes32 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setAddress(bytes32 key, address a) internal {\\n        assembly {\\n            sstore(key, a)\\n        }\\n    }\\n\\n    function setUint256(bytes32 key, uint256 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setInt256(bytes32 key, int256 val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function setBool(bytes32 key, bool val) internal {\\n        assembly {\\n            sstore(key, val)\\n        }\\n    }\\n\\n    function getBytes(bytes32 key) internal view returns (bytes memory data) {\\n        bytes32 slot = keccak256(abi.encodePacked(key));\\n        assembly {\\n            let length := sload(key)\\n            switch and(length, 0x01)\\n            case 0x00 {\\n                let decodedLength := div(and(length, 0xFF), 2)\\n                mstore(data, decodedLength)\\n                mstore(add(data, 0x20), and(length, not(0xFF)))\\n                mstore(0x40, add(data, 0x40))\\n            }\\n            case 0x01 {\\n                let decodedLength := div(length, 2)\\n                let i := 0\\n                mstore(data, decodedLength)\\n                for {\\n\\n                } lt(mul(i, 0x20), decodedLength) {\\n                    i := add(i, 0x01)\\n                } {\\n                    mstore(add(add(data, 0x20), mul(i, 0x20)), sload(add(slot, i)))\\n                }\\n                mstore(0x40, add(data, add(0x20, mul(i, 0x20))))\\n            }\\n        }\\n    }\\n\\n    function getBytes32(bytes32 key) internal view returns (bytes32 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getAddress(bytes32 key) internal view returns (address a) {\\n        assembly {\\n            a := sload(key)\\n        }\\n    }\\n\\n    function getUint256(bytes32 key) internal view returns (uint256 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getInt256(bytes32 key) internal view returns (int256 val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n\\n    function getBool(bytes32 key) internal view returns (bool val) {\\n        assembly {\\n            val := sload(key)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x78e99bac7eb0e62568a67c1dfd3f4d14b9c8be7e866d4205de91f01305e557a8\",\"license\":\"GPL-3.0-only\"},\"contracts/wallet/MinimalWallet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport \\\"../access/ACL.sol\\\";\\nimport \\\"../access/Roles.sol\\\";\\n\\ncontract MinimalWallet is ACL, Roles, ERC721Holder, ERC1155Holder {\\n    using SafeERC20 for IERC20;\\n\\n    enum Protocol {\\n        ETH,\\n        ERC20,\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    struct TransferNote {\\n        Protocol protocol;\\n        address token;\\n        uint256[] ids;\\n        uint256[] amounts;\\n    }\\n\\n    struct ApprovalNote {\\n        Protocol protocol;\\n        address token;\\n        address[] operators;\\n    }\\n\\n    error WithdrawFailed();\\n    error InvalidArrayLength();\\n\\n    ////////////////////////////////////////////////////\\n    // External functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    // @notice Withdraw an array of assets\\n    // @dev Works for ETH, ERC20s, ERC721s, and ERC1155s\\n    // @param notes A tuple that contains the protocol id, token address, array of ids and amounts\\n    function withdraw(TransferNote[] calldata notes) external isPermitted(OWNER_ROLE) {\\n        TransferNote memory note;\\n        Protocol protocol;\\n        uint256[] memory ids;\\n        uint256[] memory amounts;\\n\\n        uint256 length = notes.length;\\n        for (uint256 i; i < length; ) {\\n            note = notes[i];\\n            protocol = note.protocol;\\n            if (protocol == Protocol.ETH) {\\n                amounts = note.amounts;\\n                if (amounts.length != 1) revert InvalidArrayLength();\\n                _withdrawETH(amounts[0]);\\n            } else if (protocol == Protocol.ERC20) {\\n                amounts = note.amounts;\\n                if (amounts.length != 1) revert InvalidArrayLength();\\n                _withdrawERC20(IERC20(note.token), amounts[0]);\\n            } else if (protocol == Protocol.ERC721) {\\n                ids = note.ids;\\n                _withdrawERC721s(IERC721(note.token), ids);\\n            } else if (protocol == Protocol.ERC1155) {\\n                ids = note.ids;\\n                amounts = note.amounts;\\n                _withdrawERC1155s(IERC1155(note.token), ids, amounts);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // @notice Withdraw ETH from this contract to the msg.sender\\n    // @param amount The amount of ETH to be withdrawn\\n    function withdrawETH(uint256 amount) external isPermitted(OWNER_ROLE) {\\n        _withdrawETH(amount);\\n    }\\n\\n    // @notice Withdraw ERC20s\\n    // @param erc20s An array of erc20 addresses\\n    // @param amounts An array of amounts for each erc20\\n    function withdrawERC20s(\\n        IERC20[] calldata erc20s,\\n        uint256[] calldata amounts\\n    ) external isPermitted(OWNER_ROLE) {\\n        uint256 length = erc20s.length;\\n        if (amounts.length != length) revert InvalidArrayLength();\\n        for (uint256 i; i < length; ) {\\n            _withdrawERC20(erc20s[i], amounts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // @notice Withdraw multiple ERC721 ids for a single ERC721 contract\\n    // @param erc721 The address of the ERC721 contract\\n    // @param ids An array of ids that are to be withdrawn\\n    function withdrawERC721s(\\n        IERC721 erc721,\\n        uint256[] calldata ids\\n    ) external isPermitted(OWNER_ROLE) {\\n        _withdrawERC721s(erc721, ids);\\n    }\\n\\n    // @notice Withdraw multiple ERC1155 ids for a single ERC1155 contract\\n    // @param erc1155 The address of the ERC155 contract\\n    // @param ids An array of ids that are to be withdrawn\\n    // @param amounts An array of amounts per id\\n    function withdrawERC1155s(\\n        IERC1155 erc1155,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts\\n    ) external isPermitted(OWNER_ROLE) {\\n        _withdrawERC1155s(erc1155, ids, amounts);\\n    }\\n\\n    // @notice Revoke approval on an array of assets and operators\\n    // @dev Works for ERC20s, ERC721s, and ERC1155s\\n    // @param notes A tuple that contains the protocol id, token address, and array of operators\\n    function revokeApprovals(ApprovalNote[] calldata notes) external isPermitted(OWNER_ROLE) {\\n        ApprovalNote memory note;\\n        Protocol protocol;\\n\\n        uint256 length = notes.length;\\n        for (uint256 i; i < length; ) {\\n            note = notes[i];\\n            protocol = note.protocol;\\n            if (protocol == Protocol.ERC20) {\\n                _revokeERC20Approvals(IERC20(note.token), note.operators);\\n            } else if (protocol == Protocol.ERC721) {\\n                _revokeERC721Approvals(IERC721(note.token), note.operators);\\n            } else if (protocol == Protocol.ERC1155) {\\n                _revokeERC1155Approvals(IERC1155(note.token), note.operators);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // @notice Revoke approval of an ERC20 for an array of operators\\n    // @param erc20 The address of the ERC20 token\\n    // @param operators The array of operators to have approval revoked\\n    function revokeERC20Approvals(\\n        IERC20 erc20,\\n        address[] calldata operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC20Approvals(erc20, operators);\\n    }\\n\\n    // @notice Revoke approval of an ERC721 for an array of operators\\n    // @param erc721 The address of the ERC721 token\\n    // @param operators The array of operators to have approval revoked\\n    function revokeERC721Approvals(\\n        IERC721 erc721,\\n        address[] calldata operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC721Approvals(erc721, operators);\\n    }\\n\\n    // @notice Revoke approval of an ERC1155 for an array of operators\\n    // @param erc1155 The address of the ERC1155 token\\n    // @param operators The array of operators to have approval revoked\\n    function revokeERC1155Approvals(\\n        IERC1155 erc1155,\\n        address[] calldata operators\\n    ) external isPermitted(OWNER_ROLE) {\\n        _revokeERC1155Approvals(erc1155, operators);\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    // Internal functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    function _withdrawETH(uint256 amount) internal {\\n        (bool success, ) = msg.sender.call{value: amount}(\\\"\\\");\\n        if (!success) revert WithdrawFailed();\\n    }\\n\\n    function _withdrawERC20(IERC20 erc20, uint256 amount) internal {\\n        erc20.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function _withdrawERC721s(IERC721 erc721, uint256[] memory ids) internal {\\n        uint256 length = ids.length;\\n        for (uint256 i; i < length; ) {\\n            erc721.safeTransferFrom(address(this), msg.sender, ids[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _withdrawERC1155s(IERC1155 erc1155, uint256[] memory ids, uint256[] memory amounts) internal {\\n        // safeBatchTransferFrom will validate the array lengths\\n        erc1155.safeBatchTransferFrom(address(this), msg.sender, ids, amounts, \\\"\\\");\\n    }\\n\\n    function _revokeERC20Approvals(IERC20 erc20, address[] memory operators) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc20.safeApprove(operators[i], 0);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _revokeERC721Approvals(IERC721 erc721, address[] memory operators) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc721.setApprovalForAll(operators[i], false);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _revokeERC1155Approvals(IERC1155 erc1155, address[] memory operators) internal {\\n        uint256 length = operators.length;\\n        for (uint256 i; i < length; ) {\\n            erc1155.setApprovalForAll(operators[i], false);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    // Fallback functions //////////////////////////////\\n    ////////////////////////////////////////////////////\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x6536a201c06bae58bce6044fb28cef29c88780578dd0bf5b40eba97da8fea228\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576119bb908161001c8239f35b600080fdfe6080604081815260049182361015610022575b505050361561002057600080fd5b005b600090813560e01c90816301ffc9a714610f355750806307bd026514610edc5780630fe786e114610e47578063150b7a0214610dbb57806331b455a514610cef57806356255c5314610c8157806360d6c7cf14610c085780638a2685a914610aa3578063a4508b1f1461099a578063a6b520c014610941578063bc197c8114610884578063dedd65241461057d578063e1084a1314610313578063e58378bb146102b6578063e5cb370314610221578063f14210a6146101745763f23a6e610361001257346101715760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101715761011d610ff2565b5061012661104b565b506084359067ffffffffffffffff8211610171575060209261014a91369101611185565b50517ff23a6e61000000000000000000000000000000000000000000000000000000008152f35b80fd5b50913461021d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d57815160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b825233848201528381526101e0816110da565b51902054156101f6576101f390356113a5565b51f35b90517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b50913461021d57610231366111cc565b909192845160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b8252338782015286815261026f816110da565b519020541561028f57506101f3929161028991369161131f565b906118de565b84517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b50903461030f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261030f57602090517f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b8152f35b5080fd5b50913461021d576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105795767ffffffffffffffff823581811161057557610364903690850161101a565b92908551828101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b825233888201528781526103a0816110da565b519020541561054d579085929183516103b8816110da565b888152888382015260609485910152875b8581106103d557888851f35b8060051b8201357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181121561054957820190858236031261054957885191610420836110da565b80358981101561054157835261043785820161106e565b908584019182528a81013590878211610545570136601f8201121561054157610466903690878135910161131f565b928a8101938452519289841015610515576001938085036104ab575073ffffffffffffffffffffffffffffffffffffffff6104a5925116905190611853565b016103c9565b600281036104dc575073ffffffffffffffffffffffffffffffffffffffff6104d79251169051906118de565b6104a5565b6003146104eb575b50506104a5565b73ffffffffffffffffffffffffffffffffffffffff61050e9251169051906118de565b38806104e4565b60248c60218c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8b80fd5b8c80fd5b8980fd5b8486517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b8580fd5b8380fd5b50913461021d57602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105795767ffffffffffffffff8135818111610575576105cf903690840161101a565b9390918551828101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b8252338882015287815261060c816110da565b519020541561085c578551926106218461108f565b878452878385015260608085818a819801520152875b86811061064357888851f35b8060051b8201357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112156105495782016080813603126105495788519061068e8261108f565b8035888110156105415782526106a586820161106e565b8683019081528a820135868111610545576106c390369084016112a1565b918b84019283528881013590878211610858576106e2913691016112a1565b9288810193845251918983101561082c578261074857505050516001815103610720579061071a6107146001936112bf565b516113a5565b01610637565b8689517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b60019391928085036107bb5750505191825103610793576001929161078773ffffffffffffffffffffffffffffffffffffffff61078e935116916112bf565b51906113eb565b61071a565b878a517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b600195945090929190600281036107f057505073ffffffffffffffffffffffffffffffffffffffff61078e9251915116611693565b600314610800575b50505061071a565b73ffffffffffffffffffffffffffffffffffffffff6108249351915192511661177b565b3880806107f8565b60248d60218c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8d80fd5b8386517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b50346101715760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610171576108bc610ff2565b506108c561104b565b5067ffffffffffffffff9060443582811161030f576108e790369086016112a1565b5060643582811161030f576108ff90369086016112a1565b50608435918211610171575060209261091a91369101611185565b50517fbc197c81000000000000000000000000000000000000000000000000000000008152f35b50903461030f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261030f57602090517fc3757b2598fc76eee6f032de6e0c1a33b52273c8afc630e889b8d170f8a26b1a8152f35b50913461021d5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d576109d3610ff2565b9067ffffffffffffffff90602435828111610575576109f5903690830161101a565b92604435908111610a9f57610a0d903690840161101a565b939092865160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b82523389820152888152610a4b816110da565b5190205415610a78575091610a6a610a72926101f39695943691611253565b923691611253565b9161177b565b86517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b8680fd5b50913461021d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d5767ffffffffffffffff908035828111610c0457610af3903690830161101a565b91909260243590811161057557610b0d903690830161101a565b929091855160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b82523388820152878152610b4b816110da565b5190205415610bdd57818403610bb65750855b818110610b6a57868651f35b610b7581838761130f565b359073ffffffffffffffffffffffffffffffffffffffff82168203610bb257610bac600192610ba583888861130f565b35906113eb565b01610b5e565b8780fd5b85517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b85517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b8480fd5b50913461021d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d5760209250610c4461104b565b73ffffffffffffffffffffffffffffffffffffffff835191858301933584521683820152828152610c74816110da565b5190205490519015158152f35b50913461021d57610c91366111cc565b909192845160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b82523387820152868152610ccf816110da565b519020541561028f57506101f39291610ce9913691611253565b90611693565b50913461021d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d5780359073ffffffffffffffffffffffffffffffffffffffff821682036105795760243567ffffffffffffffff8111610c0457610d5e903690830161101a565b9091845160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b82523387820152868152610d9b816110da565b519020541561028f57506101f39291610db591369161131f565b90611853565b50346101715760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261017157610df3610ff2565b50610dfc61104b565b506064359067ffffffffffffffff82116101715750602092610e2091369101611185565b50517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b50913461021d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d57610e7f610ff2565b9060243567ffffffffffffffff8111610c0457610e9f903690830161101a565b9091845160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b8252338782015286815261026f816110da565b50903461030f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261030f57602090517fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b556120802f8152f35b9050833461021d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d57357fffffffff00000000000000000000000000000000000000000000000000000000811680910361021d57602092507f4e2312e0000000000000000000000000000000000000000000000000000000008114908115610fc8575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483610fc1565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361101557565b600080fd5b9181601f840112156110155782359167ffffffffffffffff8311611015576020808501948460051b01011161101557565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361101557565b359073ffffffffffffffffffffffffffffffffffffffff8216820361101557565b6080810190811067ffffffffffffffff8211176110ab57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176110ab57604052565b67ffffffffffffffff81116110ab57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176110ab57604052565b67ffffffffffffffff81116110ab57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b81601f820112156110155780359061119c8261114b565b926111aa604051948561110a565b8284526020838301011161101557816000926020809301838601378301015290565b9060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126110155760043573ffffffffffffffffffffffffffffffffffffffff8116810361101557916024359067ffffffffffffffff8211611015576112379160040161101a565b9091565b67ffffffffffffffff81116110ab5760051b60200190565b929161125e8261123b565b9161126c604051938461110a565b829481845260208094019160051b810192831161101557905b8282106112925750505050565b81358152908301908301611285565b9080601f83011215611015578160206112bc93359101611253565b90565b8051156112cc5760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80518210156112cc5760209160051b010190565b91908110156112cc5760051b0190565b929161132a8261123b565b91611338604051938461110a565b829481845260208094019160051b810192831161101557905b82821061135e5750505050565b83809161136a8461106e565b815201910190611351565b3d156113a0573d906113868261114b565b91611394604051938461110a565b82523d6000602084013e565b606090565b600080809260405190335af16113b9611375565b50156113c157565b60046040517f750b219c000000000000000000000000000000000000000000000000000000008152fd5b9061143791604051917fa9059cbb0000000000000000000000000000000000000000000000000000000060208401523360248401526044830152604482526114328261108f565b611439565b565b73ffffffffffffffffffffffffffffffffffffffff1690604051604081019080821067ffffffffffffffff8311176110ab576114b9916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af16114b3611375565b91611571565b8051806114c7575b50505050565b8184918101031261030f578201519081159182150361017157506114ed578080806114c1565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919290156115ec5750815115611585575090565b3b1561158e5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156115ff5750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b84811061167c575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b81810183015186820160440152859350820161163b565b81519060005b8281106116a65750505050565b73ffffffffffffffffffffffffffffffffffffffff82166116c782866112fb565b51813b1561101557600080926064604093845195869384927f42842e0e00000000000000000000000000000000000000000000000000000000845230600485015233602485015260448401525af190811561173d5750906001929161172e575b5001611699565b611737906110f6565b38611727565b513d6000823e3d90fd5b90815180825260208080930193019160005b828110611767575050505090565b835185529381019392810192600101611759565b73ffffffffffffffffffffffffffffffffffffffff1691823b1561101557611821926000928360206117f0948260405198899788967f2eb2c2d600000000000000000000000000000000000000000000000000000000885230600489015233602489015260a0604489015260a4880190611747565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9384888303016064890152611747565b85810392830160848701525201925af180156118475761183e5750565b611437906110f6565b6040513d6000823e3d90fd5b90805191600091825b84811061186a575050505050565b806118d873ffffffffffffffffffffffffffffffffffffffff61188f600194866112fb565b5116604051907f095ea7b300000000000000000000000000000000000000000000000000000000602083015260248201526044878183015281526118d28161108f565b85611439565b0161185c565b81519060005b8281106118f15750505050565b73ffffffffffffffffffffffffffffffffffffffff8083169061191483876112fb565b5116813b1561101557600080926044604093845195869384927fa22cb46500000000000000000000000000000000000000000000000000000000845260048401528160248401525af190811561173d57509060019291611976575b50016118e4565b61197f906110f6565b3861196f56fea26469706673582212203f779f58fb8b4b7a79bb4189327c09725b7d991511fe9eb1080aadebb456f63a64736f6c63430008100033",
  "deployedBytecode": "0x6080604081815260049182361015610022575b505050361561002057600080fd5b005b600090813560e01c90816301ffc9a714610f355750806307bd026514610edc5780630fe786e114610e47578063150b7a0214610dbb57806331b455a514610cef57806356255c5314610c8157806360d6c7cf14610c085780638a2685a914610aa3578063a4508b1f1461099a578063a6b520c014610941578063bc197c8114610884578063dedd65241461057d578063e1084a1314610313578063e58378bb146102b6578063e5cb370314610221578063f14210a6146101745763f23a6e610361001257346101715760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101715761011d610ff2565b5061012661104b565b506084359067ffffffffffffffff8211610171575060209261014a91369101611185565b50517ff23a6e61000000000000000000000000000000000000000000000000000000008152f35b80fd5b50913461021d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d57815160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b825233848201528381526101e0816110da565b51902054156101f6576101f390356113a5565b51f35b90517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b8280fd5b50913461021d57610231366111cc565b909192845160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b8252338782015286815261026f816110da565b519020541561028f57506101f3929161028991369161131f565b906118de565b84517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b50903461030f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261030f57602090517f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b8152f35b5080fd5b50913461021d576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105795767ffffffffffffffff823581811161057557610364903690850161101a565b92908551828101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b825233888201528781526103a0816110da565b519020541561054d579085929183516103b8816110da565b888152888382015260609485910152875b8581106103d557888851f35b8060051b8201357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18336030181121561054957820190858236031261054957885191610420836110da565b80358981101561054157835261043785820161106e565b908584019182528a81013590878211610545570136601f8201121561054157610466903690878135910161131f565b928a8101938452519289841015610515576001938085036104ab575073ffffffffffffffffffffffffffffffffffffffff6104a5925116905190611853565b016103c9565b600281036104dc575073ffffffffffffffffffffffffffffffffffffffff6104d79251169051906118de565b6104a5565b6003146104eb575b50506104a5565b73ffffffffffffffffffffffffffffffffffffffff61050e9251169051906118de565b38806104e4565b60248c60218c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8b80fd5b8c80fd5b8980fd5b8486517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b8580fd5b8380fd5b50913461021d57602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105795767ffffffffffffffff8135818111610575576105cf903690840161101a565b9390918551828101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b8252338882015287815261060c816110da565b519020541561085c578551926106218461108f565b878452878385015260608085818a819801520152875b86811061064357888851f35b8060051b8201357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112156105495782016080813603126105495788519061068e8261108f565b8035888110156105415782526106a586820161106e565b8683019081528a820135868111610545576106c390369084016112a1565b918b84019283528881013590878211610858576106e2913691016112a1565b9288810193845251918983101561082c578261074857505050516001815103610720579061071a6107146001936112bf565b516113a5565b01610637565b8689517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b60019391928085036107bb5750505191825103610793576001929161078773ffffffffffffffffffffffffffffffffffffffff61078e935116916112bf565b51906113eb565b61071a565b878a517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b600195945090929190600281036107f057505073ffffffffffffffffffffffffffffffffffffffff61078e9251915116611693565b600314610800575b50505061071a565b73ffffffffffffffffffffffffffffffffffffffff6108249351915192511661177b565b3880806107f8565b60248d60218c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8d80fd5b8386517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b50346101715760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610171576108bc610ff2565b506108c561104b565b5067ffffffffffffffff9060443582811161030f576108e790369086016112a1565b5060643582811161030f576108ff90369086016112a1565b50608435918211610171575060209261091a91369101611185565b50517fbc197c81000000000000000000000000000000000000000000000000000000008152f35b50903461030f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261030f57602090517fc3757b2598fc76eee6f032de6e0c1a33b52273c8afc630e889b8d170f8a26b1a8152f35b50913461021d5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d576109d3610ff2565b9067ffffffffffffffff90602435828111610575576109f5903690830161101a565b92604435908111610a9f57610a0d903690840161101a565b939092865160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b82523389820152888152610a4b816110da565b5190205415610a78575091610a6a610a72926101f39695943691611253565b923691611253565b9161177b565b86517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b8680fd5b50913461021d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d5767ffffffffffffffff908035828111610c0457610af3903690830161101a565b91909260243590811161057557610b0d903690830161101a565b929091855160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b82523388820152878152610b4b816110da565b5190205415610bdd57818403610bb65750855b818110610b6a57868651f35b610b7581838761130f565b359073ffffffffffffffffffffffffffffffffffffffff82168203610bb257610bac600192610ba583888861130f565b35906113eb565b01610b5e565b8780fd5b85517f9d89020a000000000000000000000000000000000000000000000000000000008152fd5b85517f39218f3b000000000000000000000000000000000000000000000000000000008152fd5b8480fd5b50913461021d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d5760209250610c4461104b565b73ffffffffffffffffffffffffffffffffffffffff835191858301933584521683820152828152610c74816110da565b5190205490519015158152f35b50913461021d57610c91366111cc565b909192845160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b82523387820152868152610ccf816110da565b519020541561028f57506101f39291610ce9913691611253565b90611693565b50913461021d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d5780359073ffffffffffffffffffffffffffffffffffffffff821682036105795760243567ffffffffffffffff8111610c0457610d5e903690830161101a565b9091845160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b82523387820152868152610d9b816110da565b519020541561028f57506101f39291610db591369161131f565b90611853565b50346101715760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261017157610df3610ff2565b50610dfc61104b565b506064359067ffffffffffffffff82116101715750602092610e2091369101611185565b50517f150b7a02000000000000000000000000000000000000000000000000000000008152f35b50913461021d57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d57610e7f610ff2565b9060243567ffffffffffffffff8111610c0457610e9f903690830161101a565b9091845160208101907f3fbe42dcb277543d3741131fe04ce9fb205e3b7154603a23a25efd63ed2c9e1b8252338782015286815261026f816110da565b50903461030f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261030f57602090517fd931ed5eea9427443091b211e417e6f83bd1d1a5235f4e7adbb05b556120802f8152f35b9050833461021d5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021d57357fffffffff00000000000000000000000000000000000000000000000000000000811680910361021d57602092507f4e2312e0000000000000000000000000000000000000000000000000000000008114908115610fc8575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501483610fc1565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361101557565b600080fd5b9181601f840112156110155782359167ffffffffffffffff8311611015576020808501948460051b01011161101557565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361101557565b359073ffffffffffffffffffffffffffffffffffffffff8216820361101557565b6080810190811067ffffffffffffffff8211176110ab57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff8211176110ab57604052565b67ffffffffffffffff81116110ab57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176110ab57604052565b67ffffffffffffffff81116110ab57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b81601f820112156110155780359061119c8261114b565b926111aa604051948561110a565b8284526020838301011161101557816000926020809301838601378301015290565b9060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8301126110155760043573ffffffffffffffffffffffffffffffffffffffff8116810361101557916024359067ffffffffffffffff8211611015576112379160040161101a565b9091565b67ffffffffffffffff81116110ab5760051b60200190565b929161125e8261123b565b9161126c604051938461110a565b829481845260208094019160051b810192831161101557905b8282106112925750505050565b81358152908301908301611285565b9080601f83011215611015578160206112bc93359101611253565b90565b8051156112cc5760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80518210156112cc5760209160051b010190565b91908110156112cc5760051b0190565b929161132a8261123b565b91611338604051938461110a565b829481845260208094019160051b810192831161101557905b82821061135e5750505050565b83809161136a8461106e565b815201910190611351565b3d156113a0573d906113868261114b565b91611394604051938461110a565b82523d6000602084013e565b606090565b600080809260405190335af16113b9611375565b50156113c157565b60046040517f750b219c000000000000000000000000000000000000000000000000000000008152fd5b9061143791604051917fa9059cbb0000000000000000000000000000000000000000000000000000000060208401523360248401526044830152604482526114328261108f565b611439565b565b73ffffffffffffffffffffffffffffffffffffffff1690604051604081019080821067ffffffffffffffff8311176110ab576114b9916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af16114b3611375565b91611571565b8051806114c7575b50505050565b8184918101031261030f578201519081159182150361017157506114ed578080806114c1565b608490604051907f08c379a00000000000000000000000000000000000000000000000000000000082526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b919290156115ec5750815115611585575090565b3b1561158e5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156115ff5750805190602001fd5b604051907f08c379a000000000000000000000000000000000000000000000000000000000825281602080600483015282519283602484015260005b84811061167c575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f836000604480968601015201168101030190fd5b81810183015186820160440152859350820161163b565b81519060005b8281106116a65750505050565b73ffffffffffffffffffffffffffffffffffffffff82166116c782866112fb565b51813b1561101557600080926064604093845195869384927f42842e0e00000000000000000000000000000000000000000000000000000000845230600485015233602485015260448401525af190811561173d5750906001929161172e575b5001611699565b611737906110f6565b38611727565b513d6000823e3d90fd5b90815180825260208080930193019160005b828110611767575050505090565b835185529381019392810192600101611759565b73ffffffffffffffffffffffffffffffffffffffff1691823b1561101557611821926000928360206117f0948260405198899788967f2eb2c2d600000000000000000000000000000000000000000000000000000000885230600489015233602489015260a0604489015260a4880190611747565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9384888303016064890152611747565b85810392830160848701525201925af180156118475761183e5750565b611437906110f6565b6040513d6000823e3d90fd5b90805191600091825b84811061186a575050505050565b806118d873ffffffffffffffffffffffffffffffffffffffff61188f600194866112fb565b5116604051907f095ea7b300000000000000000000000000000000000000000000000000000000602083015260248201526044878183015281526118d28161108f565b85611439565b0161185c565b81519060005b8281106118f15750505050565b73ffffffffffffffffffffffffffffffffffffffff8083169061191483876112fb565b5116813b1561101557600080926044604093845195869384927fa22cb46500000000000000000000000000000000000000000000000000000000845260048401528160248401525af190811561173d57509060019291611976575b50016118e4565b61197f906110f6565b3861196f56fea26469706673582212203f779f58fb8b4b7a79bb4189327c09725b7d991511fe9eb1080aadebb456f63a64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}